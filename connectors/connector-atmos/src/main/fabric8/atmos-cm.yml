---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: atmos
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: atmos
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: atmos
        spec:
          containers:
          - image: funktion/connector-atmos:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: atmos
      syntax: atmos:name/operation
      title: Atmos
      description: The atmos component is used for integrating with EMC's Atomos Storage.
      label: file,cloud
      deprecated: false
      async: false
      javaType: org.apache.camel.component.atmos.AtmosComponent
      groupId: org.apache.camel
      artifactId: camel-atmos
      version: 2.18.3
    componentProperties: {}
    properties:
      name:
        kind: path
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Atmos name
        order: 0
      operation:
        kind: path
        group: common
        required: true
        type: string
        javaType: org.apache.camel.component.atmos.util.AtmosOperation
        enum:
        - put
        - del
        - search
        - get
        - move
        deprecated: false
        secret: false
        description: Operation to perform
        order: 1
      enableSslValidation:
        kind: parameter
        group: common
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Atmos SSL validation
        order: 2
      fullTokenId:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Atmos client fullTokenId
        order: 3
      localPath:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Local path to put files
        order: 4
      newRemotePath:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: New path on Atmos when moving files
        order: 5
      query:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Search query on Atmos
        order: 6
      remotePath:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Where to put files on Atmos
        order: 7
      secretKey:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Atmos shared secret
        order: 8
      uri:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Atomos server uri
        order: 9
      bridgeErrorHandler:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 10
      exceptionHandler:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.ExceptionHandler
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 11
      exchangePattern:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.ExchangePattern
        enum:
        - InOnly
        - RobustInOnly
        - InOut
        - InOptionalOut
        - OutOnly
        - RobustOutOnly
        - OutIn
        - OutOptionalIn
        deprecated: false
        secret: false
        description: Sets the exchange pattern when the consumer creates an exchange.
        order: 12
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 13
  documentation.adoc: |
    [[Atmos-Atmos]]
    Atmos Component
    ~~~~~~~~~~~~~~~

    *Available as of Camel 2.15*

    *Camel-Gora* is an http://camel.apache.org/[Apache Camel] component that
    allows you to work with ViPR object data services using the
    https://github.com/emcvipr/dataservices-sdk-java[Atmos Client].

    [source,java]
    -------------------------------
    from("atmos:foo/get?remotePath=/path").to("mock:test");
    -------------------------------

    [[Atmos-Options]]
    Options
    ~~~~~~~


    // component options: START
    The Atmos component has no options.
    // component options: END



    // endpoint options: START
    The Atmos component supports 14 endpoint options which are listed below:

    {% raw %}
    [width="100%",cols="2,1,1m,1m,5",options="header"]
    |=======================================================================
    | Name | Group | Default | Java Type | Description
    | name | common |  | String | Atmos name
    | operation | common |  | AtmosOperation | *Required* Operation to perform
    | enableSslValidation | common | false | boolean | Atmos SSL validation
    | fullTokenId | common |  | String | Atmos client fullTokenId
    | localPath | common |  | String | Local path to put files
    | newRemotePath | common |  | String | New path on Atmos when moving files
    | query | common |  | String | Search query on Atmos
    | remotePath | common |  | String | Where to put files on Atmos
    | secretKey | common |  | String | Atmos shared secret
    | uri | common |  | String | Atomos server uri
    | bridgeErrorHandler | consumer | false | boolean | Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
    | exceptionHandler | consumer (advanced) |  | ExceptionHandler | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
    | exchangePattern | consumer (advanced) |  | ExchangePattern | Sets the exchange pattern when the consumer creates an exchange.
    | synchronous | advanced | false | boolean | Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
    |=======================================================================
    {% endraw %}
    // endpoint options: END


    [[Atmos-Dependencies]]
    Dependencies
    ^^^^^^^^^^^^

    To use Atmos in your camel routes you need to add the dependency
    on *camel-atmos* which implements this data format.

    If you use maven you could just add the following to your pom.xml,
    substituting the version number for the latest & greatest release (see
    link:download.html[the download page for the latest versions]).

    [source,xml]
    ----------------------------------------------------------
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-atmos</artifactId>
      <version>x.x.x</version>
      <!-- use the same version as your Camel core version -->
    </dependency>
    ----------------------------------------------------------
