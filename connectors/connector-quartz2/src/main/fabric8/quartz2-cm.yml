---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: quartz2
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: quartz2
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: quartz2
        spec:
          containers:
          - image: funktion/connector-quartz2:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: quartz2
      syntax: quartz2:groupName/triggerName
      title: Quartz2
      description: Provides a scheduled delivery of messages using the Quartz 2.x scheduler.
      label: scheduling
      deprecated: false
      async: false
      consumerOnly: true
      javaType: org.apache.camel.component.quartz2.QuartzComponent
      groupId: org.apache.camel
      artifactId: camel-quartz2
      version: 2.18.3
    componentProperties:
      autoStartScheduler:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        description: Whether or not the scheduler should be auto started. This options is default true
        order: 0
      startDelayedSeconds:
        kind: property
        type: integer
        javaType: int
        deprecated: false
        secret: false
        description: Seconds to wait before starting the quartz scheduler.
        order: 1
      prefixJobNameWithEndpointId:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        description: Whether to prefix the quartz job with the endpoint id. This option is default false.
        order: 2
      enableJmx:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        description: Whether to enable Quartz JMX which allows to manage the Quartz scheduler from JMX. This options is default true
        order: 3
      properties:
        kind: property
        type: object
        javaType: java.util.Properties
        deprecated: false
        secret: false
        description: Properties to configure the Quartz scheduler.
        order: 4
      propertiesFile:
        kind: property
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: File name of the properties to load from the classpath
        order: 5
      prefixInstanceName:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        description: Whether to prefix the Quartz Scheduler instance name with the CamelContext name. This is enabled by default to let each CamelContext use its own Quartz scheduler instance by default. You can set this option to false to reuse Quartz scheduler instances between multiple CamelContext's.
        order: 6
      schedulerFactory:
        kind: property
        type: object
        javaType: org.quartz.SchedulerFactory
        deprecated: false
        secret: false
        description: To use the custom SchedulerFactory which is used to create the Scheduler.
        order: 7
      scheduler:
        kind: property
        type: object
        javaType: org.quartz.Scheduler
        deprecated: false
        secret: false
        description: To use the custom configured Quartz scheduler instead of creating a new Scheduler.
        order: 8
    properties:
      groupName:
        kind: path
        group: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        defaultValue: Camel
        description: The quartz group name to use. The combination of group name and timer name should be unique.
        order: 0
      triggerName:
        kind: path
        group: consumer
        required: true
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: The quartz timer name to use. The combination of group name and timer name should be unique.
        order: 1
      bridgeErrorHandler:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 2
      cron:
        kind: parameter
        group: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Specifies a cron expression to define when to trigger.
        order: 3
      deleteJob:
        kind: parameter
        group: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: If set to true then the trigger automatically delete when route stop. Else if set to false it will remain in scheduler. When set to false it will also mean user may reuse pre-configured trigger with camel Uri. Just ensure the names match. Notice you cannot have both deleteJob and pauseJob set to true.
        order: 4
      durableJob:
        kind: parameter
        group: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Whether or not the job should remain stored after it is orphaned (no triggers point to it).
        order: 5
      pauseJob:
        kind: parameter
        group: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: If set to true then the trigger automatically pauses when route stop. Else if set to false it will remain in scheduler. When set to false it will also mean user may reuse pre-configured trigger with camel Uri. Just ensure the names match. Notice you cannot have both deleteJob and pauseJob set to true.
        order: 6
      recoverableJob:
        kind: parameter
        group: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Instructs the scheduler whether or not the job should be re-executed if a 'recovery' or 'fail-over' situation is encountered.
        order: 7
      stateful:
        kind: parameter
        group: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Uses a Quartz PersistJobDataAfterExecution and DisallowConcurrentExecution instead of the default job.
        order: 8
      exceptionHandler:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.ExceptionHandler
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 9
      exchangePattern:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.ExchangePattern
        enum:
        - InOnly
        - RobustInOnly
        - InOut
        - InOptionalOut
        - OutOnly
        - RobustOutOnly
        - OutIn
        - OutOptionalIn
        deprecated: false
        secret: false
        description: Sets the exchange pattern when the consumer creates an exchange.
        order: 10
      customCalendar:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: org.quartz.Calendar
        deprecated: false
        secret: false
        description: Specifies a custom calendar to avoid specific range of date
        order: 11
      jobParameters:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: java.util.Map<java.lang.String,java.lang.Object>
        prefix: job.
        multiValue: true
        deprecated: false
        secret: false
        description: To configure additional options on the job.
        order: 12
      prefixJobNameWithEndpointId:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Whether the job name should be prefixed with endpoint id
        order: 13
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 14
      triggerParameters:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: java.util.Map<java.lang.String,java.lang.Object>
        prefix: trigger.
        multiValue: true
        deprecated: false
        secret: false
        description: To configure additional options on the trigger.
        order: 15
      usingFixedCamelContextName:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: If it is true JobDataMap uses the CamelContext name directly to reference the CamelContext if it is false JobDataMap uses use the CamelContext management name which could be changed during the deploy time.
        order: 16
      autoStartScheduler:
        kind: parameter
        group: scheduler
        label: scheduler
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether or not the scheduler should be auto started.
        order: 17
      fireNow:
        kind: parameter
        group: scheduler
        label: scheduler
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: If it is true will fire the trigger when the route is start when using SimpleTrigger.
        order: 18
      startDelayedSeconds:
        kind: parameter
        group: scheduler
        label: scheduler
        type: integer
        javaType: int
        deprecated: false
        secret: false
        description: Seconds to wait before starting the quartz scheduler.
        order: 19
      triggerStartDelay:
        kind: parameter
        group: scheduler
        label: scheduler
        type: integer
        javaType: long
        deprecated: false
        secret: false
        defaultValue: "500"
        description: In case of scheduler has already started we want the trigger start slightly after current time to ensure endpoint is fully started before the job kicks in.
        order: 20
  documentation.adoc: "[[Quartz2-Quartz2Component]]\nQuartz2 Component\n~~~~~~~~~~~~~~~~~\n\
    \n*Available as of Camel 2.12.0*\n\nThe *quartz2:* component provides a scheduled\
    \ delivery of messages using\nthe http://www.quartz-scheduler.org/[Quartz Scheduler\
    \ 2.x].  +\n Each endpoint represents a different timer (in Quartz terms, a Trigger\n\
    and JobDetail).\n\nMaven users will need to add the following dependency to their\
    \ `pom.xml`\nfor this component:\n\n[source,xml]\n------------------------------------------------------------\n\
    <dependency>\n    <groupId>org.apache.camel</groupId>\n    <artifactId>camel-quartz2</artifactId>\n\
    \    <version>x.x.x</version>\n    <!-- use the same version as your Camel core\
    \ version -->\n</dependency>\n------------------------------------------------------------\n\
    \n*NOTE:* Quartz 2.x API is not compatible with Quartz 1.x. If you need to\nremain\
    \ on old Quartz 1.x, please +\n use the old link:quartz.html[Quartz] component\
    \ instead.\n\n[[Quartz2-URIformat]]\nURI format\n^^^^^^^^^^\n\n[source,java]\n\
    ---------------------------------------------\nquartz2://timerName?options\nquartz2://groupName/timerName?options\n\
    quartz2://groupName/timerName?cron=expression\nquartz2://timerName?cron=expression\n\
    ---------------------------------------------\n\nThe component uses either a `CronTrigger`\
    \ or a `SimpleTrigger`. If no\ncron expression is provided, the component uses\
    \ a simple trigger. If no\n`groupName` is provided, the quartz component uses\
    \ the `Camel` group\nname.\n\nYou can append query options to the URI in the following\
    \ format,\n`?option=value&option=value&...`\n\n[[Quartz2-Options]]\nOptions\n\
    ^^^^^^^\n\n\n\n// component options: START\nThe Quartz2 component supports 9 options\
    \ which are listed below.\n\n\n\n{% raw %}\n[width=\"100%\",cols=\"2,1m,7\",options=\"\
    header\"]\n|=======================================================================\n\
    | Name | Java Type | Description\n| autoStartScheduler | boolean | Whether or\
    \ not the scheduler should be auto started. This options is default true\n| startDelayedSeconds\
    \ | int | Seconds to wait before starting the quartz scheduler.\n| prefixJobNameWithEndpointId\
    \ | boolean | Whether to prefix the quartz job with the endpoint id. This option\
    \ is default false.\n| enableJmx | boolean | Whether to enable Quartz JMX which\
    \ allows to manage the Quartz scheduler from JMX. This options is default true\n\
    | properties | Properties | Properties to configure the Quartz scheduler.\n| propertiesFile\
    \ | String | File name of the properties to load from the classpath\n| prefixInstanceName\
    \ | boolean | Whether to prefix the Quartz Scheduler instance name with the CamelContext\
    \ name. This is enabled by default to let each CamelContext use its own Quartz\
    \ scheduler instance by default. You can set this option to false to reuse Quartz\
    \ scheduler instances between multiple CamelContext's.\n| schedulerFactory | SchedulerFactory\
    \ | To use the custom SchedulerFactory which is used to create the Scheduler.\n\
    | scheduler | Scheduler | To use the custom configured Quartz scheduler instead\
    \ of creating a new Scheduler.\n|=======================================================================\n\
    {% endraw %}\n// component options: END\n\n\n\n\n// endpoint options: START\n\
    The Quartz2 component supports 21 endpoint options which are listed below:\n\n\
    {% raw %}\n[width=\"100%\",cols=\"2,1,1m,1m,5\",options=\"header\"]\n|=======================================================================\n\
    | Name | Group | Default | Java Type | Description\n| groupName | consumer | Camel\
    \ | String | The quartz group name to use. The combination of group name and timer\
    \ name should be unique.\n| triggerName | consumer |  | String | *Required* The\
    \ quartz timer name to use. The combination of group name and timer name should\
    \ be unique.\n| bridgeErrorHandler | consumer | false | boolean | Allows for bridging\
    \ the consumer to the Camel routing Error Handler which mean any exceptions occurred\
    \ while the consumer is trying to pickup incoming messages or the likes will now\
    \ be processed as a message and handled by the routing Error Handler. By default\
    \ the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with\
    \ exceptions that will be logged at WARN/ERROR level and ignored.\n| cron | consumer\
    \ |  | String | Specifies a cron expression to define when to trigger.\n| deleteJob\
    \ | consumer | true | boolean | If set to true then the trigger automatically\
    \ delete when route stop. Else if set to false it will remain in scheduler. When\
    \ set to false it will also mean user may reuse pre-configured trigger with camel\
    \ Uri. Just ensure the names match. Notice you cannot have both deleteJob and\
    \ pauseJob set to true.\n| durableJob | consumer | false | boolean | Whether or\
    \ not the job should remain stored after it is orphaned (no triggers point to\
    \ it).\n| pauseJob | consumer | false | boolean | If set to true then the trigger\
    \ automatically pauses when route stop. Else if set to false it will remain in\
    \ scheduler. When set to false it will also mean user may reuse pre-configured\
    \ trigger with camel Uri. Just ensure the names match. Notice you cannot have\
    \ both deleteJob and pauseJob set to true.\n| recoverableJob | consumer | false\
    \ | boolean | Instructs the scheduler whether or not the job should be re-executed\
    \ if a 'recovery' or 'fail-over' situation is encountered.\n| stateful | consumer\
    \ | false | boolean | Uses a Quartz PersistJobDataAfterExecution and DisallowConcurrentExecution\
    \ instead of the default job.\n| exceptionHandler | consumer (advanced) |  | ExceptionHandler\
    \ | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler\
    \ is enabled then this options is not in use. By default the consumer will deal\
    \ with exceptions that will be logged at WARN/ERROR level and ignored.\n| exchangePattern\
    \ | consumer (advanced) |  | ExchangePattern | Sets the exchange pattern when\
    \ the consumer creates an exchange.\n| customCalendar | advanced |  | Calendar\
    \ | Specifies a custom calendar to avoid specific range of date\n| jobParameters\
    \ | advanced |  | Map | To configure additional options on the job.\n| prefixJobNameWithEndpointId\
    \ | advanced | false | boolean | Whether the job name should be prefixed with\
    \ endpoint id\n| synchronous | advanced | false | boolean | Sets whether synchronous\
    \ processing should be strictly used or Camel is allowed to use asynchronous processing\
    \ (if supported).\n| triggerParameters | advanced |  | Map | To configure additional\
    \ options on the trigger.\n| usingFixedCamelContextName | advanced | false | boolean\
    \ | If it is true JobDataMap uses the CamelContext name directly to reference\
    \ the CamelContext if it is false JobDataMap uses use the CamelContext management\
    \ name which could be changed during the deploy time.\n| autoStartScheduler |\
    \ scheduler | true | boolean | Whether or not the scheduler should be auto started.\n\
    | fireNow | scheduler | false | boolean | If it is true will fire the trigger\
    \ when the route is start when using SimpleTrigger.\n| startDelayedSeconds | scheduler\
    \ |  | int | Seconds to wait before starting the quartz scheduler.\n| triggerStartDelay\
    \ | scheduler | 500 | long | In case of scheduler has already started we want\
    \ the trigger start slightly after current time to ensure endpoint is fully started\
    \ before the job kicks in.\n|=======================================================================\n\
    {% endraw %}\n// endpoint options: END\n\n\nFor example, the following routing\
    \ rule will fire two timer events to\nthe `mock:results` endpoint:\n\n[source,java]\n\
    --------------------------------------------------------------------------------------------------------------------------\n\
    from(\"quartz2://myGroup/myTimerName?trigger.repeatInterval=2&trigger.repeatCount=1\"\
    ).routeId(\"myRoute\").to(\"mock:result\");\n--------------------------------------------------------------------------------------------------------------------------\n\
    \nWhen using `stateful=true`, the\nhttp://quartz-scheduler.org/api/2.0.0/org/quartz/JobDataMap.html[JobDataMap]\n\
    is re-persisted after every execution of the job, thus preserving state\nfor the\
    \ next execution.\n\nINFO: *Running in OSGi and having multiple bundles with quartz\n\
    routes*\nIf you run in OSGi such as Apache ServiceMix, or Apache Karaf, and have\n\
    multiple bundles with Camel routes that start from\nlink:quartz2.html[Quartz2]\
    \ endpoints, then make sure if you assign an `id` \nto the <camelContext> that\
    \ this id is unique, as this is\nrequired by the `QuartzScheduler` in the OSGi\
    \ container. If you do not\nset any `id` on <camelContext> then a unique id is\
    \ auto assigned, and there is no problem.\n\n[[Quartz2-Configuringquartz.propertiesfile]]\n\
    Configuring quartz.properties file\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBy default\
    \ Quartz will look for a `quartz.properties` file in the\n`org/quartz` directory\
    \ of the classpath. If you are using WAR\ndeployments this means just drop the\
    \ quartz.properties in\n`WEB-INF/classes/org/quartz`.\n\nHowever the Camel link:quartz2.html[Quartz2]\
    \ component also allows you\nto configure properties:\n\n[width=\"100%\",cols=\"\
    10%,10%,10%,70%\",options=\"header\",]\n|=======================================================================\n\
    |Parameter |Default |Type |Description\n\n|`properties` |`null` |`Properties`\
    \ |You can configure a `java.util.Properties` instance.\n\n|`propertiesFile` |`null`\
    \ |`String` |File name of the properties to load from the classpath\n|=======================================================================\n\
    \nTo do this you can configure this in Spring XML as follows\n\n[source,xml]\n\
    -------------------------------------------------------------------------------\n\
    <bean id=\"quartz\" class=\"org.apache.camel.component.quartz2.QuartzComponent\"\
    >\n    <property name=\"propertiesFile\" value=\"com/mycompany/myquartz.properties\"\
    />\n</bean>\n-------------------------------------------------------------------------------\n\
    \n[[Quartz2-EnablingQuartzschedulerinJMX]]\nEnabling Quartz scheduler in JMX\n\
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou need to configure the quartz scheduler\
    \ properties to enable JMX. +\n That is typically setting the option\n`\"org.quartz.scheduler.jmx.export\"\
    ` to a `true` value in the\nconfiguration file.\n\nFrom Camel 2.13 onwards Camel\
    \ will automatic set this option to true,\nunless explicit disabled.\n\n[[Quartz2-StartingtheQuartzscheduler]]\n\
    Starting the Quartz scheduler\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe link:quartz2.html[Quartz2]\
    \ component offers an option to let the\nQuartz scheduler be started delayed,\
    \ or not auto started at all.\n\nThis is an example:\n\n[source,xml]\n------------------------------------------------------------------------------\n\
    <bean id=\"quartz2\" class=\"org.apache.camel.component.quartz2.QuartzComponent\"\
    >\n    <property name=\"startDelayedSeconds\" value=\"5\"/>\n</bean>\n------------------------------------------------------------------------------\n\
    \n[[Quartz2-Clustering]]\nClustering\n^^^^^^^^^^\n\nIf you use Quartz in clustered\
    \ mode, e.g. the `JobStore` is clustered.\nThen the link:quartz2.html[Quartz2]\
    \ component will *not* pause/remove\ntriggers when a node is being stopped/shutdown.\
    \ This allows the trigger\nto keep running on the other nodes in the cluster.\n\
    \n*Note*: When running in clustered node no checking is done to ensure\nunique\
    \ job name/group for endpoints.\n\n[[Quartz2-MessageHeaders]]\nMessage Headers\n\
    ^^^^^^^^^^^^^^^\n\nCamel adds the getters from the Quartz Execution Context as\
    \ header\nvalues. The following headers are added: +\n `calendar`, `fireTime`,\
    \ `jobDetail`, `jobInstance`, `jobRuntTime`,\n`mergedJobDataMap`, `nextFireTime`,\
    \ `previousFireTime`, `refireCount`,\n`result`, `scheduledFireTime`, `scheduler`,\
    \ `trigger`, `triggerName`,\n`triggerGroup`.\n\nThe `fireTime` header contains\
    \ the `java.util.Date` of when the exchange\nwas fired.\n\n[[Quartz2-UsingCronTriggers]]\n\
    Using Cron Triggers\n^^^^^^^^^^^^^^^^^^^\n\nQuartz supports\nhttp://www.quartz-scheduler.org/documentation/quartz-2.x/tutorials/crontrigger[Cron-like\n\
    expressions] for specifying timers in a handy format. You can use these\nexpressions\
    \ in the `cron` URI parameter; though to preserve valid URI\nencoding we allow\
    \ + to be used instead of spaces.\n\nFor example, the following will fire a message\
    \ every five minutes\nstarting at 12pm (noon) to 6pm on weekdays:\n\n[source,java]\n\
    ------------------------------------------------------------------------------------------------\n\
    from(\"quartz2://myGroup/myTimerName?cron=0+0/5+12-18+?+*+MON-FRI\").to(\"activemq:Totally.Rocks\"\
    );\n------------------------------------------------------------------------------------------------\n\
    \nwhich is equivalent to using the cron expression\n\n[source,java]\n-----------------------\n\
    0 0/5 12-18 ? * MON-FRI\n-----------------------\n\nThe following table shows\
    \ the URI character encodings we use to preserve\nvalid URI syntax:\n\n[width=\"\
    100%\",cols=\"50%,50%\",options=\"header\",]\n|=======================================================================\n\
    |URI Character |Cron character\n\n|`+` | _Space_\n|=======================================================================\n\
    \n[[Quartz2-Specifyingtimezone]]\nSpecifying time zone\n^^^^^^^^^^^^^^^^^^^^\n\
    \nThe Quartz Scheduler allows you to configure time zone per trigger. For\nexample\
    \ to use a timezone of your country, then you can do as follows:\n\n[source,java]\n\
    --------------------------------------------------------------------------------------------\n\
    quartz2://groupName/timerName?cron=0+0/5+12-18+?+*+MON-FRI&trigger.timeZone=Europe/Stockholm\n\
    --------------------------------------------------------------------------------------------\n\
    \nThe timeZone value is the values accepted by `java.util.TimeZone`.\n\n[[Quartz2-UsingQuartzScheduledPollConsumerScheduler]]\n\
    Using QuartzScheduledPollConsumerScheduler\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nThe link:quartz2.html[Quartz2] component provides a\nlink:polling-consumer.html[Polling\
    \ Consumer] scheduler which allows to\nuse cron based scheduling for link:polling-consumer.html[Polling\n\
    Consumer] such as the link:file2.html[File] and link:ftp2.html[FTP]\nconsumers.\n\
    \nFor example to use a cron based expression to poll for files every 2nd\nsecond,\
    \ then a Camel route can be define simply as:\n\n[source,java]\n---------------------------------------------------------------------\n\
    \    from(\"file:inbox?scheduler=quartz2&scheduler.cron=0/2+*+*+*+*+?\")\n   \
    \    .to(\"bean:process\");\n---------------------------------------------------------------------\n\
    \nNotice we define the `scheduler=quartz2` to instruct Camel to use the\nlink:quartz2.html[Quartz2]\
    \ based scheduler. Then we use `scheduler.xxx`\noptions to configure the scheduler.\
    \ The link:quartz2.html[Quartz2]\nscheduler requires the cron option to be set.\n\
    \nThe following options is supported:\n\n[width=\"100%\",cols=\"10%,10%,10%,70%\"\
    ,options=\"header\",]\n|=======================================================================\n\
    |Parameter |Default |Type |Description\n\n|`quartzScheduler` |`null` |`org.quartz.Scheduler`\
    \ |To use a custom Quartz scheduler. If none configure then the shared\nscheduler\
    \ from the link:quartz2.html[Quartz2] component is used.\n\n|`cron` |`null` |`String`\
    \ |*Mandatory*: To define the cron expression for triggering the polls.\n\n|`triggerId`\
    \ |`null` |`String` |To specify the trigger id. If none provided then an UUID\
    \ is generated\nand used.\n\n|`triggerGroup` |`QuartzScheduledPollConsumerScheduler`\
    \ |`String` |To specify the trigger group.\n\n|`timeZone` |`Default` |`TimeZone`\
    \ |The time zone to use for the CRON trigger.\n|=======================================================================\n\
    \n*Important:* Remember configuring these options from the endpoint\nlink:uris.html[URIs]\
    \ must be prefixed with `scheduler.`. \nFor example to configure the trigger id\
    \ and group:\n\n[source,java]\n-----------------------------------------------------------------------------------------------------------------------------\n\
    \    from(\"file:inbox?scheduler=quartz2&scheduler.cron=0/2+*+*+*+*+?&scheduler.triggerId=myId&scheduler.triggerGroup=myGroup\"\
    )\n       .to(\"bean:process\");\n-----------------------------------------------------------------------------------------------------------------------------\n\
    \nThere is also a CRON scheduler in link:spring.html[Spring], so you can\nuse\
    \ the following as well:\n\n[source,java]\n--------------------------------------------------------------------\n\
    \    from(\"file:inbox?scheduler=spring&scheduler.cron=0/2+*+*+*+*+?\")\n    \
    \   .to(\"bean:process\");\n--------------------------------------------------------------------\n\
    \n[[Quartz2-SeeAlso]]\nSee Also\n^^^^^^^^\n\n* link:configuring-camel.html[Configuring\
    \ Camel]\n* link:component.html[Component]\n* link:endpoint.html[Endpoint]\n*\
    \ link:getting-started.html[Getting Started]\n\n* link:quartz.html[Quartz]\n*\
    \ link:timer.html[Timer]\n\n"
