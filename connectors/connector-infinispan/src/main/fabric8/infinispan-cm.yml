---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: infinispan
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: infinispan
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: infinispan
        spec:
          containers:
          - image: funktion/connector-infinispan:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: infinispan
      syntax: infinispan:host
      title: Infinispan
      description: For reading/writing from/to Infinispan distributed key/value store and data grid.
      label: cache,datagrid,clustering
      deprecated: false
      async: false
      javaType: org.apache.camel.component.infinispan.InfinispanComponent
      groupId: org.apache.camel
      artifactId: camel-infinispan
      version: 2.18.3
    componentProperties: {}
    properties:
      host:
        kind: path
        group: common
        required: true
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Specifies the host of the cache on Infinispan instance
        order: 0
      cacheContainer:
        kind: parameter
        group: common
        type: object
        javaType: org.infinispan.commons.api.BasicCacheContainer
        deprecated: false
        secret: false
        description: Specifies the cache Container to connect
        order: 1
      cacheName:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Specifies the cache name
        order: 2
      queryBuilder:
        kind: parameter
        group: common
        type: object
        javaType: org.apache.camel.component.infinispan.InfinispanQueryBuilder
        deprecated: false
        secret: false
        description: Specifies the query builder.
        order: 3
      bridgeErrorHandler:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 4
      clusteredListener:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: If true the listener will be installed for the entire cluster
        order: 5
      customListener:
        kind: parameter
        group: consumer
        label: consumer
        type: object
        javaType: org.apache.camel.component.infinispan.InfinispanCustomListener
        deprecated: false
        secret: false
        description: Returns the custom listener in use if provided
        order: 6
      eventTypes:
        kind: parameter
        group: consumer
        label: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: 'Specifies the set of event types to register by the consumer. Multiple
          event can be separated by comma. The possible event types are: CACHE_ENTRY_ACTIVATED
          CACHE_ENTRY_PASSIVATED CACHE_ENTRY_VISITED CACHE_ENTRY_LOADED CACHE_ENTRY_EVICTED
          CACHE_ENTRY_CREATED CACHE_ENTRY_REMOVED CACHE_ENTRY_MODIFIED TRANSACTION_COMPLETED
          TRANSACTION_REGISTERED CACHE_ENTRY_INVALIDATED DATA_REHASHED TOPOLOGY_CHANGED
          PARTITION_STATUS_CHANGED'
        order: 7
      sync:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: If true the consumer will receive notifications synchronously
        order: 8
      exceptionHandler:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.ExceptionHandler
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 9
      exchangePattern:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.ExchangePattern
        enum:
        - InOnly
        - RobustInOnly
        - InOut
        - InOptionalOut
        - OutOnly
        - RobustOutOnly
        - OutIn
        - OutOptionalIn
        deprecated: false
        secret: false
        description: Sets the exchange pattern when the consumer creates an exchange.
        order: 10
      command:
        kind: parameter
        group: producer
        label: producer
        type: string
        javaType: java.lang.String
        enum:
        - put
        - putAll
        - putIfAbsent
        - putAsync
        - putAllAsync
        - putIfAbsentAsync
        - get
        - containsKey
        - containsValue
        - remove
        - removeAsync
        - replace
        - replaceAsync
        - size
        - clear
        - clearAsync
        - query
        - stats
        deprecated: false
        secret: false
        defaultValue: put
        description: The operation to perform.
        order: 11
      configurationUri:
        kind: parameter
        group: advanced
        label: advanced
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: An implementation specific URI for the CacheManager
        order: 12
      flags:
        kind: parameter
        group: advanced
        label: advanced
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: A comma separated list of Flag to be applied by default on each cache invocation not applicable to remote caches.
        order: 13
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 14
  documentation.adoc: "[[Infinispan-InfinispanComponent]]\nInfinispan Component\n\
    ~~~~~~~~~~~~~~~~~~~~\n\n*Available as of Camel 2.13.0*\n\nThis component allows\
    \ you to interact with\nhttp://infinispan.org/[Infinispan] distributed data grid\
    \ / cache.\nInfinispan is an extremely scalable, highly available key/value data\n\
    store and data grid platform written in Java.\n\nFrom\_*Camel 2.17* onwards Infinispan\
    \ requires Java 8.\n\nMaven users will need to add the following dependency to\
    \ their `pom.xml`\nfor this component:\n\n[source,xml]\n------------------------------------------------------------\n\
    <dependency>\n    <groupId>org.apache.camel</groupId>\n    <artifactId>camel-infinispan</artifactId>\n\
    \    <version>x.x.x</version>\n    <!-- use the same version as your Camel core\
    \ version -->\n</dependency>\n------------------------------------------------------------\n\
    \n[[Infinispan-URIformat]]\nURI format\n^^^^^^^^^^\n\n[source,java]\n-------------------------------\n\
    infinispan://hostName?[options]\n-------------------------------\n\n[[Infinispan-URIOptions]]\n\
    URI Options\n^^^^^^^^^^^\n\nThe producer allows sending messages to a local infinispan\
    \ cache\nconfigured in the registry, or to a remote cache using the HotRod\nprotocol.\
    \ The consumer allows listening for events from local infinispan cache\naccessible\
    \ from the registry.\n\n\n// component options: START\nThe Infinispan component\
    \ has no options.\n// component options: END\n\n\n\n\n// endpoint options: START\n\
    The Infinispan component supports 15 endpoint options which are listed below:\n\
    \n{% raw %}\n[width=\"100%\",cols=\"2,1,1m,1m,5\",options=\"header\"]\n|=======================================================================\n\
    | Name | Group | Default | Java Type | Description\n| host | common |  | String\
    \ | *Required* Specifies the host of the cache on Infinispan instance\n| cacheContainer\
    \ | common |  | BasicCacheContainer | Specifies the cache Container to connect\n\
    | cacheName | common |  | String | Specifies the cache name\n| queryBuilder |\
    \ common |  | InfinispanQueryBuilder | Specifies the query builder.\n| bridgeErrorHandler\
    \ | consumer | false | boolean | Allows for bridging the consumer to the Camel\
    \ routing Error Handler which mean any exceptions occurred while the consumer\
    \ is trying to pickup incoming messages or the likes will now be processed as\
    \ a message and handled by the routing Error Handler. By default the consumer\
    \ will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that\
    \ will be logged at WARN/ERROR level and ignored.\n| clusteredListener | consumer\
    \ | false | boolean | If true the listener will be installed for the entire cluster\n\
    | customListener | consumer |  | InfinispanCustomListener | Returns the custom\
    \ listener in use if provided\n| eventTypes | consumer |  | String | Specifies\
    \ the set of event types to register by the consumer. Multiple event can be separated\
    \ by comma. The possible event types are: CACHE_ENTRY_ACTIVATED CACHE_ENTRY_PASSIVATED\
    \ CACHE_ENTRY_VISITED CACHE_ENTRY_LOADED CACHE_ENTRY_EVICTED CACHE_ENTRY_CREATED\
    \ CACHE_ENTRY_REMOVED CACHE_ENTRY_MODIFIED TRANSACTION_COMPLETED TRANSACTION_REGISTERED\
    \ CACHE_ENTRY_INVALIDATED DATA_REHASHED TOPOLOGY_CHANGED PARTITION_STATUS_CHANGED\n\
    | sync | consumer | true | boolean | If true the consumer will receive notifications\
    \ synchronously\n| exceptionHandler | consumer (advanced) |  | ExceptionHandler\
    \ | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler\
    \ is enabled then this options is not in use. By default the consumer will deal\
    \ with exceptions that will be logged at WARN/ERROR level and ignored.\n| exchangePattern\
    \ | consumer (advanced) |  | ExchangePattern | Sets the exchange pattern when\
    \ the consumer creates an exchange.\n| command | producer | put | String | The\
    \ operation to perform.\n| configurationUri | advanced |  | String | An implementation\
    \ specific URI for the CacheManager\n| flags | advanced |  | String | A comma\
    \ separated list of Flag to be applied by default on each cache invocation not\
    \ applicable to remote caches.\n| synchronous | advanced | false | boolean | Sets\
    \ whether synchronous processing should be strictly used or Camel is allowed to\
    \ use asynchronous processing (if supported).\n|=======================================================================\n\
    {% endraw %}\n// endpoint options: END\n\n\n\n[[Infinispan-MessageHeaders]]\n\
    Message Headers\n^^^^^^^^^^^^^^^\n\n[width=\"100%\",cols=\"10%,10%,10%,10%,60%\"\
    ,options=\"header\",]\n|=======================================================================\n\
    |Name |Default Value |Type |Context |Description\n\n|CamelInfinispanCacheName\
    \ |`null` |String |Shared |The cache participating in the operation or event.\n\
    \n|CamelInfinispanOperation |`PUT` |String |Producer |The operation to perform:\
    \ CamelInfinispanOperationPut,\nCamelInfinispanOperationGet, CamelInfinispanOperationRemove,\n\
    CamelInfinispanOperationClear. *From Camel 2.16:* CamelInfinispanOperationPutAll,\n\
    CamelInfinispanOperationPutIfAbsent, CamelInfinispanOperationReplace,\nCamelInfinispanOperationSize.\n\
    \n|CamelInfinispanMap |`null` |Map |Producer |A Map to use in case of CamelInfinispanOperationPutAll\
    \ operation\n\n|CamelInfinispanKey |`null` |Object |Shared |The key to perform\
    \ the operation to or the key generating the event.\n\n|CamelInfinispanValue |`null`\
    \ |Object |Producer |The value to use for the operation.\n\n|CamelInfinispanOperationResult\
    \ |`null` |Object |Producer |The result of the operation.\n\n|CamelInfinispanEventType\
    \ |`null` |String |Consumer |The type of the received event. Possible values defined\
    \ here\norg.infinispan.notifications.cachelistener.event.Event.Type\n\n|CamelInfinispanIsPre\
    \ |`null` |Boolean |Consumer |Infinispan fires two events for each operation:\
    \ one before and one after\nthe operation.\n\n|CamelInfinispanLifespanTime |`null`\
    \ |long |Producer |The Lifespan time of a value inside the cache. Negative values\
    \ are\ninterpreted as infinity.\n\n|CamelInfinispanTimeUnit |`null` |String |Producer\
    \ |The Time Unit of an entry Lifespan Time.\n\n|CamelInfinispanMaxIdleTime |`null`\
    \ |long |Producer |The maximum amount of time an entry is allowed to be idle for\
    \ before it\nis considered as expired.\n\n|CamelInfinispanMaxIdleTimeUnit |`null`\
    \ |String |Producer |The Time Unit of an entry Max Idle Time.\n\n|CamelInfinispanQueryBuilder\
    \ |null |InfinispanQueryBuilder |Producer | *From Camel 2.17:* The QueryBuilde\
    \ to use for QUERY command, if not\npresent the command defaults to InifinispanConfiguration's\
    \ one\n\n|CamelInfinispanIgnoreReturnValues |null |Boolean |Producer |*From Camel\
    \ 2.17:* If this header is set, the return value for cache\noperation returning\
    \ something is ignored by the client application\n|=======================================================================\n\
    \n[[Infinispan-Example]]\nExample\n^^^^^^^\n\nBelow is an example route that retrieves\
    \ a value from the cache for a\nspecific key:\n\n[source,java]\n------------------------------------------------------------------------------------\n\
    from(\"direct:start\")\n        .setHeader(InfinispanConstants.OPERATION, constant(InfinispanConstants.GET))\n\
    \        .setHeader(InfinispanConstants.KEY, constant(\"123\"))\n        .to(\"\
    infinispan://localhost?cacheContainer=#cacheContainer\");\n------------------------------------------------------------------------------------\n\
    \n[[Infinispan-UsingtheInfinispanbasedidempotentrepository]]\nUsing the Infinispan\
    \ based idempotent repository\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nIn this section we will use the Infinispan based idempotent repository.\n\n\
    First, we need to create a cacheManager and then configure our\n\n------------------------------------------------------------------------------------------\n\
    org.apache.camel.component.infinispan.processor.idempotent.InfinispanIdempotentRepository:\n\
    ------------------------------------------------------------------------------------------\n\
    \n[source,xml]\n---------------------------------------------------------------------------------------------------------------------------\n\
    <bean id=\"cacheManager\" class=\"org.infinispan.manager.DefaultCacheManager\"\
    \ init-method=\"start\" destroy-method=\"stop\"/>\n<bean id=\"infinispanRepo\"\
    \ class=\"org.apache.camel.component.infinispan.processor.idempotent.InfinispanIdempotentRepository\"\
    \n      factory-method=\"infinispanIdempotentRepository\">\n    <argument ref=\"\
    cacheManager\"/>\n    <argument value=\"idempotent\"/>\n</bean>\n---------------------------------------------------------------------------------------------------------------------------\n\
    \nThen we can create our Infinispan idempotent repository in the spring\nXML file\
    \ as well:\n\n[source,xml]\n---------------------------------------------------------------------\n\
    <camelContext xmlns=\"http://camel.apache.org/schema/spring\">   \n    <route\
    \ id=\"JpaMessageIdRepositoryTest\">\n        <from uri=\"direct:start\" />\n\
    \        <idempotentConsumer messageIdRepositoryRef=\"infinispanStore\">\n   \
    \         <header>messageId</header>\n            <to uri=\"mock:result\" />\n\
    \        </idempotentConsumer>\n    </route>\n</camelContext>\n---------------------------------------------------------------------\n\
    \nFor more information, see these resources...\n\n[[Infinispan-SeeAlso]]\nSee\
    \ Also\n^^^^^^^^\n\n* link:configuring-camel.html[Configuring Camel]\n* link:component.html[Component]\n\
    * link:endpoint.html[Endpoint]\n* link:getting-started.html[Getting Started]\n\
    \n"
