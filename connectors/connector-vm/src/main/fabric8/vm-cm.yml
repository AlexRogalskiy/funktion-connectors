---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: vm
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: vm
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: vm
        spec:
          containers:
          - image: funktion/connector-vm:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: vm
      syntax: vm:name
      title: VM
      description: The vm component provides asynchronous call to another endpoint from the same CamelContext.
      label: core,endpoint
      deprecated: false
      async: true
      javaType: org.apache.camel.component.vm.VmComponent
      groupId: org.apache.camel
      artifactId: camel-core
      version: 2.18.3
    componentProperties:
      queueSize:
        kind: property
        type: integer
        javaType: int
        deprecated: false
        secret: false
        description: Sets the default maximum capacity of the SEDA queue (i.e. the number of messages it can hold).
        order: 0
      concurrentConsumers:
        kind: property
        required: false
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "1"
        description: Sets the default number of concurrent threads processing exchanges.
        order: 1
      defaultQueueFactory:
        kind: property
        type: object
        javaType: org.apache.camel.component.seda.BlockingQueueFactory<org.apache.camel.Exchange>
        deprecated: false
        secret: false
        description: Sets the default queue factory.
        order: 2
    properties:
      name:
        kind: path
        group: common
        required: true
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Name of queue
        order: 0
      size:
        kind: parameter
        group: common
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "2147483647"
        description: The maximum capacity of the SEDA queue (i.e. the number of messages it can hold).
        order: 1
      bridgeErrorHandler:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 2
      concurrentConsumers:
        kind: parameter
        group: consumer
        label: consumer
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "1"
        description: Number of concurrent threads processing exchanges.
        order: 3
      exceptionHandler:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.ExceptionHandler
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 4
      exchangePattern:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.ExchangePattern
        enum:
        - InOnly
        - RobustInOnly
        - InOut
        - InOptionalOut
        - OutOnly
        - RobustOutOnly
        - OutIn
        - OutOptionalIn
        deprecated: false
        secret: false
        description: Sets the default exchange pattern when creating an exchange.
        order: 5
      limitConcurrentConsumers:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether to limit the number of concurrentConsumers to the maximum of 500. By default an exception will be thrown if an endpoint is configured with a greater number. You can disable that check by turning this option off.
        order: 6
      multipleConsumers:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Specifies whether multiple consumers are allowed. If enabled you can use SEDA for Publish-Subscribe messaging. That is you can send a message to the SEDA queue and have each consumer receive a copy of the message. When enabled this option should be specified on every consumer endpoint.
        order: 7
      pollTimeout:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "1000"
        description: The timeout used when polling. When a timeout occurs the consumer can check whether it is allowed to continue running. Setting a lower value allows the consumer to react more quickly upon shutdown.
        order: 8
      purgeWhenStopping:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Whether to purge the task queue when stopping the consumer/route. This allows to stop faster as any pending messages on the queue is discarded.
        order: 9
      blockWhenFull:
        kind: parameter
        group: producer
        label: producer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Whether a thread that sends messages to a full SEDA queue will block until the queue's capacity is no longer exhausted. By default an exception will be thrown stating that the queue is full. By enabling this option the calling thread will instead block and wait until the message can be accepted.
        order: 10
      discardIfNoConsumers:
        kind: parameter
        group: producer
        label: producer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Whether the producer should discard the message (do not add the message to the queue) when sending to a queue with no active consumers. Only one of the options discardIfNoConsumers and failIfNoConsumers can be enabled at the same time.
        order: 11
      failIfNoConsumers:
        kind: parameter
        group: producer
        label: producer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Whether the producer should fail by throwing an exception when sending to a queue with no active consumers. Only one of the options discardIfNoConsumers and failIfNoConsumers can be enabled at the same time.
        order: 12
      timeout:
        kind: parameter
        group: producer
        label: producer
        type: integer
        javaType: long
        deprecated: false
        secret: false
        defaultValue: "30000"
        description: Timeout (in milliseconds) before a SEDA producer will stop waiting for an asynchronous task to complete. You can disable timeout by using 0 or a negative value.
        order: 13
      waitForTaskToComplete:
        kind: parameter
        group: producer
        label: producer
        type: string
        javaType: org.apache.camel.WaitForTaskToComplete
        enum:
        - Never
        - IfReplyExpected
        - Always
        deprecated: false
        secret: false
        defaultValue: IfReplyExpected
        description: 'Option to specify whether the caller should wait for the async task
          to complete or not before continuing. The following three options are supported:
          Always Never or IfReplyExpected. The first two values are self-explanatory.
          The last value IfReplyExpected will only wait if the message is Request Reply
          based. The default option is IfReplyExpected.'
        order: 14
      queue:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: java.util.concurrent.BlockingQueue
        deprecated: false
        secret: false
        description: Define the queue instance which will be used by the endpoint. This option is only for rare use-cases where you want to use a custom queue instance.
        order: 15
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 16
  documentation.adoc: |+
    [[VM-VMComponent]]
    VM Component
    ~~~~~~~~~~~~

    The *vm:* component provides asynchronous
    http://www.eecs.harvard.edu/~mdw/proj/seda/[SEDA] behavior, exchanging
    messages on a
    http://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/BlockingQueue.html[BlockingQueue]
    and invoking consumers in a separate thread pool.

    This component differs from the link:seda.html[Seda] component in that
    VM supports communication across CamelContext instances - so you can use
    this mechanism to communicate across web applications (provided that
    `camel-core.jar` is on the `system/boot` classpath).

    VM is an extension to the link:seda.html[Seda] component.

    [[VM-URIformat]]
    URI format
    ^^^^^^^^^^

    [source,java]
    ----------------------
    vm:queueName[?options]
    ----------------------

    Where *`queueName`* can be any string to uniquely identify the endpoint
    within the JVM (or at least within the classloader that loaded
    camel-core.jar)

    You can append query options to the URI in the following format:
    `?option=value&option=value&...`

    *Before Camel 2.3 - Same URI must be used for both producer and
    consumer*

    An exactly identical link:vm.html[VM] endpoint URI *must* be used for
    both the producer and the consumer endpoint. Otherwise, Camel will
    create a second link:vm.html[VM] endpoint despite that the `queueName`
    portion of the URI is identical. For example:

    [source,java]
    ---------------------------------------------------------
    from("direct:foo").to("vm:bar?concurrentConsumers=5");

    from("vm:bar?concurrentConsumers=5").to("file://output");
    ---------------------------------------------------------

    Notice that we have to use the full URI, including options in both the
    producer and consumer.

    In Camel 2.4 this has been fixed so that only the queue name must match.
    Using the queue name `bar`, we could rewrite the previous exmple as
    follows:

    [source,java]
    ---------------------------------------------------------
    from("direct:foo").to("vm:bar");

    from("vm:bar?concurrentConsumers=5").to("file://output");
    ---------------------------------------------------------

    [[VM-Options]]
    Options
    ^^^^^^^

    // component options: START
    The VM component supports 3 options which are listed below.



    {% raw %}
    [width="100%",cols="2,1m,7",options="header"]
    |=======================================================================
    | Name | Java Type | Description
    | queueSize | int | Sets the default maximum capacity of the SEDA queue (i.e. the number of messages it can hold).
    | concurrentConsumers | int | Sets the default number of concurrent threads processing exchanges.
    | defaultQueueFactory | Exchange> | Sets the default queue factory.
    |=======================================================================
    {% endraw %}
    // component options: END


    // endpoint options: START
    The VM component supports 17 endpoint options which are listed below:

    {% raw %}
    [width="100%",cols="2,1,1m,1m,5",options="header"]
    |=======================================================================
    | Name | Group | Default | Java Type | Description
    | name | common |  | String | *Required* Name of queue
    | size | common | 2147483647 | int | The maximum capacity of the SEDA queue (i.e. the number of messages it can hold).
    | bridgeErrorHandler | consumer | false | boolean | Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
    | concurrentConsumers | consumer | 1 | int | Number of concurrent threads processing exchanges.
    | exceptionHandler | consumer (advanced) |  | ExceptionHandler | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
    | exchangePattern | consumer (advanced) |  | ExchangePattern | Sets the default exchange pattern when creating an exchange.
    | limitConcurrentConsumers | consumer (advanced) | true | boolean | Whether to limit the number of concurrentConsumers to the maximum of 500. By default an exception will be thrown if an endpoint is configured with a greater number. You can disable that check by turning this option off.
    | multipleConsumers | consumer (advanced) | false | boolean | Specifies whether multiple consumers are allowed. If enabled you can use SEDA for Publish-Subscribe messaging. That is you can send a message to the SEDA queue and have each consumer receive a copy of the message. When enabled this option should be specified on every consumer endpoint.
    | pollTimeout | consumer (advanced) | 1000 | int | The timeout used when polling. When a timeout occurs the consumer can check whether it is allowed to continue running. Setting a lower value allows the consumer to react more quickly upon shutdown.
    | purgeWhenStopping | consumer (advanced) | false | boolean | Whether to purge the task queue when stopping the consumer/route. This allows to stop faster as any pending messages on the queue is discarded.
    | blockWhenFull | producer | false | boolean | Whether a thread that sends messages to a full SEDA queue will block until the queue's capacity is no longer exhausted. By default an exception will be thrown stating that the queue is full. By enabling this option the calling thread will instead block and wait until the message can be accepted.
    | discardIfNoConsumers | producer | false | boolean | Whether the producer should discard the message (do not add the message to the queue) when sending to a queue with no active consumers. Only one of the options discardIfNoConsumers and failIfNoConsumers can be enabled at the same time.
    | failIfNoConsumers | producer | false | boolean | Whether the producer should fail by throwing an exception when sending to a queue with no active consumers. Only one of the options discardIfNoConsumers and failIfNoConsumers can be enabled at the same time.
    | timeout | producer | 30000 | long | Timeout (in milliseconds) before a SEDA producer will stop waiting for an asynchronous task to complete. You can disable timeout by using 0 or a negative value.
    | waitForTaskToComplete | producer | IfReplyExpected | WaitForTaskToComplete | Option to specify whether the caller should wait for the async task to complete or not before continuing. The following three options are supported: Always Never or IfReplyExpected. The first two values are self-explanatory. The last value IfReplyExpected will only wait if the message is Request Reply based. The default option is IfReplyExpected.
    | queue | advanced |  | BlockingQueue | Define the queue instance which will be used by the endpoint. This option is only for rare use-cases where you want to use a custom queue instance.
    | synchronous | advanced | false | boolean | Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
    |=======================================================================
    {% endraw %}
    // endpoint options: END


    See the link:seda.html[Seda] component for options and other important
    usage details as the same rules apply to the link:vm.html[Vm] component.

    [[VM-Samples]]
    Samples
    ^^^^^^^

    In the route below we send exchanges across CamelContext instances to a
    VM queue named `order.email`:

    [source,java]
    ---------------------------------------------------------------
    from("direct:in").bean(MyOrderBean.class).to("vm:order.email");
    ---------------------------------------------------------------

    And then we receive exchanges in some other Camel context (such as
    deployed in another `.war` application):

    [source,java]
    ------------------------------------------------------
    from("vm:order.email").bean(MyOrderEmailSender.class);
    ------------------------------------------------------

    [[VM-SeeAlso]]
    See Also
    ^^^^^^^^

    * link:configuring-camel.html[Configuring Camel]
    * link:component.html[Component]
    * link:endpoint.html[Endpoint]
    * link:getting-started.html[Getting Started]
    * link:seda.html[Seda]

