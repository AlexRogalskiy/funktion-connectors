---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: xslt
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: xslt
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: xslt
        spec:
          containers:
          - image: funktion/connector-xslt:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: xslt
      syntax: xslt:resourceUri
      title: XSLT
      description: Transforms the message using a XSLT template.
      label: core,transformation
      deprecated: false
      async: false
      producerOnly: true
      javaType: org.apache.camel.component.xslt.XsltComponent
      groupId: org.apache.camel
      artifactId: camel-core
      version: 2.18.3
    componentProperties:
      xmlConverter:
        kind: property
        label: advanced
        required: false
        type: object
        javaType: org.apache.camel.converter.jaxp.XmlConverter
        deprecated: false
        secret: false
        description: To use a custom implementation of org.apache.camel.converter.jaxp.XmlConverter
        order: 0
      uriResolverFactory:
        kind: property
        label: advanced
        required: false
        type: object
        javaType: org.apache.camel.component.xslt.XsltUriResolverFactory
        deprecated: false
        secret: false
        description: To use a custom javax.xml.transform.URIResolver which depends on a dynamic endpoint resource URI or which is a subclass of XsltUriResolver. Do not use in combination with uriResolver. See also link setUriResolver(URIResolver).
        order: 1
      uriResolver:
        kind: property
        label: advanced
        required: false
        type: object
        javaType: javax.xml.transform.URIResolver
        deprecated: false
        secret: false
        description: To use a custom javax.xml.transform.URIResolver. Do not use in combination with uriResolverFactory. See also link setUriResolverFactory(XsltUriResolverFactory).
        order: 2
      contentCache:
        kind: property
        required: false
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Cache for the resource content (the stylesheet file) when it is loaded. If set to false Camel will reload the stylesheet file on each message processing. This is good for development. A cached stylesheet can be forced to reload at runtime via JMX using the clearCachedStylesheet operation.
        order: 3
      saxon:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        description: Whether to use Saxon as the transformerFactoryClass. If enabled then the class net.sf.saxon.TransformerFactoryImpl. You would need to add Saxon to the classpath.
        order: 4
    properties:
      resourceUri:
        kind: path
        group: producer
        required: true
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: The name of the template to load from classpath or file system
        order: 0
      allowStAX:
        kind: parameter
        group: producer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether to allow using StAX as the javax.xml.transform.Source.
        order: 1
      contentCache:
        kind: parameter
        group: producer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Cache for the resource content (the stylesheet file) when it is loaded. If set to false Camel will reload the stylesheet file on each message processing. This is good for development. A cached stylesheet can be forced to reload at runtime via JMX using the clearCachedStylesheet operation.
        order: 2
      deleteOutputFile:
        kind: parameter
        group: producer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: If you have output=file then this option dictates whether or not the output file should be deleted when the Exchange is done processing. For example suppose the output file is a temporary file then it can be a good idea to delete it after use.
        order: 3
      failOnNullBody:
        kind: parameter
        group: producer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether or not to throw an exception if the input body is null.
        order: 4
      output:
        kind: parameter
        group: producer
        type: string
        javaType: org.apache.camel.component.xslt.XsltOutput
        enum:
        - string
        - bytes
        - DOM
        - file
        deprecated: false
        secret: false
        defaultValue: string
        description: 'Option to specify which output type to use. Possible values are:
          string bytes DOM file. The first three options are all in memory based where
          as file is streamed directly to a java.io.File. For file you must specify the
          filename in the IN header with the key Exchange.XSLT_FILE_NAME which is also
          CamelXsltFileName. Also any paths leading to the filename must be created beforehand
          otherwise an exception is thrown at runtime.'
        order: 5
      saxon:
        kind: parameter
        group: producer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Whether to use Saxon as the transformerFactoryClass. If enabled then the class net.sf.saxon.TransformerFactoryImpl. You would need to add Saxon to the classpath.
        order: 6
      transformerCacheSize:
        kind: parameter
        group: producer
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "0"
        description: The number of javax.xml.transform.Transformer object that are cached for reuse to avoid calls to Template.newTransformer().
        order: 7
      converter:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: org.apache.camel.converter.jaxp.XmlConverter
        deprecated: false
        secret: false
        description: To use a custom implementation of org.apache.camel.converter.jaxp.XmlConverter
        order: 8
      entityResolver:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: org.xml.sax.EntityResolver
        deprecated: false
        secret: false
        description: To use a custom org.xml.sax.EntityResolver with javax.xml.transform.sax.SAXSource.
        order: 9
      errorListener:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: javax.xml.transform.ErrorListener
        deprecated: false
        secret: false
        description: Allows to configure to use a custom javax.xml.transform.ErrorListener. Beware when doing this then the default error listener which captures any errors or fatal errors and store information on the Exchange as properties is not in use. So only use this option for special use-cases.
        order: 10
      resultHandlerFactory:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: org.apache.camel.builder.xml.ResultHandlerFactory
        deprecated: false
        secret: false
        description: Allows you to use a custom org.apache.camel.builder.xml.ResultHandlerFactory which is capable of using custom org.apache.camel.builder.xml.ResultHandler types.
        order: 11
      saxonExtensionFunctions:
        kind: parameter
        group: advanced
        label: advanced
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Allows you to use a custom net.sf.saxon.lib.ExtensionFunctionDefinition. You would need to add camel-saxon to the classpath. The function is looked up in the registry where you can comma to separate multiple values to lookup.
        order: 12
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 13
      transformerFactory:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: javax.xml.transform.TransformerFactory
        deprecated: false
        secret: false
        description: To use a custom XSLT transformer factory
        order: 14
      transformerFactoryClass:
        kind: parameter
        group: advanced
        label: advanced
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: To use a custom XSLT transformer factory specified as a FQN class name
        order: 15
      uriResolver:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: javax.xml.transform.URIResolver
        deprecated: false
        secret: false
        description: To use a custom javax.xml.transform.URIResolver
        order: 16
  documentation.adoc: "[[XSLT-XSLT]]\nXSLT\n~~~~\n\nThe *xslt:* component allows you\
    \ to process a message using an\nhttp://www.w3.org/TR/xslt[XSLT] template. This\
    \ can be ideal when using\nlink:templating.html[Templating] to generate respopnses\
    \ for requests.\n\n[[XSLT-URIformat]]\nURI format\n^^^^^^^^^^\n\n[source,java]\n\
    ---------------------------\nxslt:templateName[?options]\n---------------------------\n\
    \nWhere *templateName* is the classpath-local URI of the template to\ninvoke;\
    \ or the complete URL of the remote template. Refer to the\nhttp://static.springframework.org/spring/docs/2.5.x/api/org/springframework/core/io/DefaultResourceLoader.html[Spring\n\
    Documentation for more detail of the URI syntax]\n\nYou can append query options\
    \ to the URI in the following format,\n`?option=value&option=value&...`\n\nHere\
    \ are some example URIs\n\nURI\n\nDescription\n\n[source,java]\n-----------------------------\n\
    xslt:com/acme/mytransform.xsl\n-----------------------------\n\nrefers to the\
    \ file com/acme/mytransform.xsl on the classpath\n\n[source,java]\n------------------------\n\
    xslt:file:///foo/bar.xsl\n------------------------\n\nrefers to the file /foo/bar.xsl\n\
    \n[source,java]\n-----------------------------------\nxslt:http://acme.com/cheese/foo.xsl\n\
    -----------------------------------\n\nrefers to the remote http resource\n\n\
    Maven users will need to add the following dependency to their `pom.xml`\nfor\
    \ this component when using *Camel 2.8* or older:\n\n[source,xml]\n------------------------------------------------------------\n\
    <dependency>\n    <groupId>org.apache.camel</groupId>\n    <artifactId>camel-spring</artifactId>\n\
    \    <version>x.x.x</version>\n    <!-- use the same version as your Camel core\
    \ version -->\n</dependency>\n------------------------------------------------------------\n\
    \nFrom Camel 2.9 onwards the link:xslt.html[XSLT] component is provided\ndirectly\
    \ in the camel-core.\n\n[[XSLT-Options]]\nOptions\n^^^^^^^\n\n// component options:\
    \ START\nThe XSLT component supports 5 options which are listed below.\n\n\n\n\
    {% raw %}\n[width=\"100%\",cols=\"2,1m,7\",options=\"header\"]\n|=======================================================================\n\
    | Name | Java Type | Description\n| xmlConverter | XmlConverter | To use a custom\
    \ implementation of org.apache.camel.converter.jaxp.XmlConverter\n| uriResolverFactory\
    \ | XsltUriResolverFactory | To use a custom javax.xml.transform.URIResolver which\
    \ depends on a dynamic endpoint resource URI or which is a subclass of XsltUriResolver.\
    \ Do not use in combination with uriResolver. See also link setUriResolver(URIResolver).\n\
    | uriResolver | URIResolver | To use a custom javax.xml.transform.URIResolver.\
    \ Do not use in combination with uriResolverFactory. See also link setUriResolverFactory(XsltUriResolverFactory).\n\
    | contentCache | boolean | Cache for the resource content (the stylesheet file)\
    \ when it is loaded. If set to false Camel will reload the stylesheet file on\
    \ each message processing. This is good for development. A cached stylesheet can\
    \ be forced to reload at runtime via JMX using the clearCachedStylesheet operation.\n\
    | saxon | boolean | Whether to use Saxon as the transformerFactoryClass. If enabled\
    \ then the class net.sf.saxon.TransformerFactoryImpl. You would need to add Saxon\
    \ to the classpath.\n|=======================================================================\n\
    {% endraw %}\n// component options: END\n\n\n// endpoint options: START\nThe XSLT\
    \ component supports 17 endpoint options which are listed below:\n\n{% raw %}\n\
    [width=\"100%\",cols=\"2,1,1m,1m,5\",options=\"header\"]\n|=======================================================================\n\
    | Name | Group | Default | Java Type | Description\n| resourceUri | producer |\
    \  | String | *Required* The name of the template to load from classpath or file\
    \ system\n| allowStAX | producer | true | boolean | Whether to allow using StAX\
    \ as the javax.xml.transform.Source.\n| contentCache | producer | true | boolean\
    \ | Cache for the resource content (the stylesheet file) when it is loaded. If\
    \ set to false Camel will reload the stylesheet file on each message processing.\
    \ This is good for development. A cached stylesheet can be forced to reload at\
    \ runtime via JMX using the clearCachedStylesheet operation.\n| deleteOutputFile\
    \ | producer | false | boolean | If you have output=file then this option dictates\
    \ whether or not the output file should be deleted when the Exchange is done processing.\
    \ For example suppose the output file is a temporary file then it can be a good\
    \ idea to delete it after use.\n| failOnNullBody | producer | true | boolean |\
    \ Whether or not to throw an exception if the input body is null.\n| output |\
    \ producer | string | XsltOutput | Option to specify which output type to use.\
    \ Possible values are: string bytes DOM file. The first three options are all\
    \ in memory based where as file is streamed directly to a java.io.File. For file\
    \ you must specify the filename in the IN header with the key Exchange.XSLT_FILE_NAME\
    \ which is also CamelXsltFileName. Also any paths leading to the filename must\
    \ be created beforehand otherwise an exception is thrown at runtime.\n| saxon\
    \ | producer | false | boolean | Whether to use Saxon as the transformerFactoryClass.\
    \ If enabled then the class net.sf.saxon.TransformerFactoryImpl. You would need\
    \ to add Saxon to the classpath.\n| transformerCacheSize | producer | 0 | int\
    \ | The number of javax.xml.transform.Transformer object that are cached for reuse\
    \ to avoid calls to Template.newTransformer().\n| converter | advanced |  | XmlConverter\
    \ | To use a custom implementation of org.apache.camel.converter.jaxp.XmlConverter\n\
    | entityResolver | advanced |  | EntityResolver | To use a custom org.xml.sax.EntityResolver\
    \ with javax.xml.transform.sax.SAXSource.\n| errorListener | advanced |  | ErrorListener\
    \ | Allows to configure to use a custom javax.xml.transform.ErrorListener. Beware\
    \ when doing this then the default error listener which captures any errors or\
    \ fatal errors and store information on the Exchange as properties is not in use.\
    \ So only use this option for special use-cases.\n| resultHandlerFactory | advanced\
    \ |  | ResultHandlerFactory | Allows you to use a custom org.apache.camel.builder.xml.ResultHandlerFactory\
    \ which is capable of using custom org.apache.camel.builder.xml.ResultHandler\
    \ types.\n| saxonExtensionFunctions | advanced |  | String | Allows you to use\
    \ a custom net.sf.saxon.lib.ExtensionFunctionDefinition. You would need to add\
    \ camel-saxon to the classpath. The function is looked up in the registry where\
    \ you can comma to separate multiple values to lookup.\n| synchronous | advanced\
    \ | false | boolean | Sets whether synchronous processing should be strictly used\
    \ or Camel is allowed to use asynchronous processing (if supported).\n| transformerFactory\
    \ | advanced |  | TransformerFactory | To use a custom XSLT transformer factory\n\
    | transformerFactoryClass | advanced |  | String | To use a custom XSLT transformer\
    \ factory specified as a FQN class name\n| uriResolver | advanced |  | URIResolver\
    \ | To use a custom javax.xml.transform.URIResolver\n|=======================================================================\n\
    {% endraw %}\n// endpoint options: END\n\n\n[[XSLT-UsingXSLTendpoints]]\nUsing\
    \ XSLT endpoints\n^^^^^^^^^^^^^^^^^^^^\n\nFor example you could use something\
    \ like\n\n[source,java]\n--------------------------------------\nfrom(\"activemq:My.Queue\"\
    ).\n  to(\"xslt:com/acme/mytransform.xsl\");\n--------------------------------------\n\
    \nTo use an XSLT template to formulate a response for a message for InOut\nmessage\
    \ exchanges (where there is a `JMSReplyTo` header).\n\nIf you want to use InOnly\
    \ and consume the message and send it to another\ndestination you could use the\
    \ following route:\n\n[source,java]\n--------------------------------------\n\
    from(\"activemq:My.Queue\").\n  to(\"xslt:com/acme/mytransform.xsl\").\n  to(\"\
    activemq:Another.Queue\");\n--------------------------------------\n\n[[XSLT-GettingParametersintotheXSLTtoworkwith]]\n\
    Getting Parameters into the XSLT to work with\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nBy default, all headers are added as parameters which are available in\nthe\
    \ XSLT. +\n To do this you will need to declare the parameter so it is then\n\
    _useable_.\n\n[source,xml]\n-------------------------------------------------------------------\n\
    <setHeader headerName=\"myParam\"><constant>42</constant></setHeader>\n<to uri=\"\
    xslt:MyTransform.xsl\"/>\n-------------------------------------------------------------------\n\
    \nAnd the XSLT just needs to declare it at the top level for it to be\navailable:\n\
    \n[source,xml]\n------------------------------\n<xsl: ...... >\n\n   <xsl:param\
    \ name=\"myParam\"/>\n  \n    <xsl:template ...>\n------------------------------\n\
    \n[[XSLT-SpringXMLversions]]\nSpring XML versions\n^^^^^^^^^^^^^^^^^^^\n\nTo use\
    \ the above examples in Spring XML you would use something like\n\n[source,xml]\n\
    -----------------------------------------------------------------------\n  <camelContext\
    \ xmlns=\"http://activemq.apache.org/camel/schema/spring\">\n    <route>\n   \
    \   <from uri=\"activemq:My.Queue\"/>\n      <to uri=\"xslt:org/apache/camel/spring/processor/example.xsl\"\
    />\n      <to uri=\"activemq:Another.Queue\"/>\n    </route>\n  </camelContext>\n\
    -----------------------------------------------------------------------\n\nThere\
    \ is a\nhttp://svn.apache.org/repos/asf/camel/trunk/components/camel-spring/src/test/java/org/apache/camel/spring/processor/XsltTest.java[test\n\
    case] along with\nhttp://svn.apache.org/repos/asf/camel/trunk/components/camel-spring/src/test/resources/org/apache/camel/spring/processor/XsltTest-context.xml[its\n\
    Spring XML] if you want a concrete example.\n\n[[XSLT-Usingxsl:include]]\nUsing\
    \ xsl:include\n^^^^^^^^^^^^^^^^^\n\n*Camel 2.2 or older* +\n If you use xsl:include\
    \ in your XSL files then in Camel 2.2 or older it\nuses the default `javax.xml.transform.URIResolver`\
    \ which means it can\nonly lookup files from file system, and its does that relative\
    \ from the\nJVM starting folder.\n\nFor example this include:\n\n[source,xml]\n\
    ----------------------------------------\n<xsl:include href=\"staff_template.xsl\"\
    />\n----------------------------------------\n\nWill lookup the `staff_tempkalte.xsl`\
    \ file from the starting folder\nwhere the application was started.\n\n*Camel\
    \ 2.3 or newer*  +\n Now Camel provides its own implementation of `URIResolver`\
    \ which allows\nCamel to load included files from the classpath and more intelligent\n\
    than before.\n\nFor example this include:\n\n[source,xml]\n----------------------------------------\n\
    <xsl:include href=\"staff_template.xsl\"/>\n----------------------------------------\n\
    \nWill now be located relative from the starting endpoint, which for\nexample\
    \ could be:\n\n[source,java]\n----------------------------------------------------------------------\n\
    .to(\"xslt:org/apache/camel/component/xslt/staff_include_relative.xsl\")\n----------------------------------------------------------------------\n\
    \nWhich means Camel will locate the file in the *classpath* as\n`org/apache/camel/component/xslt/staff_template.xsl`.\
    \ +\n This allows you to use xsl include and have xsl files located in the\nsame\
    \ folder such as we do in the example\n`org/apache/camel/component/xslt`.\n\n\
    You can use the following two prefixes `classpath:` or `file:` to\ninstruct Camel\
    \ to look either in classpath or file system. If you omit\nthe prefix then Camel\
    \ uses the prefix from the endpoint configuration.\nIf that neither has one, then\
    \ classpath is assumed.\n\nYou can also refer back in the paths such as\n\n[source,java]\n\
    -----------------------------------------------------\n    <xsl:include href=\"\
    ../staff_other_template.xsl\"/>\n-----------------------------------------------------\n\
    \nWhich then will resolve the xsl file under `org/apache/camel/component`.\n\n\
    [[XSLT-Usingxsl:includeanddefaultprefix]]\nUsing xsl:include and default prefix\n\
    ++++++++++++++++++++++++++++++++++++\n\nWhen using xsl:include such as:\n\n[source,xml]\n\
    ----------------------------------------\n<xsl:include href=\"staff_template.xsl\"\
    />\n----------------------------------------\n\nThen in Camel 2.10.3 and older,\
    \ then Camel will use \"classpath:\" as the\ndefault prefix, and load the resource\
    \ from the classpath. This works for\nmost cases, but if you configure the starting\
    \ resource to load from\nfile,\n\n[source,java]\n----------------------------------------------------\n\
    .to(\"xslt:file:etc/xslt/staff_include_relative.xsl\")\n----------------------------------------------------\n\
    \n.. then you would have to prefix all your includes with \"file:\" as well.\n\
    \n[source,xml]\n---------------------------------------------\n<xsl:include href=\"\
    file:staff_template.xsl\"/>\n---------------------------------------------\n\n\
    From Camel 2.10.4 onwards we have made this easier as Camel will use the\nprefix\
    \ from the endpoint configuration as the default prefix. So from\nCamel 2.10.4\
    \ onwards you can do:\n\n[source,xml]\n----------------------------------------\n\
    <xsl:include href=\"staff_template.xsl\"/>\n----------------------------------------\n\
    \nWhich will load the staff_template.xsl resource from the file system, as\nthe\
    \ endpoint was configured with \"file:\" as prefix. +\n You can still though explicit\
    \ configure a prefix, and then mix and\nmatch. And have both file and classpath\
    \ loading. But that would be\nunusual, as most people either use file or classpath\
    \ based resources.\n\n[[XSLT-UsingSaxonextensionfunctions]]\nUsing Saxon extension\
    \ functions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSince Saxon 9.2, writing extension\
    \ functions has been supplemented by a\nnew mechanism, referred to\nas\_http://www.saxonica.com/html/documentation/extensibility/integratedfunctions[integrated\n\
    extension functions]\_you can now easily use camel:\n\n\_\n\n-\_Java example:\n\
    \n[source,java]\n---------------------------------------------------------------------------------------------------------------------------------\n\
    SimpleRegistry registry = new SimpleRegistry();\nregistry.put(\"function1\", new\
    \ MyExtensionFunction1());\nregistry.put(\"function2\", new MyExtensionFunction2());\n\
    \nCamelContext context = new DefaultCamelContext(registry);\ncontext.addRoutes(new\
    \ RouteBuilder() {\n    @Override\n    public void configure() throws Exception\
    \ {\n        from(\"direct:start\")\n            .to(\"xslt:org/apache/camel/component/xslt/extensions/extensions.xslt?saxonExtensionFunctions=#function1,#function2\"\
    );\n    }\n});\n---------------------------------------------------------------------------------------------------------------------------------\n\
    \n\_\n\nSpring example:\n\n[source,xml]\n-----------------------------------------------------------------------------------------------------------------------------\n\
    <camelContext xmlns=\"http://camel.apache.org/schema/spring\">\n  <route>\n  \
    \  <from uri=\"direct:extensions\"/>\n    <to uri=\"xslt:org/apache/camel/component/xslt/extensions/extensions.xslt?saxonExtensionFunctions=#function1,#function2\"\
    />\n  </route>\n</camelContext>\n\n\n<bean id=\"function1\" class=\"org.apache.camel.component.xslt.extensions.MyExtensionFunction1\"\
    />\n<bean id=\"function2\" class=\"org.apache.camel.component.xslt.extensions.MyExtensionFunction2\"\
    />\n-----------------------------------------------------------------------------------------------------------------------------\n\
    \n\_\n\n\_\n\n[[XSLT-Dynamicstylesheets]]\nDynamic stylesheets\n^^^^^^^^^^^^^^^^^^^\n\
    \nTo provide a dynamic stylesheet at runtime you can define a dynamic URI.\nSee\_\
    link:how-to-use-a-dynamic-uri-in-to.html[How to use a dynamic URI in\nto()] for\
    \ more information.\n\n*Available as of Camel 2.9 (removed in 2.11.4, 2.12.3 and\
    \ 2.13.0)* +\n Camel provides the `CamelXsltResourceUri` header which you can\
    \ use to\ndefine a stylesheet to use instead of what is configured on the endpoint\n\
    URI. This allows you to provide a dynamic stylesheet at runtime.\n\n[[XSLT-Accessingwarnings,errorsandfatalErrorsfromXSLTErrorListener]]\n\
    Accessing warnings, errors and fatalErrors from XSLT ErrorListener\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \n*Available as of Camel 2.14*\n\nFrom Camel 2.14 onwards, any warning/error or\
    \ fatalError is stored on\nthe current Exchange as a property with the\nkeys\_\
    `Exchange.XSLT_ERROR`,\_`Exchange.XSLT_FATAL_ERROR`,\nor\_`Exchange.XSLT_WARNING`\
    \ which allows end users to get hold of any\nerrors happening during transformation.\n\
    \nFor example in the stylesheet below, we want to terminate if a staff has\nan\
    \ empty dob field. And to include a custom error message using\nxsl:message.\n\
    \n[source,java]\n---------------------------------------------------------------------------------------\n\
    \  <xsl:template match=\"/\">\n    <html>\n      <body>\n        <xsl:for-each\
    \ select=\"staff/programmer\">\n          <p>Name: <xsl:value-of select=\"name\"\
    /><br />\n            <xsl:if test=\"dob=''\">\n              <xsl:message terminate=\"\
    yes\">Error: DOB is an empty string!</xsl:message>\n            </xsl:if>\n  \
    \        </p>\n        </xsl:for-each>\n      </body>\n    </html>\n  </xsl:template>\n\
    ---------------------------------------------------------------------------------------\n\
    \nThis information is not available on the Exchange stored as an Exception\nthat\
    \ contains the message in the `getMessage()` method on the exception.\nThe exception\
    \ is stored on the Exchange as a warning with the\nkey\_`Exchange.XSLT_WARNING.`\n\
    \n[[XSLT-NotesonusingXSLTandJavaVersions]]\nNotes on using XSLT and Java Versions\n\
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nHere are some observations from Sameer,\
    \ a Camel user, which he kindly\nshared with us:\n\n________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________\n\
    In case anybody faces issues with the XSLT endpoint please review these\npoints.\n\
    \nI was trying to use an xslt endpoint for a simple transformation from\none xml\
    \ to another using a simple xsl. The output xml kept appearing\n(after the xslt\
    \ processor in the route) with outermost xml tag with no\ncontent within.\n\n\
    No explanations show up in the DEBUG logs. On the TRACE logs however I\ndid find\
    \ some error/warning indicating that the XMLConverter bean could\nno be initialized.\n\
    \nAfter a few hours of cranking my mind, I had to do the following to get\nit\
    \ to work (thanks to some posts on the users forum that gave some\nclue):\n\n\\\
    1. Use the transformerFactory option in the route\n`(\"xslt:my-transformer.xsl?transformerFactory=tFactory\"\
    )` with the\n`tFactory` bean having bean defined in the spring context for\n`class=\"\
    org.apache.xalan.xsltc.trax.TransformerFactoryImpl\"`. +\n 2. Added the Xalan\
    \ jar into my maven pom.\n\nMy guess is that the default xml parsing mechanism\
    \ supplied within the\nJDK (I am using 1.6.0_03) does not work right in this context\
    \ and does\nnot throw up any error either. When I switched to Xalan this way it\n\
    works. This is not a Camel issue, but might need a mention on the xslt\ncomponent\
    \ page.\n\nAnother note, jdk 1.6.0_03 ships with JAXB 2.0 while Camel needs 2.1.\n\
    One workaround is to add the 2.1 jar to the `jre/lib/endorsed` directory\nfor\
    \ the jvm or as specified by the container.\n\nHope this post saves newbie Camel\
    \ riders some time.\n________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________\n\
    \n[[XSLT-SeeAlso]]\nSee Also\n^^^^^^^^\n\n* link:configuring-camel.html[Configuring\
    \ Camel]\n* link:component.html[Component]\n* link:endpoint.html[Endpoint]\n*\
    \ link:getting-started.html[Getting Started]\n\n"
