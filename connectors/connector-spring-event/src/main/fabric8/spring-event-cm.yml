---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: spring-event
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: spring-event
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: spring-event
        spec:
          containers:
          - image: funktion/connector-spring-event:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: spring-event
      syntax: spring-event:name
      title: Spring Event
      description: The spring-event component allows to listen for Spring Application Events.
      label: spring,eventbus
      deprecated: false
      async: false
      javaType: org.apache.camel.component.event.EventComponent
      groupId: org.apache.camel
      artifactId: camel-spring
      version: 2.18.3
    componentProperties:
      applicationContext:
        kind: property
        type: object
        javaType: org.springframework.context.ApplicationContext
        deprecated: false
        secret: false
        description: The Spring ApplicationContext
        order: 0
    properties:
      name:
        kind: path
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Name of endpoint
        order: 0
      bridgeErrorHandler:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 1
      exceptionHandler:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.ExceptionHandler
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 2
      exchangePattern:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.ExchangePattern
        enum:
        - InOnly
        - RobustInOnly
        - InOut
        - InOptionalOut
        - OutOnly
        - RobustOutOnly
        - OutIn
        - OutOptionalIn
        deprecated: false
        secret: false
        description: Sets the exchange pattern when the consumer creates an exchange.
        order: 3
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 4
  documentation.adoc: |+
    [[SpringEvent-SpringEventComponent]]
    Spring Event Component
    ~~~~~~~~~~~~~~~~~~~~~~

    The *spring-event:* component provides access to the Spring
    `ApplicationEvent` objects. This allows you to publish
    `ApplicationEvent` objects to a Spring `ApplicationContext` or to
    consume them. You can then use
    link:enterprise-integration-patterns.html[Enterprise Integration
    Patterns] to process them such as link:message-filter.html[Message
    Filter].

    [[SpringEvent-URIformat]]
    URI format
    ^^^^^^^^^^

    [source,java]
    --------------------------------
    spring-event://default[?options]
    --------------------------------

    Note, at the moment there are no options for this component. That can
    easily change in future releases, so please check back.

    [[Spring-Event-Options]]
    Spring Event Options
    ^^^^^^^^^^^^^^^^^^^^



    // component options: START
    The Spring Event component supports 1 options which are listed below.



    {% raw %}
    [width="100%",cols="2,1m,7",options="header"]
    |=======================================================================
    | Name | Java Type | Description
    | applicationContext | ApplicationContext | The Spring ApplicationContext
    |=======================================================================
    {% endraw %}
    // component options: END




    // endpoint options: START
    The Spring Event component supports 5 endpoint options which are listed below:

    {% raw %}
    [width="100%",cols="2,1,1m,1m,5",options="header"]
    |=======================================================================
    | Name | Group | Default | Java Type | Description
    | name | common |  | String | Name of endpoint
    | bridgeErrorHandler | consumer | false | boolean | Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
    | exceptionHandler | consumer (advanced) |  | ExceptionHandler | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
    | exchangePattern | consumer (advanced) |  | ExchangePattern | Sets the exchange pattern when the consumer creates an exchange.
    | synchronous | advanced | false | boolean | Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
    |=======================================================================
    {% endraw %}
    // endpoint options: END


    [[SpringEvent-SeeAlso]]
    See Also
    ^^^^^^^^

    * link:configuring-camel.html[Configuring Camel]
    * link:component.html[Component]
    * link:endpoint.html[Endpoint]
    * link:getting-started.html[Getting Started]

