---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: mina2
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: mina2
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: mina2
        spec:
          containers:
          - image: funktion/connector-mina2:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: mina2
      syntax: mina2:protocol:host:port
      title: Mina2
      description: Socket level networking using TCP or UDP with the Apache Mina 2.x library.
      label: networking,tcp,udp
      deprecated: false
      async: false
      javaType: org.apache.camel.component.mina2.Mina2Component
      groupId: org.apache.camel
      artifactId: camel-mina2
      version: 2.18.3
    componentProperties:
      configuration:
        kind: property
        type: object
        javaType: org.apache.camel.component.mina2.Mina2Configuration
        deprecated: false
        secret: false
        description: To use the shared mina configuration.
        order: 0
    properties:
      protocol:
        kind: path
        group: common
        required: true
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Protocol to use
        order: 0
      host:
        kind: path
        group: common
        required: true
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Hostname to use. Use localhost or 0.0.0.0 for local server as consumer. For producer use the hostname or ip address of the remote server.
        order: 1
      port:
        kind: path
        group: common
        required: true
        type: integer
        javaType: int
        deprecated: false
        secret: false
        description: Port number
        order: 2
      disconnect:
        kind: parameter
        group: common
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Whether or not to disconnect(close) from Mina session right after use. Can be used for both consumer and producer.
        order: 3
      minaLogger:
        kind: parameter
        group: common
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: You can enable the Apache MINA logging filter. Apache MINA uses slf4j logging at INFO level to log all input and output.
        order: 4
      sync:
        kind: parameter
        group: common
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Setting to set endpoint as one-way or request-response.
        order: 5
      timeout:
        kind: parameter
        group: common
        type: integer
        javaType: long
        deprecated: false
        secret: false
        defaultValue: "30000"
        description: You can configure the timeout that specifies how long to wait for a response from a remote server. The timeout unit is in milliseconds so 60000 is 60 seconds.
        order: 6
      bridgeErrorHandler:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 7
      clientMode:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: If the clientMode is true mina consumer will connect the address as a TCP client.
        order: 8
      disconnectOnNoReply:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: If sync is enabled then this option dictates MinaConsumer if it should disconnect where there is no reply to send back.
        order: 9
      exceptionHandler:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.ExceptionHandler
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 10
      exchangePattern:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.ExchangePattern
        enum:
        - InOnly
        - RobustInOnly
        - InOut
        - InOptionalOut
        - OutOnly
        - RobustOutOnly
        - OutIn
        - OutOptionalIn
        deprecated: false
        secret: false
        description: Sets the exchange pattern when the consumer creates an exchange.
        order: 11
      noReplyLogLevel:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.LoggingLevel
        enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - OFF
        deprecated: false
        secret: false
        defaultValue: WARN
        description: If sync is enabled this option dictates MinaConsumer which logging level to use when logging a there is no reply to send back.
        order: 12
      cachedAddress:
        kind: parameter
        group: producer (advanced)
        label: producer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether to create the InetAddress once and reuse. Setting this to false allows to pickup DNS changes in the network.
        order: 13
      lazySessionCreation:
        kind: parameter
        group: producer (advanced)
        label: producer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Sessions can be lazily created to avoid exceptions if the remote server is not up and running when the Camel producer is started.
        order: 14
      maximumPoolSize:
        kind: parameter
        group: advanced
        label: advanced
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "16"
        description: Number of worker threads in the worker pool for TCP and UDP
        order: 15
      orderedThreadPoolExecutor:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether to use ordered thread pool to ensure events are processed orderly on the same channel.
        order: 16
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 17
      transferExchange:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: 'Only used for TCP. You can transfer the exchange over the wire instead
          of just the body. The following fields are transferred: In body Out body fault
          body In headers Out headers fault headers exchange properties exchange exception.
          This requires that the objects are serializable. Camel will exclude any non-serializable
          objects and log it at WARN level.'
        order: 18
      allowDefaultCodec:
        kind: parameter
        group: codec
        label: codec
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: The mina component installs a default codec if both codec is null and textline is false. Setting allowDefaultCodec to false prevents the mina component from installing a default codec as the first element in the filter chain. This is useful in scenarios where another filter must be the first in the filter chain like the SSL filter.
        order: 19
      codec:
        kind: parameter
        group: codec
        label: codec
        type: object
        javaType: org.apache.mina.filter.codec.ProtocolCodecFactory
        deprecated: false
        secret: false
        description: To use a custom minda codec implementation.
        order: 20
      decoderMaxLineLength:
        kind: parameter
        group: codec
        label: codec
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "1024"
        description: To set the textline protocol decoder max line length. By default the default value of Mina itself is used which are 1024.
        order: 21
      encoderMaxLineLength:
        kind: parameter
        group: codec
        label: codec
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: -1
        description: To set the textline protocol encoder max line length. By default the default value of Mina itself is used which are Integer.MAX_VALUE.
        order: 22
      encoding:
        kind: parameter
        group: codec
        label: codec
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: You can configure the encoding (a charset name) to use for the TCP textline codec and the UDP protocol. If not provided Camel will use the JVM default Charset
        order: 23
      filters:
        kind: parameter
        group: codec
        label: codec
        type: array
        javaType: java.util.List<org.apache.mina.core.filterchain.IoFilter>
        deprecated: false
        secret: false
        description: You can set a list of Mina IoFilters to use.
        order: 24
      textline:
        kind: parameter
        group: codec
        label: codec
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Only used for TCP. If no codec is specified you can use this flag to indicate a text line based codec; if not specified or the value is false then Object Serialization is assumed over TCP.
        order: 25
      textlineDelimiter:
        kind: parameter
        group: codec
        label: codec
        type: string
        javaType: org.apache.camel.component.mina2.Mina2TextLineDelimiter
        enum:
        - DEFAULT
        - AUTO
        - UNIX
        - WINDOWS
        - MAC
        deprecated: false
        secret: false
        description: Only used for TCP and if textline=true. Sets the text line delimiter to use. If none provided Camel will use DEFAULT. This delimiter is used to mark the end of text.
        order: 26
      autoStartTls:
        kind: parameter
        group: security
        label: security
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether to auto start SSL handshake.
        order: 27
      sslContextParameters:
        kind: parameter
        group: security
        label: security
        type: object
        javaType: org.apache.camel.util.jsse.SSLContextParameters
        deprecated: false
        secret: false
        description: To configure SSL security.
        order: 28
  documentation.adoc: "[[MINA2-MINA2Component]]\nMINA 2 Component\n~~~~~~~~~~~~~~~~\n\
    \n*Available as of Camel 2.10*\n\nThe *mina2:* component is a transport for working\
    \ with\nhttp://mina.apache.org/[Apache MINA 2.x]\n\nTIP: Favor using link:netty.html[Netty]\
    \ as Netty is a much more active\nmaintained and popular project than Apache Mina\
    \ currently is\n\nINFO: Be careful with sync=false on consumer endpoints. Since\
    \ camel-mina2 all\nconsumer exchanges are InOut. This is different to camel-mina.\n\
    \nMaven users will need to add the following dependency to their `pom.xml`\nfor\
    \ this component:\n\n[source,xml]\n------------------------------------------------------------\n\
    <dependency>\n    <groupId>org.apache.camel</groupId>\n    <artifactId>camel-mina2</artifactId>\n\
    \    <version>x.x.x</version>\n    <!-- use the same version as your Camel core\
    \ version -->\n</dependency>\n------------------------------------------------------------\n\
    \n[[MINA2-URIformat]]\nURI format\n^^^^^^^^^^\n\n[source,java]\n-------------------------------------\n\
    mina2:tcp://hostname[:port][?options]\nmina2:udp://hostname[:port][?options]\n\
    mina2:vm://hostname[:port][?options]\n-------------------------------------\n\n\
    You can specify a codec in the link:registry.html[Registry] using the\n*codec*\
    \ option. If you are using TCP and no codec is specified then the\n`textline`\
    \ flag is used to determine if text line based codec or object\nserialization\
    \ should be used instead. By default the object\nserialization is used.\n\nFor\
    \ UDP if no codec is specified the default uses a basic `ByteBuffer`\nbased codec.\n\
    \nThe VM protocol is used as a direct forwarding mechanism in the same\nJVM.\n\
    \nA Mina producer has a default timeout value of 30 seconds, while it\nwaits for\
    \ a response from the remote server.\n\nIn normal use, `camel-mina` only supports\
    \ marshalling the body\ncontent—message headers and exchange properties are not\
    \ sent. +\n However, the option, *transferExchange*, does allow you to transfer\
    \ the\nexchange itself over the wire. See options below.\n\nYou can append query\
    \ options to the URI in the following format,\n`?option=value&option=value&...`\n\
    \n[[MINA2-Options]]\nOptions\n^^^^^^^\n\n\n\n\n\n// component options: START\n\
    The Mina2 component supports 1 options which are listed below.\n\n\n\n{% raw %}\n\
    [width=\"100%\",cols=\"2,1m,7\",options=\"header\"]\n|=======================================================================\n\
    | Name | Java Type | Description\n| configuration | Mina2Configuration | To use\
    \ the shared mina configuration.\n|=======================================================================\n\
    {% endraw %}\n// component options: END\n\n\n\n\n\n\n\n\n// endpoint options:\
    \ START\nThe Mina2 component supports 29 endpoint options which are listed below:\n\
    \n{% raw %}\n[width=\"100%\",cols=\"2,1,1m,1m,5\",options=\"header\"]\n|=======================================================================\n\
    | Name | Group | Default | Java Type | Description\n| protocol | common |  | String\
    \ | *Required* Protocol to use\n| host | common |  | String | *Required* Hostname\
    \ to use. Use localhost or 0.0.0.0 for local server as consumer. For producer\
    \ use the hostname or ip address of the remote server.\n| port | common |  | int\
    \ | *Required* Port number\n| disconnect | common | false | boolean | Whether\
    \ or not to disconnect(close) from Mina session right after use. Can be used for\
    \ both consumer and producer.\n| minaLogger | common | false | boolean | You can\
    \ enable the Apache MINA logging filter. Apache MINA uses slf4j logging at INFO\
    \ level to log all input and output.\n| sync | common | true | boolean | Setting\
    \ to set endpoint as one-way or request-response.\n| timeout | common | 30000\
    \ | long | You can configure the timeout that specifies how long to wait for a\
    \ response from a remote server. The timeout unit is in milliseconds so 60000\
    \ is 60 seconds.\n| bridgeErrorHandler | consumer | false | boolean | Allows for\
    \ bridging the consumer to the Camel routing Error Handler which mean any exceptions\
    \ occurred while the consumer is trying to pickup incoming messages or the likes\
    \ will now be processed as a message and handled by the routing Error Handler.\
    \ By default the consumer will use the org.apache.camel.spi.ExceptionHandler to\
    \ deal with exceptions that will be logged at WARN/ERROR level and ignored.\n\
    | clientMode | consumer | false | boolean | If the clientMode is true mina consumer\
    \ will connect the address as a TCP client.\n| disconnectOnNoReply | consumer\
    \ (advanced) | true | boolean | If sync is enabled then this option dictates MinaConsumer\
    \ if it should disconnect where there is no reply to send back.\n| exceptionHandler\
    \ | consumer (advanced) |  | ExceptionHandler | To let the consumer use a custom\
    \ ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this\
    \ options is not in use. By default the consumer will deal with exceptions that\
    \ will be logged at WARN/ERROR level and ignored.\n| exchangePattern | consumer\
    \ (advanced) |  | ExchangePattern | Sets the exchange pattern when the consumer\
    \ creates an exchange.\n| noReplyLogLevel | consumer (advanced) | WARN | LoggingLevel\
    \ | If sync is enabled this option dictates MinaConsumer which logging level to\
    \ use when logging a there is no reply to send back.\n| cachedAddress | producer\
    \ (advanced) | true | boolean | Whether to create the InetAddress once and reuse.\
    \ Setting this to false allows to pickup DNS changes in the network.\n| lazySessionCreation\
    \ | producer (advanced) | true | boolean | Sessions can be lazily created to avoid\
    \ exceptions if the remote server is not up and running when the Camel producer\
    \ is started.\n| maximumPoolSize | advanced | 16 | int | Number of worker threads\
    \ in the worker pool for TCP and UDP\n| orderedThreadPoolExecutor | advanced |\
    \ true | boolean | Whether to use ordered thread pool to ensure events are processed\
    \ orderly on the same channel.\n| synchronous | advanced | false | boolean | Sets\
    \ whether synchronous processing should be strictly used or Camel is allowed to\
    \ use asynchronous processing (if supported).\n| transferExchange | advanced |\
    \ false | boolean | Only used for TCP. You can transfer the exchange over the\
    \ wire instead of just the body. The following fields are transferred: In body\
    \ Out body fault body In headers Out headers fault headers exchange properties\
    \ exchange exception. This requires that the objects are serializable. Camel will\
    \ exclude any non-serializable objects and log it at WARN level.\n| allowDefaultCodec\
    \ | codec | true | boolean | The mina component installs a default codec if both\
    \ codec is null and textline is false. Setting allowDefaultCodec to false prevents\
    \ the mina component from installing a default codec as the first element in the\
    \ filter chain. This is useful in scenarios where another filter must be the first\
    \ in the filter chain like the SSL filter.\n| codec | codec |  | ProtocolCodecFactory\
    \ | To use a custom minda codec implementation.\n| decoderMaxLineLength | codec\
    \ | 1024 | int | To set the textline protocol decoder max line length. By default\
    \ the default value of Mina itself is used which are 1024.\n| encoderMaxLineLength\
    \ | codec | -1 | int | To set the textline protocol encoder max line length. By\
    \ default the default value of Mina itself is used which are Integer.MAX_VALUE.\n\
    | encoding | codec |  | String | You can configure the encoding (a charset name)\
    \ to use for the TCP textline codec and the UDP protocol. If not provided Camel\
    \ will use the JVM default Charset\n| filters | codec |  | List | You can set\
    \ a list of Mina IoFilters to use.\n| textline | codec | false | boolean | Only\
    \ used for TCP. If no codec is specified you can use this flag to indicate a text\
    \ line based codec; if not specified or the value is false then Object Serialization\
    \ is assumed over TCP.\n| textlineDelimiter | codec |  | Mina2TextLineDelimiter\
    \ | Only used for TCP and if textline=true. Sets the text line delimiter to use.\
    \ If none provided Camel will use DEFAULT. This delimiter is used to mark the\
    \ end of text.\n| autoStartTls | security | true | boolean | Whether to auto start\
    \ SSL handshake.\n| sslContextParameters | security |  | SSLContextParameters\
    \ | To configure SSL security.\n|=======================================================================\n\
    {% endraw %}\n// endpoint options: END\n\n\n\n\n[[MINA2-Usingacustomcodec]]\n\
    Using a custom codec\n^^^^^^^^^^^^^^^^^^^^\n\nSee the Mina how to write your own\
    \ codec. To use your custom codec with\n`camel-mina`, you should register your\
    \ codec in the\nlink:registry.html[Registry]; for example, by creating a bean\
    \ in the\nSpring XML file. Then use the `codec` option to specify the bean ID\
    \ of\nyour codec. See link:hl7.html[HL7] that has a custom codec.\n\n[[MINA2-Samplewithsyncfalse]]\n\
    Sample with sync=false\n^^^^^^^^^^^^^^^^^^^^^^\n\nIn this sample, Camel exposes\
    \ a service that listens for TCP connections\non port 6200. We use the *textline*\
    \ codec. In our route, we create a\nMina consumer endpoint that listens on port\
    \ 6200:\n\n[source,java]\n---------------------------------------------------------------------------------------\n\
    from(\"mina2:tcp://localhost:\" + port1 + \"?textline=true&sync=false\").to(\"\
    mock:result\");\n---------------------------------------------------------------------------------------\n\
    \nAs the sample is part of a unit test, we test it by sending some data to\nit\
    \ on port 6200.\n\n[source,java]\n-------------------------------------------------------------------------------------------------\n\
    MockEndpoint mock = getMockEndpoint(\"mock:result\");\nmock.expectedBodiesReceived(\"\
    Hello World\");\n \ntemplate.sendBody(\"mina2:tcp://localhost:\" + port1 + \"\
    ?textline=true&sync=false\", \"Hello World\");\n \nassertMockEndpointsSatisfied();\n\
    -------------------------------------------------------------------------------------------------\n\
    \n[[MINA2-Samplewithsynctrue]]\nSample with sync=true\n^^^^^^^^^^^^^^^^^^^^^\n\
    \nIn the next sample, we have a more common use case where we expose a TCP\nservice\
    \ on port 6201 also use the textline codec. However, this time we\nwant to return\
    \ a response, so we set the `sync` option to `true` on the\nconsumer.\n\n[source,java]\n\
    ---------------------------------------------------------------------------------------------\n\
    from(\"mina2:tcp://localhost:\" + port2 + \"?textline=true&sync=true\").process(new\
    \ Processor() {\n    public void process(Exchange exchange) throws Exception {\n\
    \        String body = exchange.getIn().getBody(String.class);\n        exchange.getOut().setBody(\"\
    Bye \" + body);\n    }\n});\n---------------------------------------------------------------------------------------------\n\
    \nThen we test the sample by sending some data and retrieving the response\nusing\
    \ the `template.requestBody()` method. As we know the response is a\n`String`,\
    \ we cast it to `String` and can assert that the response is, in\nfact, something\
    \ we have dynamically set in our processor code logic.\n\n[source,java]\n-----------------------------------------------------------------------------------------------------------------------\n\
    String response = (String)template.requestBody(\"mina2:tcp://localhost:\" + port2\
    \ + \"?textline=true&sync=true\", \"World\");\nassertEquals(\"Bye World\", response);\n\
    -----------------------------------------------------------------------------------------------------------------------\n\
    \n[[MINA2-SamplewithSpringDSL]]\nSample with Spring DSL\n^^^^^^^^^^^^^^^^^^^^^^\n\
    \nSpring DSL can, of course, also be used for link:mina.html[MINA]. In the\nsample\
    \ below we expose a TCP server on port 5555:\n\n[source,xml]\n-----------------------------------------------------------\n\
    \   <route>\n     <from uri=\"mina2:tcp://localhost:5555?textline=true\"/>\n \
    \    <to uri=\"bean:myTCPOrderHandler\"/>\n  </route>\n-----------------------------------------------------------\n\
    \nIn the route above, we expose a TCP server on port 5555 using the\ntextline\
    \ codec. We let the Spring bean with ID, `myTCPOrderHandler`,\nhandle the request\
    \ and return a reply. For instance, the handler bean\ncould be implemented as\
    \ follows:\n\n[source,java]\n-----------------------------------------------\n\
    \    public String handleOrder(String payload) {\n        ...\n        return\
    \ \"Order: OK\"\n   }\n-----------------------------------------------\n\n[[MINA2-ClosingSessionWhenComplete]]\n\
    Closing Session When Complete\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nWhen acting as\
    \ a server you sometimes want to close the session when,\nfor example, a client\
    \ conversion is finished. To instruct Camel to close\nthe session, you should\
    \ add a header with the key\n`CamelMinaCloseSessionWhenComplete` set to a boolean\
    \ `true` value.\n\nFor instance, the example below will close the session after\
    \ it has\nwritten the `bye` message back to the client:\n\n[source,java]\n---------------------------------------------------------------------------------------------------\n\
    \        from(\"mina2:tcp://localhost:8080?sync=true&textline=true\").process(new\
    \ Processor() {\n            public void process(Exchange exchange) throws Exception\
    \ {\n                String body = exchange.getIn().getBody(String.class);\n \
    \               exchange.getOut().setBody(\"Bye \" + body);\n                exchange.getOut().setHeader(Mina2Constants.MINA_CLOSE_SESSION_WHEN_COMPLETE,\
    \ true);\n            }\n        });\n---------------------------------------------------------------------------------------------------\n\
    \n[[MINA2-GettheIoSessionformessage]]\nGet the IoSession for message\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nYou can get the IoSession from the message header with this key\n`Mina2Constants.MINA_IOSESSION`,\
    \ and also get the local host address\nwith the key `Mina2Constants.MINA_LOCAL_ADDRESS`\
    \ and remote host address\nwith the key `Mina2Constants.MINA_REMOTE_ADDRESS`.\n\
    \n[[MINA2-ConfiguringMinafilters]]\nConfiguring Mina filters\n^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nFilters permit you to use some Mina Filters, such as `SslFilter`. You\ncan also\
    \ implement some customized filters. Please note that `codec` and\n`logger` are\
    \ also implemented as Mina filters of type, `IoFilter`. Any\nfilters you may define\
    \ are appended to the end of the filter chain; that\nis, after `codec` and `logger`.\n\
    \n[[MINA2-SeeAlso]]\nSee Also\n^^^^^^^^\n\n* link:configuring-camel.html[Configuring\
    \ Camel]\n* link:component.html[Component]\n* link:endpoint.html[Endpoint]\n*\
    \ link:getting-started.html[Getting Started]\n\n* link:mina.html[MINA]\n* link:netty.html[Netty]\n\
    \n"
