---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: beanstalk
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: beanstalk
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: beanstalk
        spec:
          containers:
          - image: funktion/connector-beanstalk:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: beanstalk
      syntax: beanstalk:connectionSettings
      title: Beanstalk
      description: The beanstalk component is used for job retrieval and post-processing of Beanstalk jobs.
      label: messaging
      deprecated: false
      async: true
      javaType: org.apache.camel.component.beanstalk.BeanstalkComponent
      groupId: org.apache.camel
      artifactId: camel-beanstalk
      version: 2.18.3
    componentProperties:
      connectionSettingsFactory:
        kind: property
        type: object
        javaType: org.apache.camel.component.beanstalk.ConnectionSettingsFactory
        deprecated: false
        secret: false
        description: Custom ConnectionSettingsFactory. Specify which ConnectionSettingsFactory to use to make connections to Beanstalkd. Especially useful for unit testing without beanstalkd daemon (you can mock ConnectionSettings)
        order: 0
    properties:
      connectionSettings:
        kind: path
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Connection settings host:port/tube
        order: 0
      command:
        kind: parameter
        group: common
        type: string
        javaType: org.apache.camel.component.beanstalk.BeanstalkCommand
        enum:
        - bury
        - release
        - put
        - touch
        - delete
        - kick
        deprecated: false
        secret: false
        description: put means to put the job into Beanstalk. Job body is specified in the Camel message body. Job ID will be returned in beanstalk.jobId message header. delete release touch or bury expect Job ID in the message header beanstalk.jobId. Result of the operation is returned in beanstalk.result message header kick expects the number of jobs to kick in the message body and returns the number of jobs actually kicked out in the message header beanstalk.result.
        order: 1
      jobDelay:
        kind: parameter
        group: common
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "0"
        description: Job delay in seconds.
        order: 2
      jobPriority:
        kind: parameter
        group: common
        type: integer
        javaType: long
        deprecated: false
        secret: false
        defaultValue: "1000"
        description: Job priority. (0 is the highest see Beanstalk protocol)
        order: 3
      jobTimeToRun:
        kind: parameter
        group: common
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "60"
        description: Job time to run in seconds. (when 0 the beanstalkd daemon raises it to 1 automatically see Beanstalk protocol)
        order: 4
      awaitJob:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether to wait for job to complete before ack the job from beanstalk
        order: 5
      bridgeErrorHandler:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 6
      onFailure:
        kind: parameter
        group: consumer
        label: consumer
        type: string
        javaType: org.apache.camel.component.beanstalk.BeanstalkCommand
        enum:
        - bury
        - release
        - put
        - touch
        - delete
        - kick
        deprecated: false
        secret: false
        description: Command to use when processing failed.
        order: 7
      sendEmptyMessageWhenIdle:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.
        order: 8
      useBlockIO:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether to use blockIO.
        order: 9
      exceptionHandler:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.ExceptionHandler
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 10
      exchangePattern:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.ExchangePattern
        enum:
        - InOnly
        - RobustInOnly
        - InOut
        - InOptionalOut
        - OutOnly
        - RobustOutOnly
        - OutIn
        - OutOptionalIn
        deprecated: false
        secret: false
        description: Sets the exchange pattern when the consumer creates an exchange.
        order: 11
      pollStrategy:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.PollingConsumerPollStrategy
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.
        order: 12
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 13
      backoffErrorThreshold:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.
        order: 14
      backoffIdleThreshold:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.
        order: 15
      backoffMultiplier:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.
        order: 16
      delay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: long
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: "500"
        description: Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
        order: 17
      greedy:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.
        order: 18
      initialDelay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: long
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: "1000"
        description: Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
        order: 19
      runLoggingLevel:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: org.apache.camel.LoggingLevel
        enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - OFF
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: TRACE
        description: The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.
        order: 20
      scheduledExecutorService:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: object
        javaType: java.util.concurrent.ScheduledExecutorService
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.
        order: 21
      scheduler:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: org.apache.camel.spi.ScheduledPollConsumerScheduler
        enum:
        - none
        - spring
        - quartz2
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: none
        description: To use a cron scheduler from either camel-spring or camel-quartz2 component
        order: 22
      schedulerProperties:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: object
        javaType: java.util.Map<java.lang.String,java.lang.Object>
        prefix: scheduler.
        multiValue: true
        deprecated: false
        secret: false
        description: To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.
        order: 23
      startScheduler:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether the scheduler should be auto started.
        order: 24
      timeUnit:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: java.util.concurrent.TimeUnit
        enum:
        - NANOSECONDS
        - MICROSECONDS
        - MILLISECONDS
        - SECONDS
        - MINUTES
        - HOURS
        - DAYS
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: MILLISECONDS
        description: Time unit for initialDelay and delay options.
        order: 25
      useFixedDelay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: true
        description: Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.
        order: 26
  documentation.adoc: |+
    [[Beanstalk-Beanstalkcomponent]]
    Beanstalk component
    ~~~~~~~~~~~~~~~~~~~

    *Available in Camel 2.15*

    camel-beanstalk project provides a Camel component for job retrieval and
    post-processing of Beanstalk jobs.

    You can find the detailed explanation of Beanstalk job lifecycle
    at http://github.com/kr/beanstalkd/blob/v1.3/doc/protocol.txt[Beanstalk
    protocol].

    [[Beanstalk-Dependencies]]
    Dependencies
    ^^^^^^^^^^^^

    Maven users need to add the following dependency to their `pom.xml`

    [source,xml]
    ------------------------------------------
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-beanstalk</artifactId>
      <version>${camel-version}</version>
    </dependency>
    ------------------------------------------

    where `${camel-version`} must be replaced by the actual version of Camel
    (2.15.0 or higher).

    [[Beanstalk-URIformat]]
    URI format
    ^^^^^^^^^^

    [source,xml]
    ------------------------------------------
    beanstalk://[host[:port]][/tube][?options]
    ------------------------------------------

    You may omit either `port` or both `host` and `port`: for the Beanstalk
    defaults to be used (“localhost” and 11300). If you omit `tube`,
    Beanstalk component will use the tube with name “default”.

    When listening, you may probably want to watch for jobs from several
    tubes. Just separate them with plus sign, e.g.

    [source,java]
    ---------------------------------------
    beanstalk://localhost:11300/tube1+tube2
    ---------------------------------------

    Tube name will be URL decoded, so if your tube names include special
    characters like + or ?, you need to URL-encode them appropriately, or
    use the RAW syntax, see link:how-do-i-configure-endpoints.html[more
    details here].

    By the way, you cannot specify several tubes when you are writing jobs
    into Beanstalk.

    [[Beanstalk-options]]
    Beanstalk options
    ^^^^^^^^^^^^^^^^^



    // component options: START
    The Beanstalk component supports 1 options which are listed below.



    {% raw %}
    [width="100%",cols="2,1m,7",options="header"]
    |=======================================================================
    | Name | Java Type | Description
    | connectionSettingsFactory | ConnectionSettingsFactory | Custom ConnectionSettingsFactory. Specify which ConnectionSettingsFactory to use to make connections to Beanstalkd. Especially useful for unit testing without beanstalkd daemon (you can mock ConnectionSettings)
    |=======================================================================
    {% endraw %}
    // component options: END




    // endpoint options: START
    The Beanstalk component supports 27 endpoint options which are listed below:

    {% raw %}
    [width="100%",cols="2,1,1m,1m,5",options="header"]
    |=======================================================================
    | Name | Group | Default | Java Type | Description
    | connectionSettings | common |  | String | Connection settings host:port/tube
    | command | common |  | BeanstalkCommand | put means to put the job into Beanstalk. Job body is specified in the Camel message body. Job ID will be returned in beanstalk.jobId message header. delete release touch or bury expect Job ID in the message header beanstalk.jobId. Result of the operation is returned in beanstalk.result message header kick expects the number of jobs to kick in the message body and returns the number of jobs actually kicked out in the message header beanstalk.result.
    | jobDelay | common | 0 | int | Job delay in seconds.
    | jobPriority | common | 1000 | long | Job priority. (0 is the highest see Beanstalk protocol)
    | jobTimeToRun | common | 60 | int | Job time to run in seconds. (when 0 the beanstalkd daemon raises it to 1 automatically see Beanstalk protocol)
    | awaitJob | consumer | true | boolean | Whether to wait for job to complete before ack the job from beanstalk
    | bridgeErrorHandler | consumer | false | boolean | Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
    | onFailure | consumer |  | BeanstalkCommand | Command to use when processing failed.
    | sendEmptyMessageWhenIdle | consumer | false | boolean | If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.
    | useBlockIO | consumer | true | boolean | Whether to use blockIO.
    | exceptionHandler | consumer (advanced) |  | ExceptionHandler | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
    | exchangePattern | consumer (advanced) |  | ExchangePattern | Sets the exchange pattern when the consumer creates an exchange.
    | pollStrategy | consumer (advanced) |  | PollingConsumerPollStrategy | A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.
    | synchronous | advanced | false | boolean | Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
    | backoffErrorThreshold | scheduler |  | int | The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.
    | backoffIdleThreshold | scheduler |  | int | The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.
    | backoffMultiplier | scheduler |  | int | To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.
    | delay | scheduler | 500 | long | Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
    | greedy | scheduler | false | boolean | If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.
    | initialDelay | scheduler | 1000 | long | Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
    | runLoggingLevel | scheduler | TRACE | LoggingLevel | The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.
    | scheduledExecutorService | scheduler |  | ScheduledExecutorService | Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.
    | scheduler | scheduler | none | ScheduledPollConsumerScheduler | To use a cron scheduler from either camel-spring or camel-quartz2 component
    | schedulerProperties | scheduler |  | Map | To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.
    | startScheduler | scheduler | true | boolean | Whether the scheduler should be auto started.
    | timeUnit | scheduler | MILLISECONDS | TimeUnit | Time unit for initialDelay and delay options.
    | useFixedDelay | scheduler | true | boolean | Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.
    |=======================================================================
    {% endraw %}
    // endpoint options: END


    Producer behavior is affected by the `command` parameter which tells
    what to do with the job, it can be

    The consumer may delete the job immediately after reserving it or wait
    until Camel routes process it. While the first scenario is more like a
    “message queue”, the second is similar to “job queue”. This behavior is
    controlled by `consumer.awaitJob` parameter, which equals `true` by
    default (following Beanstalkd nature).

    When synchronous, the consumer calls `delete` on successful job
    completion and calls `bury` on failure. You can choose which command to
    execute in the case of failure by
    specifying `consumer.onFailure` parameter in the URI. It can take values
    of `bury`, `delete` or `release`.

    There is a boolean parameter `consumer.useBlockIO` which corresponds to
    the same parameter in JavaBeanstalkClient library. By default it
    is `true`.

    Be careful when specifying `release`, as the failed job will immediately
    become available in the same tube and your consumer will try to acquire
    it again. You can `release` and specify _jobDelay_ though.

    The beanstalk consumer is a Scheduled link:polling-consumer.html[Polling
    Consumer] which means there is more options you can configure, such as
    how frequent the consumer should poll. For more details
    see link:polling-consumer.html[Polling Consumer].

    [[Beanstalk-ConsumerHeaders]]
    Consumer Headers
    ^^^^^^^^^^^^^^^^

    The consumer stores a number of job headers in the Exchange message:

    [width="100%",cols="10%,10%,80%",options="header",]
    |=======================================================================
    |Property |Type |Description

    |_beanstalk.jobId_ |long | Job ID

    |_beanstalk.tube_ |string |the name of the tube that contains this job

    |_beanstalk.state_ |string |“ready” or “delayed” or “reserved” or “buried” (must be “reserved”)

    |_beanstalk.priority_ |long |the priority value set

    |_beanstalk.age_ |int |the time in seconds since the put command that created this job

    |_beanstalk.time-left_ |int |the number of seconds left until the server puts this job into the ready
    queue

    |_beanstalk.timeouts_ |int |the number of times this job has timed out during a reservation

    |_beanstalk.releases_ |int |the number of times a client has released this job from a reservation

    |_beanstalk.buries_ |int |the number of times this job has been buried

    |_beanstalk.kicks_ |int |the number of times this job has been kicked
    |=======================================================================

    [[Beanstalk-Examples]]
    Examples
    ^^^^^^^^

    This Camel component lets you both request the jobs for processing and
    supply them to Beanstalkd daemon. Our simple demo routes may look like

    [source,java]
    ----------------------------------------------------------------------------------------------
    from("beanstalk:testTube").
       log("Processing job #${property.beanstalk.jobId} with body ${in.body}").
       process(new Processor() {
         @Override
         public void process(Exchange exchange) {
           // try to make integer value out of body
           exchange.getIn().setBody( Integer.valueOf(exchange.getIn().getBody(classOf[String])) );
         }
       }).
       log("Parsed job #${property.beanstalk.jobId} to body ${in.body}");
    ----------------------------------------------------------------------------------------------

    [source,java]
    ---------------------------------------------------------------------
    from("timer:dig?period=30seconds").
       setBody(constant(10)).log("Kick ${in.body} buried/delayed tasks").
       to("beanstalk:testTube?command=kick");
    ---------------------------------------------------------------------

    In the first route we are listening for new jobs in tube “testTube”.
    When they are arriving, we are trying to parse integer value from the
    message body. If done successful, we log it and this successful exchange
    completion makes Camel component to _delete_ this job from Beanstalk
    automatically. Contrary, when we cannot parse the job data, the exchange
    failed and the Camel component _buries_ it by default, so that it can be
    processed later or probably we are going to inspect failed jobs
    manually.

    So the second route periodically requests Beanstalk to _kick_ 10 jobs
    out of buried and/or delayed state to the normal queue.

     

    [[Beanstalk-SeeAlso]]
    See Also
    ^^^^^^^^

    * link:configuring-camel.html[Configuring Camel]
    * link:component.html[Component]
    * link:endpoint.html[Endpoint]
    * link:getting-started.html[Getting Started]

