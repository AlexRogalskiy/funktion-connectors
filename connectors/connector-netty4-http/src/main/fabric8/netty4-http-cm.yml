---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: netty4-http
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: netty4-http
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: netty4-http
        spec:
          containers:
          - image: funktion/connector-netty4-http:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: netty4-http
      extendsScheme: netty4
      syntax: netty4-http:protocol:host:port/path
      title: Netty4 HTTP
      description: Netty HTTP server and client using the Netty 4.x library.
      label: http
      deprecated: false
      async: true
      lenientProperties: true
      javaType: org.apache.camel.component.netty4.http.NettyHttpComponent
      groupId: org.apache.camel
      artifactId: camel-netty4-http
      version: 2.18.3
    componentProperties:
      nettyHttpBinding:
        kind: property
        type: object
        javaType: org.apache.camel.component.netty4.http.NettyHttpBinding
        deprecated: false
        secret: false
        description: To use a custom org.apache.camel.component.netty4.http.NettyHttpBinding for binding to/from Netty and Camel Message API.
        order: 0
      headerFilterStrategy:
        kind: property
        type: object
        javaType: org.apache.camel.spi.HeaderFilterStrategy
        deprecated: false
        secret: false
        description: To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter headers.
        order: 1
      securityConfiguration:
        kind: property
        type: object
        javaType: org.apache.camel.component.netty4.http.NettyHttpSecurityConfiguration
        deprecated: false
        secret: false
        description: Refers to a org.apache.camel.component.netty4.http.NettyHttpSecurityConfiguration for configuring secure web resources.
        order: 2
      maximumPoolSize:
        kind: property
        type: integer
        javaType: int
        deprecated: false
        secret: false
        description: The thread pool size for the EventExecutorGroup if its in use. The default value is 16.
        order: 3
      configuration:
        kind: property
        type: object
        javaType: org.apache.camel.component.netty4.NettyConfiguration
        deprecated: false
        secret: false
        description: To use the NettyConfiguration as configuration when creating endpoints.
        order: 4
      executorService:
        kind: property
        type: object
        javaType: io.netty.util.concurrent.EventExecutorGroup
        deprecated: false
        secret: false
        description: To use the given EventExecutorGroup
        order: 5
    properties:
      protocol:
        kind: path
        group: common
        required: true
        type: string
        javaType: java.lang.String
        enum:
        - http
        - https
        deprecated: false
        secret: false
        description: The protocol to use which is either http or https
        order: 0
      host:
        kind: path
        group: common
        required: true
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: The local hostname such as localhost or 0.0.0.0 when being a consumer. The remote HTTP server hostname when using producer.
        order: 1
      port:
        kind: path
        group: common
        type: integer
        javaType: int
        deprecated: false
        secret: false
        description: The host port number
        order: 2
      path:
        kind: path
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Resource path
        order: 3
      bridgeEndpoint:
        kind: parameter
        group: common
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: If the option is true the producer will ignore the Exchange.HTTP_URI header and use the endpoint's URI for request. You may also set the throwExceptionOnFailure to be false to let the producer send all the fault response back. The consumer working in the bridge mode will skip the gzip compression and WWW URL form encoding (by adding the Exchange.SKIP_GZIP_ENCODING and Exchange.SKIP_WWW_FORM_URLENCODED headers to the consumed exchange).
        order: 4
      disconnect:
        kind: parameter
        group: common
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Whether or not to disconnect(close) from Netty Channel right after use. Can be used for both consumer and producer.
        order: 5
      keepAlive:
        kind: parameter
        group: common
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Setting to ensure socket is not closed due to inactivity
        order: 6
      reuseAddress:
        kind: parameter
        group: common
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Setting to facilitate socket multiplexing
        order: 7
      sync:
        kind: parameter
        group: common
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Setting to set endpoint as one-way or request-response
        order: 8
      tcpNoDelay:
        kind: parameter
        group: common
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Setting to improve TCP protocol performance
        order: 9
      bridgeErrorHandler:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 10
      matchOnUriPrefix:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Whether or not Camel should try to find a target consumer by matching the URI prefix if no exact match is found.
        order: 11
      send503whenSuspended:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether to send back HTTP status code 503 when the consumer has been suspended. If the option is false then the Netty Acceptor is unbound when the consumer is suspended so clients cannot connect anymore.
        order: 12
      backlog:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: integer
        javaType: int
        deprecated: false
        secret: false
        description: Allows to configure a backlog for netty consumer (server). Note the backlog is just a best effort depending on the OS. Setting this option to a value such as 200 500 or 1000 tells the TCP stack how long the accept queue can be If this option is not configured then the backlog depends on OS setting.
        order: 13
      bossCount:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "1"
        description: When netty works on nio mode it uses default bossCount parameter from Netty which is 1. User can use this operation to override the default bossCount from Netty
        order: 14
      bossGroup:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: io.netty.channel.EventLoopGroup
        deprecated: false
        secret: false
        description: Set the BossGroup which could be used for handling the new connection of the server side across the NettyEndpoint
        order: 15
      chunkedMaxContentLength:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "1048576"
        description: Value in bytes the max content length per chunked frame received on the Netty HTTP server.
        order: 16
      compression:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Allow using gzip/deflate for compression on the Netty HTTP server if the client supports it from the HTTP headers.
        order: 17
      disconnectOnNoReply:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: If sync is enabled then this option dictates NettyConsumer if it should disconnect where there is no reply to send back.
        order: 18
      exceptionHandler:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.ExceptionHandler
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 19
      exchangePattern:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.ExchangePattern
        enum:
        - InOnly
        - RobustInOnly
        - InOut
        - InOptionalOut
        - OutOnly
        - RobustOutOnly
        - OutIn
        - OutOptionalIn
        deprecated: false
        secret: false
        description: Sets the exchange pattern when the consumer creates an exchange.
        order: 20
      httpMethodRestrict:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: To disable HTTP methods on the Netty HTTP consumer. You can specify multiple separated by comma.
        order: 21
      mapHeaders:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: If this option is enabled then during binding from Netty to Camel Message then the headers will be mapped as well (eg added as header to the Camel Message as well). You can turn off this option to disable this. The headers can still be accessed from the org.apache.camel.component.netty.http.NettyHttpMessage message with the method getHttpRequest() that returns the Netty HTTP request io.netty.handler.codec.http.HttpRequest instance.
        order: 22
      maxHeaderSize:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "8192"
        description: The maximum length of all headers. If the sum of the length of each header exceeds this value a io.netty.handler.codec.TooLongFrameException will be raised.
        order: 23
      nettyServerBootstrapFactory:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.component.netty4.NettyServerBootstrapFactory
        deprecated: false
        secret: false
        description: To use a custom NettyServerBootstrapFactory
        order: 24
      nettySharedHttpServer:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.component.netty4.http.NettySharedHttpServer
        deprecated: false
        secret: false
        description: To use a shared Netty HTTP server. See Netty HTTP Server Example for more details.
        order: 25
      noReplyLogLevel:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.LoggingLevel
        enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - OFF
        deprecated: false
        secret: false
        defaultValue: WARN
        description: If sync is enabled this option dictates NettyConsumer which logging level to use when logging a there is no reply to send back.
        order: 26
      serverClosedChannelExceptionCaughtLogLevel:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.LoggingLevel
        enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - OFF
        deprecated: false
        secret: false
        defaultValue: DEBUG
        description: If the server (NettyConsumer) catches an java.nio.channels.ClosedChannelException then its logged using this logging level. This is used to avoid logging the closed channel exceptions as clients can disconnect abruptly and then cause a flood of closed exceptions in the Netty server.
        order: 27
      serverExceptionCaughtLogLevel:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.LoggingLevel
        enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - OFF
        deprecated: false
        secret: false
        defaultValue: WARN
        description: If the server (NettyConsumer) catches an exception then its logged using this logging level.
        order: 28
      serverInitializerFactory:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.component.netty4.ServerInitializerFactory
        deprecated: false
        secret: false
        description: To use a custom ServerInitializerFactory
        order: 29
      traceEnabled:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Specifies whether to enable HTTP TRACE for this Netty HTTP consumer. By default TRACE is turned off.
        order: 30
      urlDecodeHeaders:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: If this option is enabled then during binding from Netty to Camel Message then the header values will be URL decoded (eg 20 will be a space character. Notice this option is used by the default org.apache.camel.component.netty.http.NettyHttpBinding and therefore if you implement a custom org.apache.camel.component.netty4.http.NettyHttpBinding then you would need to decode the headers accordingly to this option.
        order: 31
      usingExecutorService:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether to use ordered thread pool to ensure events are processed orderly on the same channel.
        order: 32
      connectTimeout:
        kind: parameter
        group: producer
        label: producer
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "10000"
        description: Time to wait for a socket connection to be available. Value is in millis.
        order: 33
      requestTimeout:
        kind: parameter
        group: producer
        label: producer
        type: integer
        javaType: long
        deprecated: false
        secret: false
        description: Allows to use a timeout for the Netty producer when calling a remote server. By default no timeout is in use. The value is in milli seconds so eg 30000 is 30 seconds. The requestTimeout is using Netty's ReadTimeoutHandler to trigger the timeout.
        order: 34
      reuseChannel:
        kind: parameter
        group: producer
        label: producer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: This option allows producers to reuse the same Netty Channel for the lifecycle of processing the Exchange. This is useable if you need to call a server multiple times in a Camel route and want to use the same network connection. When using this the channel is not returned to the connection pool until the Exchange is done; or disconnected if the disconnect option is set to true. The reused Channel is stored on the Exchange as an exchange property with the key link NettyConstantsNETTY_CHANNEL which allows you to obtain the channel during routing and use it as well.
        order: 35
      throwExceptionOnFailure:
        kind: parameter
        group: producer
        label: producer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Option to disable throwing the HttpOperationFailedException in case of failed responses from the remote server. This allows you to get all responses regardless of the HTTP status code.
        order: 36
      clientInitializerFactory:
        kind: parameter
        group: producer (advanced)
        label: producer,advanced
        type: object
        javaType: org.apache.camel.component.netty4.ClientInitializerFactory
        deprecated: false
        secret: false
        description: To use a custom ClientInitializerFactory
        order: 37
      lazyChannelCreation:
        kind: parameter
        group: producer (advanced)
        label: producer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Channels can be lazily created to avoid exceptions if the remote server is not up and running when the Camel producer is started.
        order: 38
      okStatusCodeRange:
        kind: parameter
        group: producer (advanced)
        label: producer,advanced
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        defaultValue: 200-299
        description: The status codes which is considered a success response. The values are inclusive. The range must be defined as from-to with the dash included. The default range is 200-299
        order: 39
      producerPoolEnabled:
        kind: parameter
        group: producer (advanced)
        label: producer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: 'Whether producer pool is enabled or not. Important: Do not turn
          this off as the pooling is needed for handling concurrency and reliable request/reply.'
        order: 40
      producerPoolMaxActive:
        kind: parameter
        group: producer (advanced)
        label: producer,advanced
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: -1
        description: Sets the cap on the number of objects that can be allocated by the pool (checked out to clients or idle awaiting checkout) at a given time. Use a negative value for no limit.
        order: 41
      producerPoolMaxIdle:
        kind: parameter
        group: producer (advanced)
        label: producer,advanced
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "100"
        description: Sets the cap on the number of idle instances in the pool.
        order: 42
      producerPoolMinEvictableIdle:
        kind: parameter
        group: producer (advanced)
        label: producer,advanced
        type: integer
        javaType: long
        deprecated: false
        secret: false
        defaultValue: "300000"
        description: Sets the minimum amount of time (value in millis) an object may sit idle in the pool before it is eligible for eviction by the idle object evictor.
        order: 43
      producerPoolMinIdle:
        kind: parameter
        group: producer (advanced)
        label: producer,advanced
        type: integer
        javaType: int
        deprecated: false
        secret: false
        description: Sets the minimum number of instances allowed in the producer pool before the evictor thread (if active) spawns new objects.
        order: 44
      useRelativePath:
        kind: parameter
        group: producer (advanced)
        label: producer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether to use a relative path in HTTP requests.
        order: 45
      allowSerializedHeaders:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Only used for TCP when transferExchange is true. When set to true serializable objects in headers and properties will be added to the exchange. Otherwise Camel will exclude any non-serializable objects and log it at WARN level.
        order: 46
      bootstrapConfiguration:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: org.apache.camel.component.netty4.NettyServerBootstrapConfiguration
        deprecated: false
        secret: false
        description: To use a custom configured NettyServerBootstrapConfiguration for configuring this endpoint.
        order: 47
      channelGroup:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: io.netty.channel.group.ChannelGroup
        deprecated: false
        secret: false
        description: To use a explicit ChannelGroup.
        order: 48
      configuration:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: org.apache.camel.component.netty4.http.NettyHttpConfiguration
        deprecated: false
        secret: false
        description: To use a custom configured NettyHttpConfiguration for configuring this endpoint.
        order: 49
      disableStreamCache:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Determines whether or not the raw input stream from Netty HttpRequestgetContent() or HttpResponsetgetContent() is cached or not (Camel will read the stream into a in light-weight memory based Stream caching) cache. By default Camel will cache the Netty input stream to support reading it multiple times to ensure it Camel can retrieve all data from the stream. However you can set this option to true when you for example need to access the raw stream such as streaming it directly to a file or other persistent store. Mind that if you enable this option then you cannot read the Netty stream multiple times out of the box and you would need manually to reset the reader index on the Netty raw stream. Also Netty will auto-close the Netty stream when the Netty HTTP server/HTTP client is done processing which means that if the asynchronous routing engine is in use then any asynchronous thread that may continue routing the org.apache.camel.Exchange may not be able to read the Netty stream because Netty has closed it.
        order: 50
      headerFilterStrategy:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: org.apache.camel.spi.HeaderFilterStrategy
        deprecated: false
        secret: false
        description: To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter headers.
        order: 51
      nativeTransport:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: 'Whether to use native transport instead of NIO. Native transport
          takes advantage of the host operating system and is only supported on some platforms.
          You need to add the netty JAR for the host operating system you are using. See
          more details at: http://netty.io/wiki/native-transports.html'
        order: 52
      nettyHttpBinding:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: org.apache.camel.component.netty4.http.NettyHttpBinding
        deprecated: false
        secret: false
        description: To use a custom org.apache.camel.component.netty4.http.NettyHttpBinding for binding to/from Netty and Camel Message API.
        order: 53
      options:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: java.util.Map<java.lang.String,java.lang.Object>
        prefix: option.
        multiValue: true
        deprecated: false
        secret: false
        description: Allows to configure additional netty options using option. as prefix. For example option.child.keepAlive=false to set the netty option child.keepAlive=false. See the Netty documentation for possible options that can be used.
        order: 54
      receiveBufferSize:
        kind: parameter
        group: advanced
        label: advanced
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "65536"
        description: The TCP/UDP buffer sizes to be used during inbound communication. Size is bytes.
        order: 55
      receiveBufferSizePredictor:
        kind: parameter
        group: advanced
        label: advanced
        type: integer
        javaType: int
        deprecated: false
        secret: false
        description: Configures the buffer size predictor. See details at Jetty documentation and this mail thread.
        order: 56
      sendBufferSize:
        kind: parameter
        group: advanced
        label: advanced
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "65536"
        description: The TCP/UDP buffer sizes to be used during outbound communication. Size is bytes.
        order: 57
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 58
      transferException:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: If enabled and an Exchange failed processing on the consumer side and if the caused Exception was send back serialized in the response as a application/x-java-serialized-object content type. On the producer side the exception will be deserialized and thrown as is instead of the HttpOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk.
        order: 59
      transferExchange:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: 'Only used for TCP. You can transfer the exchange over the wire instead
          of just the body. The following fields are transferred: In body Out body fault
          body In headers Out headers fault headers exchange properties exchange exception.
          This requires that the objects are serializable. Camel will exclude any non-serializable
          objects and log it at WARN level.'
        order: 60
      workerCount:
        kind: parameter
        group: advanced
        label: advanced
        type: integer
        javaType: int
        deprecated: false
        secret: false
        description: When netty works on nio mode it uses default workerCount parameter from Netty which is cpu_core_threads2. User can use this operation to override the default workerCount from Netty
        order: 61
      workerGroup:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: io.netty.channel.EventLoopGroup
        deprecated: false
        secret: false
        description: To use a explicit EventLoopGroup as the boss thread pool. For example to share a thread pool with multiple consumers or producers. By default each consumer or producer has their own worker pool with 2 x cpu count core threads.
        order: 62
      decoder:
        kind: parameter
        group: codec
        label: codec
        type: object
        javaType: io.netty.channel.ChannelHandler
        deprecated: true
        secret: false
        description: To use a single decoder. This options is deprecated use encoders instead.
        order: 63
      decoders:
        kind: parameter
        group: codec
        label: codec
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: A list of decoders to be used. You can use a String which have values separated by comma and have the values be looked up in the Registry. Just remember to prefix the value with so Camel knows it should lookup.
        order: 64
      encoder:
        kind: parameter
        group: codec
        label: codec
        type: object
        javaType: io.netty.channel.ChannelHandler
        deprecated: true
        secret: false
        description: To use a single encoder. This options is deprecated use encoders instead.
        order: 65
      encoders:
        kind: parameter
        group: codec
        label: codec
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: A list of encoders to be used. You can use a String which have values separated by comma and have the values be looked up in the Registry. Just remember to prefix the value with so Camel knows it should lookup.
        order: 66
      enabledProtocols:
        kind: parameter
        group: security
        label: security
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        defaultValue: TLSv1,TLSv1.1,TLSv1.2
        description: Which protocols to enable when using SSL
        order: 67
      keyStoreFile:
        kind: parameter
        group: security
        label: security
        type: string
        javaType: java.io.File
        deprecated: false
        secret: false
        description: Client side certificate keystore to be used for encryption
        order: 68
      keyStoreFormat:
        kind: parameter
        group: security
        label: security
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Keystore format to be used for payload encryption. Defaults to JKS if not set
        order: 69
      keyStoreResource:
        kind: parameter
        group: security
        label: security
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: 'Client side certificate keystore to be used for encryption. Is loaded
          by default from classpath but you can prefix with classpath: file: or http:
          to load the resource from different systems.'
        order: 70
      needClientAuth:
        kind: parameter
        group: security
        label: consumer,security
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Configures whether the server needs client authentication when using SSL.
        order: 71
      passphrase:
        kind: parameter
        group: security
        label: security
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Password setting to use in order to encrypt/decrypt payloads sent using SSH
        order: 72
      securityConfiguration:
        kind: parameter
        group: security
        label: consumer,security
        type: object
        javaType: org.apache.camel.component.netty4.http.NettyHttpSecurityConfiguration
        deprecated: false
        secret: false
        description: Refers to a org.apache.camel.component.netty4.http.NettyHttpSecurityConfiguration for configuring secure web resources.
        order: 73
      securityOptions:
        kind: parameter
        group: security
        label: consumer,security
        type: object
        javaType: java.util.Map<java.lang.String,java.lang.Object>
        prefix: securityConfiguration.
        multiValue: true
        deprecated: false
        secret: false
        description: To configure NettyHttpSecurityConfiguration using key/value pairs from the map
        order: 74
      securityProvider:
        kind: parameter
        group: security
        label: security
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Security provider to be used for payload encryption. Defaults to SunX509 if not set.
        order: 75
      ssl:
        kind: parameter
        group: security
        label: security
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Setting to specify whether SSL encryption is applied to this endpoint
        order: 76
      sslClientCertHeaders:
        kind: parameter
        group: security
        label: security
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: When enabled and in SSL mode then the Netty consumer will enrich the Camel Message with headers having information about the client certificate such as subject name issuer name serial number and the valid date range.
        order: 77
      sslContextParameters:
        kind: parameter
        group: security
        label: security
        type: object
        javaType: org.apache.camel.util.jsse.SSLContextParameters
        deprecated: false
        secret: false
        description: To configure security using SSLContextParameters
        order: 78
      sslHandler:
        kind: parameter
        group: security
        label: security
        type: object
        javaType: io.netty.handler.ssl.SslHandler
        deprecated: false
        secret: false
        description: Reference to a class that could be used to return an SSL Handler
        order: 79
      trustStoreFile:
        kind: parameter
        group: security
        label: security
        type: string
        javaType: java.io.File
        deprecated: false
        secret: false
        description: Server side certificate keystore to be used for encryption
        order: 80
      trustStoreResource:
        kind: parameter
        group: security
        label: security
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: 'Server side certificate keystore to be used for encryption. Is loaded
          by default from classpath but you can prefix with classpath: file: or http:
          to load the resource from different systems.'
        order: 81
  documentation.adoc: "[[Netty4HTTP-Netty4HTTPComponent]]\nNetty4 HTTP Component\n\
    ~~~~~~~~~~~~~~~~~~~~~\n\n*Available as of Camel 2.14*\n\nThe *netty4-http* component\
    \ is an extension to\_link:netty4.html[Netty4]\ncomponent to facilitiate HTTP\
    \ transport with link:netty4.html[Netty4].\n\nThis camel component supports both\
    \ producer and consumer endpoints.\n\n\nINFO: *Stream*. Netty is stream based,\
    \ which means the input it receives is submitted to\nCamel as a stream. That means\
    \ you will only be able to read the content\nof the stream *once*. If you find\
    \ a situation where the message body appears to be empty or\nyou need to access\
    \ the data multiple times (eg: doing multicasting, or\nredelivery error handling)\
    \ you should use link:stream-caching.html[Stream caching] or convert the\nmessage\
    \ body to a `String` which is safe to be re-read multiple times. \nNotice Netty4\
    \ HTTP reads the entire stream into memory using\n`io.netty.handler.codec.http.HttpObjectAggregator`\
    \ to build the entire\nfull http message. But the resulting message is still a\
    \ stream based\nmessage which is readable once.\n\nMaven users will need to add\
    \ the following dependency to their `pom.xml`\nfor this component:\n\n[source,xml]\n\
    ------------------------------------------------------------\n<dependency>\n \
    \   <groupId>org.apache.camel</groupId>\n    <artifactId>camel-netty4-http</artifactId>\n\
    \    <version>x.x.x</version>\n    <!-- use the same version as your Camel core\
    \ version -->\n</dependency>\n------------------------------------------------------------\n\
    \n[[Netty4HTTP-URIformat]]\nURI format\n^^^^^^^^^^\n\nThe URI scheme for a netty\
    \ component is as follows\n\n[source,java]\n-------------------------------------------\n\
    netty4-http:http://localhost:8080[?options]\n-------------------------------------------\n\
    \nYou can append query options to the URI in the following format,\n`?option=value&option=value&...`\n\
    \n\nINFO: *Query parameters vs endpoint options*. \nYou may be wondering how Camel\
    \ recognizes URI query parameters and\nendpoint options. For example you might\
    \ create endpoint URI as follows -\n`netty4-http:http//example.com?myParam=myValue&compression=true`\
    \ . In\nthis example `myParam` is the HTTP parameter, while `compression` is the\n\
    Camel endpoint option. The strategy used by Camel in such situations is\nto resolve\
    \ available endpoint options and remove them from the URI. It\nmeans that for\
    \ the discussed example, the HTTP request sent by Netty\nHTTP producer to the\
    \ endpoint will look as follows\n-\_`http//example.com?myParam=myValue` , because\
    \ `compression` endpoint\noption will be resolved and removed from the target\
    \ URL.\nKeep also in mind that you cannot specify endpoint options using dynamic\n\
    headers (like `CamelHttpQuery`). Endpoint options can be specified only\nat the\
    \ endpoint URI definition level (like `to` or `from` DSL elements).\n\n[[Netty4HTTP-HTTPOptions]]\n\
    HTTP Options\n^^^^^^^^^^^^\n\n\nINFO: *A lot more options*. *Important:* This\
    \ component inherits all the options from\nlink:netty4.html[Netty4]. So make sure\
    \ to look at\nthe\_link:netty4.html[Netty4] documentation as well. +\n Notice\
    \ that some options from\_link:netty4.html[Netty4] is not\napplicable when using\
    \ this\_Netty4 HTTP component, such as options\nrelated to UDP transport.\n\n\n\
    \n\n\n// component options: START\nThe Netty4 HTTP component supports 6 options\
    \ which are listed below.\n\n\n\n{% raw %}\n[width=\"100%\",cols=\"2,1m,7\",options=\"\
    header\"]\n|=======================================================================\n\
    | Name | Java Type | Description\n| nettyHttpBinding | NettyHttpBinding | To use\
    \ a custom org.apache.camel.component.netty4.http.NettyHttpBinding for binding\
    \ to/from Netty and Camel Message API.\n| headerFilterStrategy | HeaderFilterStrategy\
    \ | To use a custom org.apache.camel.spi.HeaderFilterStrategy to filter headers.\n\
    | securityConfiguration | NettyHttpSecurityConfiguration | Refers to a org.apache.camel.component.netty4.http.NettyHttpSecurityConfiguration\
    \ for configuring secure web resources.\n| maximumPoolSize | int | The thread\
    \ pool size for the EventExecutorGroup if its in use. The default value is 16.\n\
    | configuration | NettyConfiguration | To use the NettyConfiguration as configuration\
    \ when creating endpoints.\n| executorService | EventExecutorGroup | To use the\
    \ given EventExecutorGroup\n|=======================================================================\n\
    {% endraw %}\n// component options: END\n\n\n\n\n\n\n\n\n\n\n// endpoint options:\
    \ START\nThe Netty4 HTTP component supports 82 endpoint options which are listed\
    \ below:\n\n{% raw %}\n[width=\"100%\",cols=\"2,1,1m,1m,5\",options=\"header\"\
    ]\n|=======================================================================\n\
    | Name | Group | Default | Java Type | Description\n| protocol | common |  | String\
    \ | *Required* The protocol to use which is either http or https\n| host | common\
    \ |  | String | *Required* The local hostname such as localhost or 0.0.0.0 when\
    \ being a consumer. The remote HTTP server hostname when using producer.\n| port\
    \ | common |  | int | The host port number\n| path | common |  | String | Resource\
    \ path\n| bridgeEndpoint | common | false | boolean | If the option is true the\
    \ producer will ignore the Exchange.HTTP_URI header and use the endpoint's URI\
    \ for request. You may also set the throwExceptionOnFailure to be false to let\
    \ the producer send all the fault response back. The consumer working in the bridge\
    \ mode will skip the gzip compression and WWW URL form encoding (by adding the\
    \ Exchange.SKIP_GZIP_ENCODING and Exchange.SKIP_WWW_FORM_URLENCODED headers to\
    \ the consumed exchange).\n| disconnect | common | false | boolean | Whether or\
    \ not to disconnect(close) from Netty Channel right after use. Can be used for\
    \ both consumer and producer.\n| keepAlive | common | true | boolean | Setting\
    \ to ensure socket is not closed due to inactivity\n| reuseAddress | common |\
    \ true | boolean | Setting to facilitate socket multiplexing\n| sync | common\
    \ | true | boolean | Setting to set endpoint as one-way or request-response\n\
    | tcpNoDelay | common | true | boolean | Setting to improve TCP protocol performance\n\
    | bridgeErrorHandler | consumer | false | boolean | Allows for bridging the consumer\
    \ to the Camel routing Error Handler which mean any exceptions occurred while\
    \ the consumer is trying to pickup incoming messages or the likes will now be\
    \ processed as a message and handled by the routing Error Handler. By default\
    \ the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with\
    \ exceptions that will be logged at WARN/ERROR level and ignored.\n| matchOnUriPrefix\
    \ | consumer | false | boolean | Whether or not Camel should try to find a target\
    \ consumer by matching the URI prefix if no exact match is found.\n| send503whenSuspended\
    \ | consumer | true | boolean | Whether to send back HTTP status code 503 when\
    \ the consumer has been suspended. If the option is false then the Netty Acceptor\
    \ is unbound when the consumer is suspended so clients cannot connect anymore.\n\
    | backlog | consumer (advanced) |  | int | Allows to configure a backlog for netty\
    \ consumer (server). Note the backlog is just a best effort depending on the OS.\
    \ Setting this option to a value such as 200 500 or 1000 tells the TCP stack how\
    \ long the accept queue can be If this option is not configured then the backlog\
    \ depends on OS setting.\n| bossCount | consumer (advanced) | 1 | int | When netty\
    \ works on nio mode it uses default bossCount parameter from Netty which is 1.\
    \ User can use this operation to override the default bossCount from Netty\n|\
    \ bossGroup | consumer (advanced) |  | EventLoopGroup | Set the BossGroup which\
    \ could be used for handling the new connection of the server side across the\
    \ NettyEndpoint\n| chunkedMaxContentLength | consumer (advanced) | 1048576 | int\
    \ | Value in bytes the max content length per chunked frame received on the Netty\
    \ HTTP server.\n| compression | consumer (advanced) | false | boolean | Allow\
    \ using gzip/deflate for compression on the Netty HTTP server if the client supports\
    \ it from the HTTP headers.\n| disconnectOnNoReply | consumer (advanced) | true\
    \ | boolean | If sync is enabled then this option dictates NettyConsumer if it\
    \ should disconnect where there is no reply to send back.\n| exceptionHandler\
    \ | consumer (advanced) |  | ExceptionHandler | To let the consumer use a custom\
    \ ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this\
    \ options is not in use. By default the consumer will deal with exceptions that\
    \ will be logged at WARN/ERROR level and ignored.\n| exchangePattern | consumer\
    \ (advanced) |  | ExchangePattern | Sets the exchange pattern when the consumer\
    \ creates an exchange.\n| httpMethodRestrict | consumer (advanced) |  | String\
    \ | To disable HTTP methods on the Netty HTTP consumer. You can specify multiple\
    \ separated by comma.\n| mapHeaders | consumer (advanced) | true | boolean | If\
    \ this option is enabled then during binding from Netty to Camel Message then\
    \ the headers will be mapped as well (eg added as header to the Camel Message\
    \ as well). You can turn off this option to disable this. The headers can still\
    \ be accessed from the org.apache.camel.component.netty.http.NettyHttpMessage\
    \ message with the method getHttpRequest() that returns the Netty HTTP request\
    \ io.netty.handler.codec.http.HttpRequest instance.\n| maxHeaderSize | consumer\
    \ (advanced) | 8192 | int | The maximum length of all headers. If the sum of the\
    \ length of each header exceeds this value a io.netty.handler.codec.TooLongFrameException\
    \ will be raised.\n| nettyServerBootstrapFactory | consumer (advanced) |  | NettyServerBootstrapFactory\
    \ | To use a custom NettyServerBootstrapFactory\n| nettySharedHttpServer | consumer\
    \ (advanced) |  | NettySharedHttpServer | To use a shared Netty HTTP server. See\
    \ Netty HTTP Server Example for more details.\n| noReplyLogLevel | consumer (advanced)\
    \ | WARN | LoggingLevel | If sync is enabled this option dictates NettyConsumer\
    \ which logging level to use when logging a there is no reply to send back.\n\
    | serverClosedChannelExceptionCaughtLogLevel | consumer (advanced) | DEBUG | LoggingLevel\
    \ | If the server (NettyConsumer) catches an java.nio.channels.ClosedChannelException\
    \ then its logged using this logging level. This is used to avoid logging the\
    \ closed channel exceptions as clients can disconnect abruptly and then cause\
    \ a flood of closed exceptions in the Netty server.\n| serverExceptionCaughtLogLevel\
    \ | consumer (advanced) | WARN | LoggingLevel | If the server (NettyConsumer)\
    \ catches an exception then its logged using this logging level.\n| serverInitializerFactory\
    \ | consumer (advanced) |  | ServerInitializerFactory | To use a custom ServerInitializerFactory\n\
    | traceEnabled | consumer (advanced) | false | boolean | Specifies whether to\
    \ enable HTTP TRACE for this Netty HTTP consumer. By default TRACE is turned off.\n\
    | urlDecodeHeaders | consumer (advanced) | false | boolean | If this option is\
    \ enabled then during binding from Netty to Camel Message then the header values\
    \ will be URL decoded (eg 20 will be a space character. Notice this option is\
    \ used by the default org.apache.camel.component.netty.http.NettyHttpBinding and\
    \ therefore if you implement a custom org.apache.camel.component.netty4.http.NettyHttpBinding\
    \ then you would need to decode the headers accordingly to this option.\n| usingExecutorService\
    \ | consumer (advanced) | true | boolean | Whether to use ordered thread pool\
    \ to ensure events are processed orderly on the same channel.\n| connectTimeout\
    \ | producer | 10000 | int | Time to wait for a socket connection to be available.\
    \ Value is in millis.\n| requestTimeout | producer |  | long | Allows to use a\
    \ timeout for the Netty producer when calling a remote server. By default no timeout\
    \ is in use. The value is in milli seconds so eg 30000 is 30 seconds. The requestTimeout\
    \ is using Netty's ReadTimeoutHandler to trigger the timeout.\n| reuseChannel\
    \ | producer | false | boolean | This option allows producers to reuse the same\
    \ Netty Channel for the lifecycle of processing the Exchange. This is useable\
    \ if you need to call a server multiple times in a Camel route and want to use\
    \ the same network connection. When using this the channel is not returned to\
    \ the connection pool until the Exchange is done; or disconnected if the disconnect\
    \ option is set to true. The reused Channel is stored on the Exchange as an exchange\
    \ property with the key link NettyConstantsNETTY_CHANNEL which allows you to obtain\
    \ the channel during routing and use it as well.\n| throwExceptionOnFailure |\
    \ producer | true | boolean | Option to disable throwing the HttpOperationFailedException\
    \ in case of failed responses from the remote server. This allows you to get all\
    \ responses regardless of the HTTP status code.\n| clientInitializerFactory |\
    \ producer (advanced) |  | ClientInitializerFactory | To use a custom ClientInitializerFactory\n\
    | lazyChannelCreation | producer (advanced) | true | boolean | Channels can be\
    \ lazily created to avoid exceptions if the remote server is not up and running\
    \ when the Camel producer is started.\n| okStatusCodeRange | producer (advanced)\
    \ | 200-299 | String | The status codes which is considered a success response.\
    \ The values are inclusive. The range must be defined as from-to with the dash\
    \ included. The default range is 200-299\n| producerPoolEnabled | producer (advanced)\
    \ | true | boolean | Whether producer pool is enabled or not. Important: Do not\
    \ turn this off as the pooling is needed for handling concurrency and reliable\
    \ request/reply.\n| producerPoolMaxActive | producer (advanced) | -1 | int | Sets\
    \ the cap on the number of objects that can be allocated by the pool (checked\
    \ out to clients or idle awaiting checkout) at a given time. Use a negative value\
    \ for no limit.\n| producerPoolMaxIdle | producer (advanced) | 100 | int | Sets\
    \ the cap on the number of idle instances in the pool.\n| producerPoolMinEvictableIdle\
    \ | producer (advanced) | 300000 | long | Sets the minimum amount of time (value\
    \ in millis) an object may sit idle in the pool before it is eligible for eviction\
    \ by the idle object evictor.\n| producerPoolMinIdle | producer (advanced) | \
    \ | int | Sets the minimum number of instances allowed in the producer pool before\
    \ the evictor thread (if active) spawns new objects.\n| useRelativePath | producer\
    \ (advanced) | false | boolean | Sets whether to use a relative path in HTTP requests.\n\
    | allowSerializedHeaders | advanced | false | boolean | Only used for TCP when\
    \ transferExchange is true. When set to true serializable objects in headers and\
    \ properties will be added to the exchange. Otherwise Camel will exclude any non-serializable\
    \ objects and log it at WARN level.\n| bootstrapConfiguration | advanced |  |\
    \ NettyServerBootstrapConfiguration | To use a custom configured NettyServerBootstrapConfiguration\
    \ for configuring this endpoint.\n| channelGroup | advanced |  | ChannelGroup\
    \ | To use a explicit ChannelGroup.\n| configuration | advanced |  | NettyHttpConfiguration\
    \ | To use a custom configured NettyHttpConfiguration for configuring this endpoint.\n\
    | disableStreamCache | advanced | false | boolean | Determines whether or not\
    \ the raw input stream from Netty HttpRequestgetContent() or HttpResponsetgetContent()\
    \ is cached or not (Camel will read the stream into a in light-weight memory based\
    \ Stream caching) cache. By default Camel will cache the Netty input stream to\
    \ support reading it multiple times to ensure it Camel can retrieve all data from\
    \ the stream. However you can set this option to true when you for example need\
    \ to access the raw stream such as streaming it directly to a file or other persistent\
    \ store. Mind that if you enable this option then you cannot read the Netty stream\
    \ multiple times out of the box and you would need manually to reset the reader\
    \ index on the Netty raw stream. Also Netty will auto-close the Netty stream when\
    \ the Netty HTTP server/HTTP client is done processing which means that if the\
    \ asynchronous routing engine is in use then any asynchronous thread that may\
    \ continue routing the org.apache.camel.Exchange may not be able to read the Netty\
    \ stream because Netty has closed it.\n| headerFilterStrategy | advanced |  |\
    \ HeaderFilterStrategy | To use a custom org.apache.camel.spi.HeaderFilterStrategy\
    \ to filter headers.\n| nativeTransport | advanced | false | boolean | Whether\
    \ to use native transport instead of NIO. Native transport takes advantage of\
    \ the host operating system and is only supported on some platforms. You need\
    \ to add the netty JAR for the host operating system you are using. See more details\
    \ at: http://netty.io/wiki/native-transports.html\n| nettyHttpBinding | advanced\
    \ |  | NettyHttpBinding | To use a custom org.apache.camel.component.netty4.http.NettyHttpBinding\
    \ for binding to/from Netty and Camel Message API.\n| options | advanced |  |\
    \ Map | Allows to configure additional netty options using option. as prefix.\
    \ For example option.child.keepAlive=false to set the netty option child.keepAlive=false.\
    \ See the Netty documentation for possible options that can be used.\n| receiveBufferSize\
    \ | advanced | 65536 | int | The TCP/UDP buffer sizes to be used during inbound\
    \ communication. Size is bytes.\n| receiveBufferSizePredictor | advanced |  |\
    \ int | Configures the buffer size predictor. See details at Jetty documentation\
    \ and this mail thread.\n| sendBufferSize | advanced | 65536 | int | The TCP/UDP\
    \ buffer sizes to be used during outbound communication. Size is bytes.\n| synchronous\
    \ | advanced | false | boolean | Sets whether synchronous processing should be\
    \ strictly used or Camel is allowed to use asynchronous processing (if supported).\n\
    | transferException | advanced | false | boolean | If enabled and an Exchange\
    \ failed processing on the consumer side and if the caused Exception was send\
    \ back serialized in the response as a application/x-java-serialized-object content\
    \ type. On the producer side the exception will be deserialized and thrown as\
    \ is instead of the HttpOperationFailedException. The caused exception is required\
    \ to be serialized. This is by default turned off. If you enable this then be\
    \ aware that Java will deserialize the incoming data from the request to Java\
    \ and that can be a potential security risk.\n| transferExchange | advanced |\
    \ false | boolean | Only used for TCP. You can transfer the exchange over the\
    \ wire instead of just the body. The following fields are transferred: In body\
    \ Out body fault body In headers Out headers fault headers exchange properties\
    \ exchange exception. This requires that the objects are serializable. Camel will\
    \ exclude any non-serializable objects and log it at WARN level.\n| workerCount\
    \ | advanced |  | int | When netty works on nio mode it uses default workerCount\
    \ parameter from Netty which is cpu_core_threads2. User can use this operation\
    \ to override the default workerCount from Netty\n| workerGroup | advanced | \
    \ | EventLoopGroup | To use a explicit EventLoopGroup as the boss thread pool.\
    \ For example to share a thread pool with multiple consumers or producers. By\
    \ default each consumer or producer has their own worker pool with 2 x cpu count\
    \ core threads.\n| decoder | codec |  | ChannelHandler | To use a single decoder.\
    \ This options is deprecated use encoders instead.\n| decoders | codec |  | String\
    \ | A list of decoders to be used. You can use a String which have values separated\
    \ by comma and have the values be looked up in the Registry. Just remember to\
    \ prefix the value with so Camel knows it should lookup.\n| encoder | codec |\
    \  | ChannelHandler | To use a single encoder. This options is deprecated use\
    \ encoders instead.\n| encoders | codec |  | String | A list of encoders to be\
    \ used. You can use a String which have values separated by comma and have the\
    \ values be looked up in the Registry. Just remember to prefix the value with\
    \ so Camel knows it should lookup.\n| enabledProtocols | security | TLSv1,TLSv1.1,TLSv1.2\
    \ | String | Which protocols to enable when using SSL\n| keyStoreFile | security\
    \ |  | File | Client side certificate keystore to be used for encryption\n| keyStoreFormat\
    \ | security |  | String | Keystore format to be used for payload encryption.\
    \ Defaults to JKS if not set\n| keyStoreResource | security |  | String | Client\
    \ side certificate keystore to be used for encryption. Is loaded by default from\
    \ classpath but you can prefix with classpath: file: or http: to load the resource\
    \ from different systems.\n| needClientAuth | security | false | boolean | Configures\
    \ whether the server needs client authentication when using SSL.\n| passphrase\
    \ | security |  | String | Password setting to use in order to encrypt/decrypt\
    \ payloads sent using SSH\n| securityConfiguration | security |  | NettyHttpSecurityConfiguration\
    \ | Refers to a org.apache.camel.component.netty4.http.NettyHttpSecurityConfiguration\
    \ for configuring secure web resources.\n| securityOptions | security |  | Map\
    \ | To configure NettyHttpSecurityConfiguration using key/value pairs from the\
    \ map\n| securityProvider | security |  | String | Security provider to be used\
    \ for payload encryption. Defaults to SunX509 if not set.\n| ssl | security |\
    \ false | boolean | Setting to specify whether SSL encryption is applied to this\
    \ endpoint\n| sslClientCertHeaders | security | false | boolean | When enabled\
    \ and in SSL mode then the Netty consumer will enrich the Camel Message with headers\
    \ having information about the client certificate such as subject name issuer\
    \ name serial number and the valid date range.\n| sslContextParameters | security\
    \ |  | SSLContextParameters | To configure security using SSLContextParameters\n\
    | sslHandler | security |  | SslHandler | Reference to a class that could be used\
    \ to return an SSL Handler\n| trustStoreFile | security |  | File | Server side\
    \ certificate keystore to be used for encryption\n| trustStoreResource | security\
    \ |  | String | Server side certificate keystore to be used for encryption. Is\
    \ loaded by default from classpath but you can prefix with classpath: file: or\
    \ http: to load the resource from different systems.\n|=======================================================================\n\
    {% endraw %}\n// endpoint options: END\n\n\n\n\n\n\n[[Netty4HTTP-MessageHeaders]]\n\
    Message Headers\n^^^^^^^^^^^^^^^\n\nThe following headers can be used on the producer\
    \ to control the HTTP\nrequest.\n\n[width=\"100%\",cols=\"10%,10%,80%\",options=\"\
    header\",]\n|=======================================================================\n\
    |Name |Type |Description\n\n|`CamelHttpMethod` |`String` |Allow to control what\
    \ HTTP method to use such as GET, POST, TRACE etc.\nThe type can also be a `io.netty.handler.codec.http.HttpMethod`\n\
    instance.\n\n|`CamelHttpQuery` |`String` |Allows to provide URI query parameters\
    \ as a `String` value that\noverrides the endpoint configuration. Separate multiple\
    \ parameters using\nthe & sign. For example: `foo=bar&beer=yes`.\n\n|`CamelHttpPath`\
    \ |`String` |Allows to provide URI context-path and query parameters as a `String`\n\
    value that overrides the endpoint configuration. This allows to reuse\nthe same\
    \ producer for calling same remote http server, but using a\ndynamic context-path\
    \ and query parameters.\n\n|`Content-Type` |`String` |To set the content-type\
    \ of the HTTP body. For example:\n`text/plain; charset=\"UTF-8\"`.\n\n|`CamelHttpResponseCode`\
    \ |`int` |Allows to set the HTTP Status code to use. By default 200 is used for\n\
    success, and 500 for failure.\n|=======================================================================\n\
    \nThe following headers is provided as meta-data when a route starts from\nan\
    \ Netty4 HTTP endpoint:\n\nThe description in the table takes offset in a route\
    \ having:\n`from(\"netty4-http:http:0.0.0.0:8080/myapp\")...`\n\n[width=\"100%\"\
    ,cols=\"10%,10%,80%\",options=\"header\",]\n|=======================================================================\n\
    |Name |Type |Description\n\n|`CamelHttpMethod` |`String` |The HTTP method used,\
    \ such as GET, POST, TRACE etc.\n\n|`CamelHttpUrl` |`String` |The URL including\
    \ protocol, host and port, etc\n\n|`CamelHttpUri` |`String` |The URI without protocol,\
    \ host and port, etc\n\n|`CamelHttpQuery` |`String` |Any query parameters, such\
    \ as `foo=bar&beer=yes`\n\n|`CamelHttpRawQuery` |`String` |Any query parameters,\
    \ such as `foo=bar&beer=yes`. Stored in the raw\nform, as they arrived to the\
    \ consumer (i.e. before URL decoding).\n\n|`CamelHttpPath` |`String` |Additional\
    \ context-path. This value is empty if the client called the\ncontext-path `/myapp`.\
    \ If the client calls `/myapp/mystuff`, then this\nheader value is `/mystuff`.\
    \ In other words its the value after the\ncontext-path configured on the route\
    \ endpoint.\n\n|`CamelHttpCharacterEncoding` |`String` |The charset from the content-type\
    \ header.\n\n|`CamelHttpAuthentication` |`String` |If the user was authenticated\
    \ using HTTP Basic then this header is added\nwith the value `Basic`.\n\n|`Content-Type`\
    \ |`String` |The content type if provided. For example:\n`text/plain; charset=\"\
    UTF-8\"`.\n|=======================================================================\n\
    \n[[Netty4HTTP-AccesstoNettytypes]]\nAccess to Netty types\n^^^^^^^^^^^^^^^^^^^^^\n\
    \nThis component uses the\n`org.apache.camel.component.netty4.http.NettyHttpMessage`\
    \ as the message\nimplementation on the link:exchange.html[Exchange]. This allows\
    \ end\nusers to get access to the original Netty request/response instances if\n\
    needed, as shown below.\_Mind that the original response may not be\naccessible\
    \ at all times.\n\n[source,java]\n----------------------------------------------------------------------------------------------------------\n\
    io.netty.handler.codec.http.HttpRequest request = exchange.getIn(NettyHttpMessage.class).getHttpRequest();\n\
    ----------------------------------------------------------------------------------------------------------\n\
    \n[[Netty4HTTP-Examples]]\nExamples\n^^^^^^^^\n\nIn the route below we use Netty4\
    \ HTTP as a HTTP server, which returns\nback a hardcoded \"Bye World\" message.\n\
    \n[source,java]\n-----------------------------------------------\n    from(\"\
    netty4-http:http://0.0.0.0:8080/foo\")\n      .transform().constant(\"Bye World\"\
    );\n-----------------------------------------------\n\nAnd we can call this HTTP\
    \ server using Camel also, with the\nlink:producertemplate.html[ProducerTemplate]\
    \ as shown below:\n\n[source,java]\n------------------------------------------------------------------------------------------------------------\n\
    \    String out = template.requestBody(\"netty4-http:http://localhost:8080/foo\"\
    , \"Hello World\", String.class);\n    System.out.println(out);\n------------------------------------------------------------------------------------------------------------\n\
    \nAnd we get back \"Bye World\" as the output.\n\n[[Netty4HTTP-HowdoIletNettymatchwildcards]]\n\
    How do I let Netty match wildcards\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBy default\
    \ Netty4 HTTP will only match on exact uri's. But you can\ninstruct Netty to match\
    \ prefixes. For example\n\n[source,java]\n-----------------------------------------------------------\n\
    from(\"netty4-http:http://0.0.0.0:8123/foo\").to(\"mock:foo\");\n-----------------------------------------------------------\n\
    \nIn the route above Netty4 HTTP will only match if the uri is an exact\nmatch,\
    \ so it will match if you enter +\n `http://0.0.0.0:8123/foo` but not match if\
    \ you do\n`http://0.0.0.0:8123/foo/bar`.\n\nSo if you want to enable wildcard\
    \ matching you do as follows:\n\n[source,java]\n---------------------------------------------------------------------------------\n\
    from(\"netty4-http:http://0.0.0.0:8123/foo?matchOnUriPrefix=true\").to(\"mock:foo\"\
    );\n---------------------------------------------------------------------------------\n\
    \nSo now Netty matches any endpoints with starts with `foo`.\n\nTo match *any*\
    \ endpoint you can do:\n\n[source,java]\n-----------------------------------------------------------------------------\n\
    from(\"netty4-http:http://0.0.0.0:8123?matchOnUriPrefix=true\").to(\"mock:foo\"\
    );\n-----------------------------------------------------------------------------\n\
    \n[[Netty4HTTP-Usingmultiplerouteswithsameport]]\nUsing multiple routes with same\
    \ port\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIn the same link:camelcontext.html[CamelContext]\
    \ you can have multiple\nroutes from Netty4 HTTP that shares the same port (eg\
    \ a\n`io.netty.bootstrap.ServerBootstrap` instance). Doing this requires a\nnumber\
    \ of bootstrap options to be identical in the routes, as the routes\nwill share\
    \ the same `io.netty.bootstrap.ServerBootstrap` instance. The\ninstance will be\
    \ configured with the options from the first route\ncreated.\n\nThe options the\
    \ routes must be identical configured is all the options\ndefined in the\n`org.apache.camel.component.netty4.NettyServerBootstrapConfiguration`\n\
    configuration class. If you have configured another route with different\noptions,\
    \ Camel will throw an exception on startup, indicating the\noptions is not identical.\
    \ To mitigate this ensure all options is\nidentical.\n\nHere is an example with\
    \ two routes that share the same port.\n\n*Two routes sharing the same port*\n\
    \n[source,java]\n-----------------------------------------------\nfrom(\"netty4-http:http://0.0.0.0:{{port}}/foo\"\
    )\n  .to(\"mock:foo\")\n  .transform().constant(\"Bye World\");\n\nfrom(\"netty4-http:http://0.0.0.0:{{port}}/bar\"\
    )\n  .to(\"mock:bar\")\n  .transform().constant(\"Bye Camel\");\n-----------------------------------------------\n\
    \nAnd here is an example of a mis configured 2nd route that do not have\nidentical\n\
    `org.apache.camel.component.netty4.NettyServerBootstrapConfiguration`\noption\
    \ as the 1st route. This will cause Camel to fail on startup.\n\n*Two routes sharing\
    \ the same port, but the 2nd route is misconfigured\nand will fail on starting*\n\
    \n[source,java]\n--------------------------------------------------------------------------------------\n\
    from(\"netty4-http:http://0.0.0.0:{{port}}/foo\")\n  .to(\"mock:foo\")\n  .transform().constant(\"\
    Bye World\");\n\n// we cannot have a 2nd route on same port with SSL enabled,\
    \ when the 1st route is NOT\nfrom(\"netty4-http:http://0.0.0.0:{{port}}/bar?ssl=true\"\
    )\n  .to(\"mock:bar\")\n  .transform().constant(\"Bye Camel\");\n--------------------------------------------------------------------------------------\n\
    \n[[Netty4HTTP-Reusingsameserverbootstrapconfigurationwithmultipleroutes]]\nReusing\
    \ same server bootstrap configuration with multiple routes\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \nBy configuring the common server bootstrap option in an single instance\nof\
    \ a\n`org.apache.camel.component.netty4.NettyServerBootstrapConfiguration`\ntype,\
    \ we can use the `bootstrapConfiguration` option on the Netty4 HTTP\nconsumers\
    \ to refer and reuse the same options across all consumers.\n\n[source,xml]\n\
    -----------------------------------------------------------------------------------------------------------------\n\
    <bean id=\"nettyHttpBootstrapOptions\" class=\"org.apache.camel.component.netty4.NettyServerBootstrapConfiguration\"\
    >\n  <property name=\"backlog\" value=\"200\"/>\n  <property name=\"connectionTimeout\"\
    \ value=\"20000\"/>\n  <property name=\"workerCount\" value=\"16\"/>\n</bean>\n\
    -----------------------------------------------------------------------------------------------------------------\n\
    \nAnd in the routes you refer to this option as shown below\n\n[source,xml]\n\
    ----------------------------------------------------------------------------------------------------------\n\
    <route>\n  <from uri=\"netty4-http:http://0.0.0.0:{{port}}/foo?bootstrapConfiguration=#nettyHttpBootstrapOptions\"\
    />\n  ...\n</route>\n\n<route>\n  <from uri=\"netty4-http:http://0.0.0.0:{{port}}/bar?bootstrapConfiguration=#nettyHttpBootstrapOptions\"\
    />\n  ...\n</route>\n\n<route>\n  <from uri=\"netty4-http:http://0.0.0.0:{{port}}/beer?bootstrapConfiguration=#nettyHttpBootstrapOptions\"\
    />\n  ...\n</route>\n----------------------------------------------------------------------------------------------------------\n\
    \n[[Netty4HTTP-ReusingsameserverbootstrapconfigurationwithmultipleroutesacrossmultiplebundlesinOSGicontainer]]\n\
    Reusing same server bootstrap configuration with multiple routes across multiple\
    \ bundles in OSGi container\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \nSee the link:netty-http-server-example.html[Netty HTTP Server Example]\nfor\
    \ more details and example how to do that.\n\n[[Netty4HTTP-UsingHTTPBasicAuthentication]]\n\
    Using HTTP Basic Authentication\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe Netty\
    \ HTTP consumer supports HTTP basic authentication by specifying\nthe security\
    \ realm name to use, as shown below\n\n[source,java]\n------------------------------------------------------------------------------------------\n\
    <route>\n   <from uri=\"netty4-http:http://0.0.0.0:{{port}}/foo?securityConfiguration.realm=karaf\"\
    />\n   ...\n</route>\n------------------------------------------------------------------------------------------\n\
    \nThe realm name is mandatory to enable basic authentication. By default\nthe\
    \ JAAS based authenticator is used, which will use the realm name\nspecified (karaf\
    \ in the example above) and use the JAAS realm and the\nJAAS \\{\\{LoginModule}}s\
    \ of this realm for authentication.\n\nEnd user of Apache Karaf / ServiceMix has\
    \ a karaf realm out of the box,\nand hence why the example above would work out\
    \ of the box in these\ncontainers.\n\n[[Netty4HTTP-SpecifyingACLonwebresources]]\n\
    Specifying ACL on web resources\n+++++++++++++++++++++++++++++++\n\nThe `org.apache.camel.component.netty4.http.SecurityConstraint`\
    \ allows\nto define constrains on web resources. And the\n`org.apache.camel.component.netty.http.SecurityConstraintMapping`\
    \ is\nprovided out of the box, allowing to easily define inclusions and\nexclusions\
    \ with roles.\n\nFor example as shown below in the XML DSL, we define the constraint\n\
    bean:\n\n[source,xml]\n-------------------------------------------------------------------------------------------------\n\
    \  <bean id=\"constraint\" class=\"org.apache.camel.component.netty4.http.SecurityConstraintMapping\"\
    >\n    <!-- inclusions defines url -> roles restrictions -->\n    <!-- a * should\
    \ be used for any role accepted (or even no roles) -->\n    <property name=\"\
    inclusions\">\n      <map>\n        <entry key=\"/*\" value=\"*\"/>\n        <entry\
    \ key=\"/admin/*\" value=\"admin\"/>\n        <entry key=\"/guest/*\" value=\"\
    admin,guest\"/>\n      </map>\n    </property>\n    <!-- exclusions is used to\
    \ define public urls, which requires no authentication -->\n    <property name=\"\
    exclusions\">\n      <set>\n        <value>/public/*</value>\n      </set>\n \
    \   </property>\n  </bean>\n-------------------------------------------------------------------------------------------------\n\
    \nThe constraint above is define so that\n\n* access to /* is restricted and any\
    \ roles is accepted (also if user has\nno roles)\n* access to /admin/* requires\
    \ the admin role\n* access to /guest/* requires the admin or guest role\n* access\
    \ to /public/* is an exclusion which means no authentication is\nneeded, and is\
    \ therefore public for everyone without logging in\n\nTo use this constraint we\
    \ just need to refer to the bean id as shown\nbelow:\n\n[source,xml]\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\
    <route>\n   <from uri=\"netty4-http:http://0.0.0.0:{{port}}/foo?matchOnUriPrefix=true&amp;securityConfiguration.realm=karaf&amp;securityConfiguration.securityConstraint=#constraint\"\
    />\n   ...\n</route>\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\
    \n[[Netty4HTTP-SeeAlso]]\nSee Also\n^^^^^^^^\n\n* link:configuring-camel.html[Configuring\
    \ Camel]\n* link:component.html[Component]\n* link:endpoint.html[Endpoint]\n*\
    \ link:getting-started.html[Getting Started]\n\n* link:netty.html[Netty]\n* link:netty-http-server-example.html[Netty\
    \ HTTP Server Example]\n* link:jetty.html[Jetty]\n\n"
