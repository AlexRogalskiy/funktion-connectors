---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: optaplanner
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: optaplanner
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: optaplanner
        spec:
          containers:
          - image: funktion/connector-optaplanner:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: optaplanner
      syntax: optaplanner:configFile
      title: OptaPlanner
      description: Solves the planning problem contained in a message with OptaPlanner.
      label: engine,planning
      deprecated: false
      async: false
      javaType: org.apache.camel.component.optaplanner.OptaPlannerComponent
      groupId: org.apache.camel
      artifactId: camel-optaplanner
      version: 2.18.3
    componentProperties: {}
    properties:
      configFile:
        kind: path
        group: common
        required: true
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Specifies the location to the solver file
        order: 0
      solverId:
        kind: parameter
        group: common
        label: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        defaultValue: DEFAULT_SOLVER
        description: Specifies the solverId to user for the solver instance key
        order: 1
      bridgeErrorHandler:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 2
      exceptionHandler:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.ExceptionHandler
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 3
      exchangePattern:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.ExchangePattern
        enum:
        - InOnly
        - RobustInOnly
        - InOut
        - InOptionalOut
        - OutOnly
        - RobustOutOnly
        - OutIn
        - OutOptionalIn
        deprecated: false
        secret: false
        description: Sets the exchange pattern when the consumer creates an exchange.
        order: 4
      async:
        kind: parameter
        group: producer
        label: producer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Specifies to perform operations in async mode
        order: 5
      threadPoolSize:
        kind: parameter
        group: producer
        label: producer
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "10"
        description: Specifies the thread pool size to use when async is true
        order: 6
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 7
  documentation.adoc: |+
    [[OptaPlanner-OptaPlanner]]
    OptaPlanner
    ~~~~~~~~~~~

    *Available as of Camel 2.13*

    The *optaplanner:* component solves the planning problem contained in a
    message with http://www.optaplanner.org/[OptaPlanner]. +
     For example: feed it an unsolved Vehicle Routing problem and it solves
    it.

    The component supports consumer as BestSolutionChangedEvent listener and
    producer for processing Solution and ProblemFactChange

    Maven users will need to add the following dependency to their `pom.xml`
    for this component:

    [source,xml]
    ------------------------------------------------------------------------------------
    <dependency>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-optaplanner</artifactId>
        <version>x.x.x</version><!-- use the same version as your Camel core version -->
    </dependency>
    ------------------------------------------------------------------------------------

    [[OptaPlanner-URIformat]]
    URI format
    ^^^^^^^^^^

    [source,java]
    ----------------------------------
    optaplanner:solverConfig[?options]
    ----------------------------------

    The *solverConfig* is the classpath-local URI of the solverConfig, for
    example `/org/foo/barSolverConfig.xml`.

    You can append query options to the URI in the following format,
    `?option=value&option=value&...`

    [[OptaPlanner-URIOptions]]
    OptaPlanner Options
    ^^^^^^^^^^^


    // component options: START
    The OptaPlanner component has no options.
    // component options: END



    // endpoint options: START
    The OptaPlanner component supports 8 endpoint options which are listed below:

    {% raw %}
    [width="100%",cols="2,1,1m,1m,5",options="header"]
    |=======================================================================
    | Name | Group | Default | Java Type | Description
    | configFile | common |  | String | *Required* Specifies the location to the solver file
    | solverId | common | DEFAULT_SOLVER | String | Specifies the solverId to user for the solver instance key
    | bridgeErrorHandler | consumer | false | boolean | Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
    | exceptionHandler | consumer (advanced) |  | ExceptionHandler | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
    | exchangePattern | consumer (advanced) |  | ExchangePattern | Sets the exchange pattern when the consumer creates an exchange.
    | async | producer | false | boolean | Specifies to perform operations in async mode
    | threadPoolSize | producer | 10 | int | Specifies the thread pool size to use when async is true
    | synchronous | advanced | false | boolean | Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
    |=======================================================================
    {% endraw %}
    // endpoint options: END


    [[OptaPlanner-MessageHeaders]]
    Message Headers
    ^^^^^^^^^^^^^^^

    [width="100%",cols="10%,10%,10%,10%,60%",options="header",]
    |=======================================================================
    |Name |Default Value |Type |Context |Description

    |CamelOptaPlannerSolverId |null |String |Shared |Specifies the solverId to use

    |CamelOptaPlannerIsAsync |PUT |String |Producer |Specify whether to use another thread for submitting Solution instances
    rather than blocking the current thread.
    |=======================================================================

    [[OptaPlanner-MessageBody]]
    Message Body
    ^^^^^^^^^^^^

    Camel takes the planning problem for the IN body, solves it and returns
    it on the OUT body. (since v 2.16) The IN body object supports the following use cases:

    * If the body is instance of Solution, then it will be solved using the
    solver identified by solverId and either synchronously or
    asynchronously.
    * If the body is instance of ProblemFactChange, then it will trigger
    addProblemFactChange. If the processing is asynchronously, then it will
    wait till isEveryProblemFactChangeProcessed before returning result.
    * If the body is none of the above types, then the producer will return
    the best result from the solver identified by solverId

    [[OptaPlanner-Termination]]
    Termination
    ^^^^^^^^^^^

    The solving will take as long as specified in the `solverConfig`.

    [source,xml]
    -----------------------------------------------------------------------------
    <solver>
      ...
      <termination>
        <!-- Terminate after 10 seconds, unless it's not feasible by then yet -->
        <terminationCompositionStyle>AND</terminationCompositionStyle>
        <secondsSpentLimit>10</secondsSpentLimit>
        <bestScoreLimit>-1hard/0soft</bestScoreLimit>
      </termination>
      ...
    <solver>
    -----------------------------------------------------------------------------

    Â 

    [[OptaPlanner-Samples]]
    Samples
    +++++++

    Solve an planning problem that's on the ActiveMQ queue with OptaPlanner:

    [source,java]
    --------------------------------------------------
    from("activemq:My.Queue").
      .to("optaplanner:/org/foo/barSolverConfig.xml");
    --------------------------------------------------

    Expose OptaPlanner as a REST service:

    [source,java]
    -------------------------------------------------------
    from("cxfrs:bean:rsServer?bindingStyle=SimpleConsumer")
      .to("optaplanner:/org/foo/barSolverConfig.xml");
    -------------------------------------------------------

    [[OptaPlanner-SeeAlso]]
    See Also
    ^^^^^^^^

    * link:configuring-camel.html[Configuring Camel]
    * link:component.html[Component]
    * link:endpoint.html[Endpoint]
    * link:getting-started.html[Getting Started]

