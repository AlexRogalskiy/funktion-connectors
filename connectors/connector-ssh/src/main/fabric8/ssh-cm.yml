---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: ssh
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: ssh
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: ssh
        spec:
          containers:
          - image: funktion/connector-ssh:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: ssh
      syntax: ssh:host:port
      alternativeSyntax: ssh:username:password@host:port
      title: SSH
      description: The ssh component enables access to SSH servers such that you can send an SSH command and process the response.
      label: file
      deprecated: false
      async: false
      javaType: org.apache.camel.component.ssh.SshComponent
      groupId: org.apache.camel
      artifactId: camel-ssh
      version: 2.18.3
    componentProperties:
      configuration:
        kind: property
        type: object
        javaType: org.apache.camel.component.ssh.SshConfiguration
        deprecated: false
        secret: false
        description: To use the shared SSH configuration
        order: 0
      host:
        kind: property
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Sets the hostname of the remote SSH server.
        order: 1
      port:
        kind: property
        type: integer
        javaType: int
        deprecated: false
        secret: false
        description: Sets the port number for the remote SSH server.
        order: 2
      username:
        kind: property
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Sets the username to use in logging into the remote SSH server.
        order: 3
      password:
        kind: property
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Sets the password to use in connecting to remote SSH server. Requires keyPairProvider to be set to null.
        order: 4
      pollCommand:
        kind: property
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Sets the command string to send to the remote SSH server during every poll cycle. Only works with camel-ssh component being used as a consumer i.e. from(ssh://...). You may need to end your command with a newline and that must be URL encoded 0A
        order: 5
      keyPairProvider:
        kind: property
        type: object
        javaType: org.apache.sshd.common.KeyPairProvider
        deprecated: false
        secret: false
        description: Sets the KeyPairProvider reference to use when connecting using Certificates to the remote SSH Server.
        order: 6
      keyType:
        kind: property
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Sets the key type to pass to the KeyPairProvider as part of authentication. KeyPairProvider.loadKey(...) will be passed this value. Defaults to ssh-rsa.
        order: 7
      timeout:
        kind: property
        type: integer
        javaType: long
        deprecated: false
        secret: false
        description: Sets the timeout in milliseconds to wait in establishing the remote SSH server connection. Defaults to 30000 milliseconds.
        order: 8
      certFilename:
        kind: property
        type: string
        javaType: java.lang.String
        deprecated: true
        secret: false
        description: Sets the resource path of the certificate to use for Authentication.
        order: 9
      certResource:
        kind: property
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Sets the resource path of the certificate to use for Authentication. Will use ResourceHelperKeyPairProvider to resolve file based certificate and depends on keyType setting.
        order: 10
    properties:
      host:
        kind: path
        group: common
        required: true
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Sets the hostname of the remote SSH server.
        order: 0
      port:
        kind: path
        group: common
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "22"
        description: Sets the port number for the remote SSH server.
        order: 1
      certResource:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Sets the resource path of the certificate to use for Authentication. Will use ResourceHelperKeyPairProvider to resolve file based certificate and depends on keyType setting.
        order: 2
      keyType:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        defaultValue: ssh-rsa
        description: Sets the key type to pass to the KeyPairProvider as part of authentication. KeyPairProvider.loadKey(...) will be passed this value. Defaults to ssh-rsa.
        order: 3
      password:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Sets the password to use in connecting to remote SSH server. Requires keyPairProvider to be set to null.
        order: 4
      timeout:
        kind: parameter
        group: common
        type: integer
        javaType: long
        deprecated: false
        secret: false
        defaultValue: "30000"
        description: Sets the timeout in milliseconds to wait in establishing the remote SSH server connection. Defaults to 30000 milliseconds.
        order: 5
      username:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Sets the username to use in logging into the remote SSH server.
        order: 6
      bridgeErrorHandler:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 7
      pollCommand:
        kind: parameter
        group: consumer
        label: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Sets the command string to send to the remote SSH server during every poll cycle. Only works with camel-ssh component being used as a consumer i.e. from(ssh://...) You may need to end your command with a newline and that must be URL encoded 0A
        order: 8
      sendEmptyMessageWhenIdle:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.
        order: 9
      exceptionHandler:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.ExceptionHandler
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 10
      exchangePattern:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.ExchangePattern
        enum:
        - InOnly
        - RobustInOnly
        - InOut
        - InOptionalOut
        - OutOnly
        - RobustOutOnly
        - OutIn
        - OutOptionalIn
        deprecated: false
        secret: false
        description: Sets the exchange pattern when the consumer creates an exchange.
        order: 11
      pollStrategy:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.PollingConsumerPollStrategy
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.
        order: 12
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 13
      backoffErrorThreshold:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.
        order: 14
      backoffIdleThreshold:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.
        order: 15
      backoffMultiplier:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.
        order: 16
      delay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: long
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: "500"
        description: Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
        order: 17
      greedy:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.
        order: 18
      initialDelay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: long
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: "1000"
        description: Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
        order: 19
      runLoggingLevel:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: org.apache.camel.LoggingLevel
        enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - OFF
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: TRACE
        description: The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.
        order: 20
      scheduledExecutorService:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: object
        javaType: java.util.concurrent.ScheduledExecutorService
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.
        order: 21
      scheduler:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: org.apache.camel.spi.ScheduledPollConsumerScheduler
        enum:
        - none
        - spring
        - quartz2
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: none
        description: To use a cron scheduler from either camel-spring or camel-quartz2 component
        order: 22
      schedulerProperties:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: object
        javaType: java.util.Map<java.lang.String,java.lang.Object>
        prefix: scheduler.
        multiValue: true
        deprecated: false
        secret: false
        description: To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.
        order: 23
      startScheduler:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether the scheduler should be auto started.
        order: 24
      timeUnit:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: java.util.concurrent.TimeUnit
        enum:
        - NANOSECONDS
        - MICROSECONDS
        - MILLISECONDS
        - SECONDS
        - MINUTES
        - HOURS
        - DAYS
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: MILLISECONDS
        description: Time unit for initialDelay and delay options.
        order: 25
      useFixedDelay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: true
        description: Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.
        order: 26
  documentation.adoc: |+
    [[SSH-SSH]]
    SSH
    ~~~

    *Available as of Camel 2.10*

    The SSH component enables access to SSH servers such that you can send
    an SSH command, and process the response.

    Maven users will need to add the following dependency to their `pom.xml`
    for this component:

    [source,xml]
    ------------------------------------------------------------
    <dependency>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-ssh</artifactId>
        <version>x.x.x</version>
        <!-- use the same version as your Camel core version -->
    </dependency>
    ------------------------------------------------------------

    [[SSH-URIformat]]
    URI format
    ^^^^^^^^^^

    [source,java]
    -----------------------------------------------
    ssh:[username[:password]@]host[:port][?options]
    -----------------------------------------------

    [[SSH-Options]]
    Options
    ^^^^^^^



    // component options: START
    The SSH component supports 11 options which are listed below.



    {% raw %}
    [width="100%",cols="2,1m,7",options="header"]
    |=======================================================================
    | Name | Java Type | Description
    | configuration | SshConfiguration | To use the shared SSH configuration
    | host | String | Sets the hostname of the remote SSH server.
    | port | int | Sets the port number for the remote SSH server.
    | username | String | Sets the username to use in logging into the remote SSH server.
    | password | String | Sets the password to use in connecting to remote SSH server. Requires keyPairProvider to be set to null.
    | pollCommand | String | Sets the command string to send to the remote SSH server during every poll cycle. Only works with camel-ssh component being used as a consumer i.e. from(ssh://...). You may need to end your command with a newline and that must be URL encoded 0A
    | keyPairProvider | KeyPairProvider | Sets the KeyPairProvider reference to use when connecting using Certificates to the remote SSH Server.
    | keyType | String | Sets the key type to pass to the KeyPairProvider as part of authentication. KeyPairProvider.loadKey(...) will be passed this value. Defaults to ssh-rsa.
    | timeout | long | Sets the timeout in milliseconds to wait in establishing the remote SSH server connection. Defaults to 30000 milliseconds.
    | certFilename | String | Sets the resource path of the certificate to use for Authentication.
    | certResource | String | Sets the resource path of the certificate to use for Authentication. Will use ResourceHelperKeyPairProvider to resolve file based certificate and depends on keyType setting.
    |=======================================================================
    {% endraw %}
    // component options: END




    // endpoint options: START
    The SSH component supports 27 endpoint options which are listed below:

    {% raw %}
    [width="100%",cols="2,1,1m,1m,5",options="header"]
    |=======================================================================
    | Name | Group | Default | Java Type | Description
    | host | common |  | String | *Required* Sets the hostname of the remote SSH server.
    | port | common | 22 | int | Sets the port number for the remote SSH server.
    | certResource | common |  | String | Sets the resource path of the certificate to use for Authentication. Will use ResourceHelperKeyPairProvider to resolve file based certificate and depends on keyType setting.
    | keyType | common | ssh-rsa | String | Sets the key type to pass to the KeyPairProvider as part of authentication. KeyPairProvider.loadKey(...) will be passed this value. Defaults to ssh-rsa.
    | password | common |  | String | Sets the password to use in connecting to remote SSH server. Requires keyPairProvider to be set to null.
    | timeout | common | 30000 | long | Sets the timeout in milliseconds to wait in establishing the remote SSH server connection. Defaults to 30000 milliseconds.
    | username | common |  | String | Sets the username to use in logging into the remote SSH server.
    | bridgeErrorHandler | consumer | false | boolean | Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
    | pollCommand | consumer |  | String | Sets the command string to send to the remote SSH server during every poll cycle. Only works with camel-ssh component being used as a consumer i.e. from(ssh://...) You may need to end your command with a newline and that must be URL encoded 0A
    | sendEmptyMessageWhenIdle | consumer | false | boolean | If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.
    | exceptionHandler | consumer (advanced) |  | ExceptionHandler | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
    | exchangePattern | consumer (advanced) |  | ExchangePattern | Sets the exchange pattern when the consumer creates an exchange.
    | pollStrategy | consumer (advanced) |  | PollingConsumerPollStrategy | A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.
    | synchronous | advanced | false | boolean | Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
    | backoffErrorThreshold | scheduler |  | int | The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.
    | backoffIdleThreshold | scheduler |  | int | The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.
    | backoffMultiplier | scheduler |  | int | To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.
    | delay | scheduler | 500 | long | Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
    | greedy | scheduler | false | boolean | If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.
    | initialDelay | scheduler | 1000 | long | Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
    | runLoggingLevel | scheduler | TRACE | LoggingLevel | The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.
    | scheduledExecutorService | scheduler |  | ScheduledExecutorService | Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.
    | scheduler | scheduler | none | ScheduledPollConsumerScheduler | To use a cron scheduler from either camel-spring or camel-quartz2 component
    | schedulerProperties | scheduler |  | Map | To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.
    | startScheduler | scheduler | true | boolean | Whether the scheduler should be auto started.
    | timeUnit | scheduler | MILLISECONDS | TimeUnit | Time unit for initialDelay and delay options.
    | useFixedDelay | scheduler | true | boolean | Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.
    |=======================================================================
    {% endraw %}
    // endpoint options: END


    [[SSH-UsageasaProducerendpoint]]
    Usage as a Producer endpoint
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    When the SSH Component is used as a Producer (`.to("ssh://...")`), it
    will send the message body as the command to execute on the remote SSH
    server.

    Here is an example of this within the XML DSL. Note that the command has
    an XML encoded newline (`&#10;`).

    [source,xml]
    ----------------------------------------------
    <route id="camel-example-ssh-producer">
      <from uri="direct:exampleSshProducer"/>
      <setBody>
        <constant>features:list&#10;</constant>
      </setBody>
      <to uri="ssh://karaf:karaf@localhost:8101"/>
      <log message="${body}"/>
    </route>
    ----------------------------------------------

    [[SSH-Authentication]]
    Authentication
    ^^^^^^^^^^^^^^

    The SSH Component can authenticate against the remote SSH server using
    one of two mechanisms: Public Key certificate or username/password.
    Configuring how the SSH Component does authentication is based on how
    and which options are set.

    1.  First, it will look to see if the `certResource` option has been
    set, and if so, use it to locate the referenced Public Key certificate
    and use that for authentication.
    2.  If `certResource` is not set, it will look to see if a
    `keyPairProvider` has been set, and if so, it will use that to for
    certificate based authentication.
    3.  If neither `certResource` nor `keyPairProvider` are set, it will use
    the `username` and `password` options for authentication.

    The following route fragment shows an SSH polling consumer using a
    certificate from the classpath.

    In the XML DSL,

    [source,xml]
    -------------------------------------------------------------------------------------------------------------------------------------------------
    <route>
      <from uri="ssh://scott@localhost:8101?certResource=classpath:test_rsa&amp;useFixedDelay=true&amp;delay=5000&amp;pollCommand=features:list%0A"/>
      <log message="${body}"/>
    </route>
    -------------------------------------------------------------------------------------------------------------------------------------------------

    In the Java DSL,

    [source,java]
    -----------------------------------------------------------------------------------------------------------------------------
    from("ssh://scott@localhost:8101?certResource=classpath:test_rsa&useFixedDelay=true&delay=5000&pollCommand=features:list%0A")
        .log("${body}");
    -----------------------------------------------------------------------------------------------------------------------------

    An example of using Public Key authentication is provided in
    `examples/camel-example-ssh-security`.

    [[SSH-CertificateDependencies]]
    Certificate Dependencies

    You will need to add some additional runtime dependencies if you use
    certificate based authentication. The dependency versions shown are as
    of Camel 2.11, you may need to use later versions depending what version
    of Camel you are using.

    [source,xml]
    -----------------------------------------
    <dependency>
      <groupId>org.apache.sshd</groupId>
      <artifactId>sshd-core</artifactId>
      <version>0.8.0</version>
    </dependency>
    <dependency>
      <groupId>org.bouncycastle</groupId>
      <artifactId>bcpg-jdk15on</artifactId>
      <version>1.47</version>
    </dependency>
    <dependency>
      <groupId>org.bouncycastle</groupId>
      <artifactId>bcpkix-jdk15on</artifactId>
      <version>1.47</version>
    </dependency>
    -----------------------------------------

    [[SSH-Example]]
    Example
    ^^^^^^^

    See the `examples/camel-example-ssh` and
    `examples/camel-example-ssh-security` in the Camel distribution.

    [[SSH-SeeAlso]]
    See Also
    ^^^^^^^^

    * link:configuring-camel.html[Configuring Camel]
    * link:component.html[Component]
    * link:endpoint.html[Endpoint]
    * link:getting-started.html[Getting Started]

