---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: servlet
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: servlet
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: servlet
        spec:
          containers:
          - image: funktion/connector-servlet:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: servlet
      extendsScheme: http
      syntax: servlet:contextPath
      title: Servlet
      description: To use a HTTP Servlet as entry for Camel routes when running in a servlet container.
      label: http
      deprecated: false
      async: false
      consumerOnly: true
      javaType: org.apache.camel.component.servlet.ServletComponent
      groupId: org.apache.camel
      artifactId: camel-servlet
      version: 2.18.3
    componentProperties:
      servletName:
        kind: property
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Default name of servlet to use. The default name is CamelServlet.
        order: 0
      httpRegistry:
        kind: property
        type: object
        javaType: org.apache.camel.component.servlet.HttpRegistry
        deprecated: false
        secret: false
        description: To use a custom org.apache.camel.component.servlet.HttpRegistry.
        order: 1
      attachmentMultipartBinding:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        description: Whether to automatic bind multipart/form-data as attachments on the Camel Exchange. This is turn off by default as this may require servlet specific configuration to enable this when using Servlet's.
        order: 2
      httpBinding:
        kind: property
        type: object
        javaType: org.apache.camel.http.common.HttpBinding
        deprecated: false
        secret: false
        description: To use a custom HttpBinding to control the mapping between Camel message and HttpClient.
        order: 3
      httpConfiguration:
        kind: property
        type: object
        javaType: org.apache.camel.http.common.HttpConfiguration
        deprecated: false
        secret: false
        description: To use the shared HttpConfiguration as base configuration.
        order: 4
      allowJavaSerializedObject:
        kind: property
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        description: Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk.
        order: 5
      headerFilterStrategy:
        kind: property
        type: object
        javaType: org.apache.camel.spi.HeaderFilterStrategy
        deprecated: false
        secret: false
        description: To use a custom HeaderFilterStrategy to filter header to and from Camel message.
        order: 6
    properties:
      contextPath:
        kind: path
        group: consumer
        label: consumer
        required: true
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: The context-path to use
        order: 0
      disableStreamCache:
        kind: parameter
        group: common
        label: common
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Determines whether or not the raw input stream from Servlet is cached or not (Camel will read the stream into a in memory/overflow to file Stream caching) cache. By default Camel will cache the Servlet input stream to support reading it multiple times to ensure it Camel can retrieve all data from the stream. However you can set this option to true when you for example need to access the raw stream such as streaming it directly to a file or other persistent store. DefaultHttpBinding will copy the request input stream into a stream cache and put it into message body if this option is false to support reading the stream multiple times. If you use Servlet to bridge/proxy an endpoint then consider enabling this option to improve performance in case you do not need to read the message payload multiple times. The http/http4 producer will by default cache the response body stream. If setting this option to true then the producers will not cache the response body stream but use the response stream as-is as the message body.
        order: 1
      async:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Configure the consumer to work in async mode
        order: 2
      bridgeErrorHandler:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 3
      chunked:
        kind: parameter
        group: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: If this option is false the Servlet will disable the HTTP streaming and set the content-length header on the response
        order: 4
      eagerCheckContentAvailable:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Whether to eager check whether the HTTP requests has content if the content-length header is 0 or not present. This can be turned on in case HTTP clients do not send streamed data.
        order: 5
      headerFilterStrategy:
        kind: parameter
        group: consumer
        type: object
        javaType: org.apache.camel.spi.HeaderFilterStrategy
        deprecated: false
        secret: false
        description: To use a custom HeaderFilterStrategy to filter header to and from Camel message.
        order: 6
      httpBinding:
        kind: parameter
        group: consumer
        type: object
        javaType: org.apache.camel.http.common.HttpBinding
        deprecated: false
        secret: false
        description: To use a custom HttpBinding to control the mapping between Camel message and HttpClient.
        order: 7
      httpMethodRestrict:
        kind: parameter
        group: consumer
        label: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Used to only allow consuming if the HttpMethod matches such as GET/POST/PUT etc. Multiple methods can be specified separated by comma.
        order: 8
      matchOnUriPrefix:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Whether or not the consumer should try to find a target consumer by matching the URI prefix if no exact match is found.
        order: 9
      optionsEnabled:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Specifies whether to enable HTTP OPTIONS for this Servlet consumer. By default OPTIONS is turned off.
        order: 10
      responseBufferSize:
        kind: parameter
        group: consumer
        label: consumer
        type: integer
        javaType: java.lang.Integer
        deprecated: false
        secret: false
        description: To use a custom buffer size on the javax.servlet.ServletResponse.
        order: 11
      servletName:
        kind: parameter
        group: consumer
        label: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        defaultValue: CamelServlet
        description: Name of the servlet to use
        order: 12
      traceEnabled:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Specifies whether to enable HTTP TRACE for this Servlet consumer. By default TRACE is turned off.
        order: 13
      transferException:
        kind: parameter
        group: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: If enabled and an Exchange failed processing on the consumer side and if the caused Exception was send back serialized in the response as a application/x-java-serialized-object content type. On the producer side the exception will be deserialized and thrown as is instead of the HttpOperationFailedException. The caused exception is required to be serialized. This is by default turned off. If you enable this then be aware that Java will deserialize the incoming data from the request to Java and that can be a potential security risk.
        order: 14
      attachmentMultipartBinding:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Whether to automatic bind multipart/form-data as attachments on the Camel Exchange. This is turn off by default as this may require servlet specific configuration to enable this when using Servlet's.
        order: 15
      exceptionHandler:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.ExceptionHandler
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 16
      exchangePattern:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.ExchangePattern
        enum:
        - InOnly
        - RobustInOnly
        - InOut
        - InOptionalOut
        - OutOnly
        - RobustOutOnly
        - OutIn
        - OutOptionalIn
        deprecated: false
        secret: false
        description: Sets the exchange pattern when the consumer creates an exchange.
        order: 17
      mapHttpMessageBody:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: If this option is true then IN exchange Body of the exchange will be mapped to HTTP body. Setting this to false will avoid the HTTP mapping.
        order: 18
      mapHttpMessageFormUrlEncodedBody:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: If this option is true then IN exchange Form Encoded body of the exchange will be mapped to HTTP. Setting this to false will avoid the HTTP Form Encoded body mapping.
        order: 19
      mapHttpMessageHeaders:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: If this option is true then IN exchange Headers of the exchange will be mapped to HTTP headers. Setting this to false will avoid the HTTP Headers mapping.
        order: 20
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 21
  documentation.adoc: "[[SERVLET-ServletComponent]]\nServlet Component\n~~~~~~~~~~~~~~~~~\n\
    \nThe *servlet:* component provides HTTP based\nlink:endpoint.html[endpoints]\
    \ for consuming HTTP requests that arrive at\na HTTP endpoint that is bound to\
    \ a published Servlet.\n\nMaven users will need to add the following dependency\
    \ to their `pom.xml`\nfor this component:\n\n[source,xml]\n---------------------------------------------------------------\n\
    <dependency>\n    <groupId>org.apache.camel</groupId>\n    <artifactId>camel-servlet</artifactId>\n\
    \    <version>x.x.x</version>\n    <\\!-\\- use the same version as your Camel\
    \ core version \\-->\n</dependency>\n---------------------------------------------------------------\n\
    \n\nINFO: *Stream*. \nServlet is stream based, which means the input it receives\
    \ is submitted\nto Camel as a stream. That means you will only be able to read\
    \ the\ncontent of the stream *once*. If you find a situation where the message\n\
    body appears to be empty or you need to access the data multiple times\n(eg: doing\
    \ multicasting, or redelivery error handling) you should use\nlink:stream-caching.html[Stream\
    \ caching] or convert the message body to\na `String` which is safe to be read\
    \ multiple times.\n\n[[SERVLET-URIformat]]\nURI format\n^^^^^^^^^^\n\n[source,java]\n\
    ---------------------------------\nservlet://relative_path[?options]\n---------------------------------\n\
    \nYou can append query options to the URI in the following format,\n`?option=value&option=value&...`\n\
    \n[[SERVLET-Options]]\nOptions\n^^^^^^^\n\n// component options: START\nThe Servlet\
    \ component supports 7 options which are listed below.\n\n\n\n{% raw %}\n[width=\"\
    100%\",cols=\"2,1m,7\",options=\"header\"]\n|=======================================================================\n\
    | Name | Java Type | Description\n| servletName | String | Default name of servlet\
    \ to use. The default name is CamelServlet.\n| httpRegistry | HttpRegistry | To\
    \ use a custom org.apache.camel.component.servlet.HttpRegistry.\n| attachmentMultipartBinding\
    \ | boolean | Whether to automatic bind multipart/form-data as attachments on\
    \ the Camel Exchange. This is turn off by default as this may require servlet\
    \ specific configuration to enable this when using Servlet's.\n| httpBinding |\
    \ HttpBinding | To use a custom HttpBinding to control the mapping between Camel\
    \ message and HttpClient.\n| httpConfiguration | HttpConfiguration | To use the\
    \ shared HttpConfiguration as base configuration.\n| allowJavaSerializedObject\
    \ | boolean | Whether to allow java serialization when a request uses context-type=application/x-java-serialized-object\
    \ This is by default turned off. If you enable this then be aware that Java will\
    \ deserialize the incoming data from the request to Java and that can be a potential\
    \ security risk.\n| headerFilterStrategy | HeaderFilterStrategy | To use a custom\
    \ HeaderFilterStrategy to filter header to and from Camel message.\n|=======================================================================\n\
    {% endraw %}\n// component options: END\n\n// endpoint options: START\nThe Servlet\
    \ component supports 22 endpoint options which are listed below:\n\n{% raw %}\n\
    [width=\"100%\",cols=\"2,1,1m,1m,5\",options=\"header\"]\n|=======================================================================\n\
    | Name | Group | Default | Java Type | Description\n| contextPath | consumer |\
    \  | String | *Required* The context-path to use\n| disableStreamCache | common\
    \ | false | boolean | Determines whether or not the raw input stream from Servlet\
    \ is cached or not (Camel will read the stream into a in memory/overflow to file\
    \ Stream caching) cache. By default Camel will cache the Servlet input stream\
    \ to support reading it multiple times to ensure it Camel can retrieve all data\
    \ from the stream. However you can set this option to true when you for example\
    \ need to access the raw stream such as streaming it directly to a file or other\
    \ persistent store. DefaultHttpBinding will copy the request input stream into\
    \ a stream cache and put it into message body if this option is false to support\
    \ reading the stream multiple times. If you use Servlet to bridge/proxy an endpoint\
    \ then consider enabling this option to improve performance in case you do not\
    \ need to read the message payload multiple times. The http/http4 producer will\
    \ by default cache the response body stream. If setting this option to true then\
    \ the producers will not cache the response body stream but use the response stream\
    \ as-is as the message body.\n| async | consumer | false | boolean | Configure\
    \ the consumer to work in async mode\n| bridgeErrorHandler | consumer | false\
    \ | boolean | Allows for bridging the consumer to the Camel routing Error Handler\
    \ which mean any exceptions occurred while the consumer is trying to pickup incoming\
    \ messages or the likes will now be processed as a message and handled by the\
    \ routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler\
    \ to deal with exceptions that will be logged at WARN/ERROR level and ignored.\n\
    | chunked | consumer | true | boolean | If this option is false the Servlet will\
    \ disable the HTTP streaming and set the content-length header on the response\n\
    | eagerCheckContentAvailable | consumer | false | boolean | Whether to eager check\
    \ whether the HTTP requests has content if the content-length header is 0 or not\
    \ present. This can be turned on in case HTTP clients do not send streamed data.\n\
    | headerFilterStrategy | consumer |  | HeaderFilterStrategy | To use a custom\
    \ HeaderFilterStrategy to filter header to and from Camel message.\n| httpBinding\
    \ | consumer |  | HttpBinding | To use a custom HttpBinding to control the mapping\
    \ between Camel message and HttpClient.\n| httpMethodRestrict | consumer |  |\
    \ String | Used to only allow consuming if the HttpMethod matches such as GET/POST/PUT\
    \ etc. Multiple methods can be specified separated by comma.\n| matchOnUriPrefix\
    \ | consumer | false | boolean | Whether or not the consumer should try to find\
    \ a target consumer by matching the URI prefix if no exact match is found.\n|\
    \ optionsEnabled | consumer | false | boolean | Specifies whether to enable HTTP\
    \ OPTIONS for this Servlet consumer. By default OPTIONS is turned off.\n| responseBufferSize\
    \ | consumer |  | Integer | To use a custom buffer size on the javax.servlet.ServletResponse.\n\
    | servletName | consumer | CamelServlet | String | Name of the servlet to use\n\
    | traceEnabled | consumer | false | boolean | Specifies whether to enable HTTP\
    \ TRACE for this Servlet consumer. By default TRACE is turned off.\n| transferException\
    \ | consumer | false | boolean | If enabled and an Exchange failed processing\
    \ on the consumer side and if the caused Exception was send back serialized in\
    \ the response as a application/x-java-serialized-object content type. On the\
    \ producer side the exception will be deserialized and thrown as is instead of\
    \ the HttpOperationFailedException. The caused exception is required to be serialized.\
    \ This is by default turned off. If you enable this then be aware that Java will\
    \ deserialize the incoming data from the request to Java and that can be a potential\
    \ security risk.\n| attachmentMultipartBinding | consumer (advanced) | false |\
    \ boolean | Whether to automatic bind multipart/form-data as attachments on the\
    \ Camel Exchange. This is turn off by default as this may require servlet specific\
    \ configuration to enable this when using Servlet's.\n| exceptionHandler | consumer\
    \ (advanced) |  | ExceptionHandler | To let the consumer use a custom ExceptionHandler.\
    \ Notice if the option bridgeErrorHandler is enabled then this options is not\
    \ in use. By default the consumer will deal with exceptions that will be logged\
    \ at WARN/ERROR level and ignored.\n| exchangePattern | consumer (advanced) |\
    \  | ExchangePattern | Sets the exchange pattern when the consumer creates an\
    \ exchange.\n| mapHttpMessageBody | advanced | true | boolean | If this option\
    \ is true then IN exchange Body of the exchange will be mapped to HTTP body. Setting\
    \ this to false will avoid the HTTP mapping.\n| mapHttpMessageFormUrlEncodedBody\
    \ | advanced | true | boolean | If this option is true then IN exchange Form Encoded\
    \ body of the exchange will be mapped to HTTP. Setting this to false will avoid\
    \ the HTTP Form Encoded body mapping.\n| mapHttpMessageHeaders | advanced | true\
    \ | boolean | If this option is true then IN exchange Headers of the exchange\
    \ will be mapped to HTTP headers. Setting this to false will avoid the HTTP Headers\
    \ mapping.\n| synchronous | advanced | false | boolean | Sets whether synchronous\
    \ processing should be strictly used or Camel is allowed to use asynchronous processing\
    \ (if supported).\n|=======================================================================\n\
    {% endraw %}\n// endpoint options: END\n\n[[SERVLET-MessageHeaders]]\nMessage\
    \ Headers\n^^^^^^^^^^^^^^^\n\nCamel will apply the same Message Headers as the\
    \ link:http.html[HTTP]\ncomponent.\n\nCamel will also populate *all* `request.parameter`\
    \ and\n`request.headers`. For example, if a client request has the URL,\n`http://myserver/myserver?orderid=123`,\
    \ the exchange will contain a\nheader named `orderid` with the value 123.\n\n\
    [[SERVLET-Usage]]\nUsage\n^^^^^\n\nYou can consume only from endpoints generated\
    \ by the Servlet component.\nTherefore, it should be used only as input into your\
    \ Camel routes. To\nissue HTTP requests against other HTTP endpoints, use the\n\
    link:http.html[HTTP Component]\n\n[[SERVLET-PuttingCamelJARsintheappserverbootclasspath]]\n\
    Putting Camel JARs in the app server boot classpath\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nIf you put the Camel JARs such as `camel-core`, `camel-servlet`, etc. in\nthe\
    \ boot classpath of your application server (eg usually in its lib\ndirectory),\
    \ then mind that the servlet mapping list is now shared\nbetween multiple deployed\
    \ Camel application in the app server.\n\nMind that putting Camel JARs in the\
    \ boot classpath of the application\nserver is generally not best practice!\n\n\
    So in those situations you *must* define a custom and unique servlet\nname in\
    \ each of your Camel application, eg in the `web.xml` define:\n\n[source,xml]\n\
    ---------------------------------------------------------------------------------------------\n\
    <servlet>\n  <servlet-name>MyServlet</servlet-name>\n  <servlet-class>org.apache.camel.component.servlet.CamelHttpTransportServlet</servlet-class>\n\
    \  <load-on-startup>1</load-on-startup>\n</servlet>\n\n<servlet-mapping>\n  <servlet-name>MyServlet</servlet-name>\n\
    \  <url-pattern>/*</url-pattern>\n</servlet-mapping>\n---------------------------------------------------------------------------------------------\n\
    \nAnd in your Camel endpoints then include the servlet name as well\n\n[source,xml]\n\
    ---------------------------------------------------\n<route>\n  <from uri=\"servlet://foo?servletName=MyServlet\"\
    />\n  ...\n</route>\n---------------------------------------------------\n\nFrom\
    \ *Camel 2.11* onwards Camel will detect this duplicate and fail to\nstart the\
    \ application. You can control to ignore this duplicate by\nsetting the servlet\
    \ init-parameter ignoreDuplicateServletName to true as\nfollows:\n\n[source,xml]\n\
    -----------------------------------------------------------------------------------------------\n\
    \  <servlet>\n    <servlet-name>CamelServlet</servlet-name>\n    <display-name>Camel\
    \ Http Transport Servlet</display-name>\n    <servlet-class>org.apache.camel.component.servlet.CamelHttpTransportServlet</servlet-class>\n\
    \    <init-param>\n      <param-name>ignoreDuplicateServletName</param-name>\n\
    \      <param-value>true</param-value>\n    </init-param>\n  </servlet>\n-----------------------------------------------------------------------------------------------\n\
    \nBut its *strongly advised* to use unique servlet-name for each Camel\napplication\
    \ to avoid this duplication clash, as well any unforeseen\nside-effects.\n\n[[SERVLET-Sample]]\n\
    Sample\n^^^^^^\n\nINFO: From Camel 2.7 onwards it's easier to use link:servlet.html[Servlet]\
    \ in\nSpring web applications. See link:servlet-tomcat-example.html[Servlet\n\
    Tomcat Example] for details.\n\nIn this sample, we define a route that exposes\
    \ a HTTP service at\n`http://localhost:8080/camel/services/hello`. +\n First,\
    \ you need to publish the\nhttp://svn.apache.org/repos/asf/camel/trunk/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/CamelHttpTransportServlet.java[CamelHttpTransportServlet]\n\
    through the normal Web Container, or OSGi Service. +\n Use the `Web.xml` file\
    \ to publish the\nhttp://svn.apache.org/repos/asf/camel/trunk/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/CamelHttpTransportServlet.java[CamelHttpTransportServlet]\n\
    as follows:\n\nThen you can define your route as follows:\n\nNOTE: *Specify the\
    \ relative path for camel-servlet endpoint*\nSince we are binding the Http transport\
    \ with a published servlet, and we\ndon't know the servlet's application context\
    \ path, the `camel-servlet`\nendpoint uses the relative path to specify the endpoint's\
    \ URL. A client\ncan access the `camel-servlet` endpoint through the servlet publish\n\
    address: `(\"http://localhost:8080/camel/services\") + RELATIVE_PATH(\"/hello\"\
    )`.\n\n[[SERVLET-SamplewhenusingSpring3.x]]\nSample when using Spring 3.x\n++++++++++++++++++++++++++++\n\
    \nSee link:servlet-tomcat-example.html[Servlet Tomcat Example]\n\n[[SERVLET-SamplewhenusingSpring2.x]]\n\
    Sample when using Spring 2.x\n++++++++++++++++++++++++++++\n\nWhen using the Servlet\
    \ component in a Camel/Spring application it's\noften required to load the Spring\
    \ ApplicationContext _after_ the Servlet\ncomponent has started. This can be accomplished\
    \ by using Spring's\n`ContextLoaderServlet` instead of `ContextLoaderListener`.\
    \ In that case\nyou'll need to start `ContextLoaderServlet` after\nhttp://svn.apache.org/repos/asf/camel/trunk/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/CamelHttpTransportServlet.java[CamelHttpTransportServlet]\n\
    like this:\n\n[source,xml]\n-------------------------------------------------------------------------\n\
    \ \n<web-app>\n  <servlet> \n        <servlet-name>CamelServlet</servlet-name>\
    \ \n        <servlet-class> \n            org.apache.camel.component.servlet.CamelHttpTransportServlet\
    \ \n        </servlet-class> \n        <load-on-startup>1</load-on-startup> \n\
    \  </servlet> \n  <servlet> \n        <servlet-name>SpringApplicationContext</servlet-name>\
    \ \n        <servlet-class> \n            org.springframework.web.context.ContextLoaderServlet\
    \ \n        </servlet-class> \n        <load-on-startup>2</load-on-startup> \n\
    \  </servlet> \n<web-app>\n-------------------------------------------------------------------------\n\
    \n[[SERVLET-SamplewhenusingOSGi]]\nSample when using OSGi\n++++++++++++++++++++++\n\
    \nFrom *Camel 2.6.0*, you can publish the\nhttp://svn.apache.org/repos/asf/camel/trunk/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/CamelHttpTransportServlet.java[CamelHttpTransportServlet]\n\
    as an OSGi service with help of SpringDM like this.\n\nThen use this service in\
    \ your camel route like this:\n\nFor versions prior to Camel 2.6 you can use an\
    \ `Activator` to publish\nthe\nhttp://svn.apache.org/repos/asf/camel/trunk/components/camel-servlet/src/main/java/org/apache/camel/component/servlet/CamelHttpTransportServlet.java[CamelHttpTransportServlet]\n\
    on the OSGi platform\n\n[[SERVLET-SeeAlso]]\nSee Also\n^^^^^^^^\n\n* link:configuring-camel.html[Configuring\
    \ Camel]\n* link:component.html[Component]\n* link:endpoint.html[Endpoint]\n*\
    \ link:getting-started.html[Getting Started]\n\n* link:servlet-tomcat-example.html[Servlet\
    \ Tomcat Example]\n* link:servlet-tomcat-no-spring-example.html[Servlet Tomcat\
    \ No Spring\nExample]\n* link:http.html[HTTP]\n* link:jetty.html[Jetty]\n\n"
