---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: rss
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: rss
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: rss
        spec:
          containers:
          - image: funktion/connector-rss:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: rss
      extendsScheme: atom
      syntax: rss:feedUri
      title: RSS
      description: The rss component is used for consuming RSS feeds.
      label: rss
      deprecated: false
      async: false
      consumerOnly: true
      lenientProperties: true
      javaType: org.apache.camel.component.rss.RssComponent
      groupId: org.apache.camel
      artifactId: camel-rss
      version: 2.18.3
    componentProperties: {}
    properties:
      feedUri:
        kind: path
        group: consumer
        required: true
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: The URI to the feed to poll.
        order: 0
      bridgeErrorHandler:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 1
      feedHeader:
        kind: parameter
        group: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Sets whether to add the feed object as a header
        order: 2
      filter:
        kind: parameter
        group: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Sets whether to use filtering or not of the entries.
        order: 3
      lastUpdate:
        kind: parameter
        group: consumer
        type: string
        javaType: java.util.Date
        deprecated: false
        secret: false
        description: Sets the timestamp to be used for filtering entries from the atom feeds. This options is only in conjunction with the splitEntries.
        order: 4
      password:
        kind: parameter
        group: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Sets the password to be used for basic authentication when polling from a HTTP feed
        order: 5
      sendEmptyMessageWhenIdle:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.
        order: 6
      sortEntries:
        kind: parameter
        group: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether to sort entries by published date. Only works when splitEntries = true.
        order: 7
      splitEntries:
        kind: parameter
        group: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Sets whether or not entries should be sent individually or whether the entire feed should be sent as a single message
        order: 8
      throttleEntries:
        kind: parameter
        group: consumer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Sets whether all entries identified in a single feed poll should be delivered immediately. If true only one entry is processed per consumer.delay. Only applicable when splitEntries = true.
        order: 9
      username:
        kind: parameter
        group: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Sets the username to be used for basic authentication when polling from a HTTP feed
        order: 10
      exceptionHandler:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.ExceptionHandler
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 11
      exchangePattern:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.ExchangePattern
        enum:
        - InOnly
        - RobustInOnly
        - InOut
        - InOptionalOut
        - OutOnly
        - RobustOutOnly
        - OutIn
        - OutOptionalIn
        deprecated: false
        secret: false
        description: Sets the exchange pattern when the consumer creates an exchange.
        order: 12
      pollStrategy:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.PollingConsumerPollStrategy
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.
        order: 13
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 14
      backoffErrorThreshold:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.
        order: 15
      backoffIdleThreshold:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.
        order: 16
      backoffMultiplier:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.
        order: 17
      delay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: long
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: "500"
        description: Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
        order: 18
      greedy:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.
        order: 19
      initialDelay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: long
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: "1000"
        description: Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
        order: 20
      runLoggingLevel:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: org.apache.camel.LoggingLevel
        enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - OFF
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: TRACE
        description: The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.
        order: 21
      scheduledExecutorService:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: object
        javaType: java.util.concurrent.ScheduledExecutorService
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.
        order: 22
      scheduler:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: org.apache.camel.spi.ScheduledPollConsumerScheduler
        enum:
        - none
        - spring
        - quartz2
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: none
        description: To use a cron scheduler from either camel-spring or camel-quartz2 component
        order: 23
      schedulerProperties:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: object
        javaType: java.util.Map<java.lang.String,java.lang.Object>
        prefix: scheduler.
        multiValue: true
        deprecated: false
        secret: false
        description: To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.
        order: 24
      startScheduler:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether the scheduler should be auto started.
        order: 25
      timeUnit:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: java.util.concurrent.TimeUnit
        enum:
        - NANOSECONDS
        - MICROSECONDS
        - MILLISECONDS
        - SECONDS
        - MINUTES
        - HOURS
        - DAYS
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: MILLISECONDS
        description: Time unit for initialDelay and delay options.
        order: 26
      useFixedDelay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: true
        description: Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.
        order: 27
  documentation.adoc: "[[RSS-RSSComponent]]\nRSS Component\n~~~~~~~~~~~~~\n\nThe *rss:*\
    \ component is used for polling RSS feeds. Camel will default\npoll the feed every\
    \ 60th seconds.\n\nMaven users will need to add the following dependency to their\
    \ `pom.xml`\nfor this component:\n\n[source,xml]\n------------------------------------------------------------\n\
    <dependency>\n    <groupId>org.apache.camel</groupId>\n    <artifactId>camel-rss</artifactId>\n\
    \    <version>x.x.x</version>\n    <!-- use the same version as your Camel core\
    \ version -->\n</dependency>\n------------------------------------------------------------\n\
    \n*Note:* The component currently only supports polling (consuming) feeds.\n\n\
    NOTE: Camel-rss internally uses a\nhttp://svn.apache.org/repos/asf/servicemix/smx4/bundles/trunk/rome-1.0/[patched\n\
    version] of http://rometools.github.io/rome/[ROME] hosted on ServiceMix\nto solve\
    \ some OSGi https://issues.apache.org/jira/browse/SMX4-510[class\nloading issues].\n\
    \n[[RSS-URIformat]]\nURI format\n^^^^^^^^^^\n\n[source,java]\n----------\nrss:rssUri\n\
    ----------\n\nWhere `rssUri` is the URI to the RSS feed to poll.\n\nYou can append\
    \ query options to the URI in the following format,\n`?option=value&option=value&...`\n\
    \n[[RSS-Options]]\nOptions\n^^^^^^^\n\n\n// component options: START\nThe RSS\
    \ component has no options.\n// component options: END\n\n\n\n// endpoint options:\
    \ START\nThe RSS component supports 28 endpoint options which are listed below:\n\
    \n{% raw %}\n[width=\"100%\",cols=\"2,1,1m,1m,5\",options=\"header\"]\n|=======================================================================\n\
    | Name | Group | Default | Java Type | Description\n| feedUri | consumer |  |\
    \ String | *Required* The URI to the feed to poll.\n| bridgeErrorHandler | consumer\
    \ | false | boolean | Allows for bridging the consumer to the Camel routing Error\
    \ Handler which mean any exceptions occurred while the consumer is trying to pickup\
    \ incoming messages or the likes will now be processed as a message and handled\
    \ by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler\
    \ to deal with exceptions that will be logged at WARN/ERROR level and ignored.\n\
    | feedHeader | consumer | true | boolean | Sets whether to add the feed object\
    \ as a header\n| filter | consumer | true | boolean | Sets whether to use filtering\
    \ or not of the entries.\n| lastUpdate | consumer |  | Date | Sets the timestamp\
    \ to be used for filtering entries from the atom feeds. This options is only in\
    \ conjunction with the splitEntries.\n| password | consumer |  | String | Sets\
    \ the password to be used for basic authentication when polling from a HTTP feed\n\
    | sendEmptyMessageWhenIdle | consumer | false | boolean | If the polling consumer\
    \ did not poll any files you can enable this option to send an empty message (no\
    \ body) instead.\n| sortEntries | consumer | false | boolean | Sets whether to\
    \ sort entries by published date. Only works when splitEntries = true.\n| splitEntries\
    \ | consumer | true | boolean | Sets whether or not entries should be sent individually\
    \ or whether the entire feed should be sent as a single message\n| throttleEntries\
    \ | consumer | true | boolean | Sets whether all entries identified in a single\
    \ feed poll should be delivered immediately. If true only one entry is processed\
    \ per consumer.delay. Only applicable when splitEntries = true.\n| username |\
    \ consumer |  | String | Sets the username to be used for basic authentication\
    \ when polling from a HTTP feed\n| exceptionHandler | consumer (advanced) |  |\
    \ ExceptionHandler | To let the consumer use a custom ExceptionHandler. Notice\
    \ if the option bridgeErrorHandler is enabled then this options is not in use.\
    \ By default the consumer will deal with exceptions that will be logged at WARN/ERROR\
    \ level and ignored.\n| exchangePattern | consumer (advanced) |  | ExchangePattern\
    \ | Sets the exchange pattern when the consumer creates an exchange.\n| pollStrategy\
    \ | consumer (advanced) |  | PollingConsumerPollStrategy | A pluggable org.apache.camel.PollingConsumerPollingStrategy\
    \ allowing you to provide your custom implementation to control error handling\
    \ usually occurred during the poll operation before an Exchange have been created\
    \ and being routed in Camel.\n| synchronous | advanced | false | boolean | Sets\
    \ whether synchronous processing should be strictly used or Camel is allowed to\
    \ use asynchronous processing (if supported).\n| backoffErrorThreshold | scheduler\
    \ |  | int | The number of subsequent error polls (failed due some error) that\
    \ should happen before the backoffMultipler should kick-in.\n| backoffIdleThreshold\
    \ | scheduler |  | int | The number of subsequent idle polls that should happen\
    \ before the backoffMultipler should kick-in.\n| backoffMultiplier | scheduler\
    \ |  | int | To let the scheduled polling consumer backoff if there has been a\
    \ number of subsequent idles/errors in a row. The multiplier is then the number\
    \ of polls that will be skipped before the next actual attempt is happening again.\
    \ When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold\
    \ must also be configured.\n| delay | scheduler | 500 | long | Milliseconds before\
    \ the next poll. You can also specify time values using units such as 60s (60\
    \ seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).\n| greedy | scheduler\
    \ | false | boolean | If greedy is enabled then the ScheduledPollConsumer will\
    \ run immediately again if the previous run polled 1 or more messages.\n| initialDelay\
    \ | scheduler | 1000 | long | Milliseconds before the first poll starts. You can\
    \ also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes\
    \ and 30 seconds) and 1h (1 hour).\n| runLoggingLevel | scheduler | TRACE | LoggingLevel\
    \ | The consumer logs a start/complete log line when it polls. This option allows\
    \ you to configure the logging level for that.\n| scheduledExecutorService | scheduler\
    \ |  | ScheduledExecutorService | Allows for configuring a custom/shared thread\
    \ pool to use for the consumer. By default each consumer has its own single threaded\
    \ thread pool.\n| scheduler | scheduler | none | ScheduledPollConsumerScheduler\
    \ | To use a cron scheduler from either camel-spring or camel-quartz2 component\n\
    | schedulerProperties | scheduler |  | Map | To configure additional properties\
    \ when using a custom scheduler or any of the Quartz2 Spring based scheduler.\n\
    | startScheduler | scheduler | true | boolean | Whether the scheduler should be\
    \ auto started.\n| timeUnit | scheduler | MILLISECONDS | TimeUnit | Time unit\
    \ for initialDelay and delay options.\n| useFixedDelay | scheduler | true | boolean\
    \ | Controls if fixed delay or fixed rate is used. See ScheduledExecutorService\
    \ in JDK for details.\n|=======================================================================\n\
    {% endraw %}\n// endpoint options: END\n\n\n[[RSS-Exchangedatatypes]]\nExchange\
    \ data types\n^^^^^^^^^^^^^^^^^^^\n\nCamel initializes the In body on the Exchange\
    \ with a ROME `SyndFeed`.\nDepending on the value of the `splitEntries` flag,\
    \ Camel returns either\na `SyndFeed` with one `SyndEntry` or a `java.util.List`\
    \ of `SyndEntrys`.\n\n[width=\"100%\",cols=\"10%,10%,80%\",options=\"header\"\
    ,]\n|=======================================================================\n\
    |Option |Value |Behavior\n\n|`splitEntries` |`true` |A single entry from the current\
    \ feed is set in the exchange.\n\n|`splitEntries` |`false` |The entire list of\
    \ entries from the current feed is set in the exchange.\n|=======================================================================\n\
    \n[[RSS-MessageHeaders]]\nMessage Headers\n^^^^^^^^^^^^^^^\n\n[width=\"100%\"\
    ,cols=\"10%,90%\",options=\"header\",]\n|=======================================================================\n\
    |Header |Description\n\n|`CamelRssFeed` |The entire `SyncFeed` object.\n|=======================================================================\n\
    \n[[RSS-RSSDataformat]]\nRSS Dataformat\n^^^^^^^^^^^^^^\n\nThe RSS component ships\
    \ with an RSS dataformat that can be used to\nconvert between String (as XML)\
    \ and ROME RSS model objects.\n\n* marshal = from ROME `SyndFeed` to XML `String`\n\
    * unmarshal = from XML `String` to ROME `SyndFeed`\n\nA route using this would\
    \ look something like this:\n\nThe purpose of this feature is to make it possible\
    \ to use Camel's lovely\nbuilt-in expressions for manipulating RSS messages. As\
    \ shown below, an\nXPath expression can be used to filter the RSS message:\n\n\
    \nTIP: *Query parameters*\nIf the URL for the RSS feed uses query parameters,\
    \ this component will\nunderstand them as well, for example if the feed uses `alt=rss`,\
    \ then\nyou can for example do \n`from(\"rss:http://someserver.com/feeds/posts/default?alt=rss&splitEntries=false&consumer.delay=1000\"\
    ).to(\"bean:rss\");`\n\n[[RSS-Filteringentries]]\nFiltering entries\n^^^^^^^^^^^^^^^^^\n\
    \nYou can filter out entries quite easily using XPath, as shown in the\ndata format\
    \ section above. You can also exploit Camel's\nlink:bean-integration.html[Bean\
    \ Integration] to implement your own\nconditions. For instance, a filter equivalent\
    \ to the XPath example above\nwould be:\n\nThe custom bean for this would be:\n\
    \n[[RSS-SeeAlso]]\nSee Also\n^^^^^^^^\n\n* link:configuring-camel.html[Configuring\
    \ Camel]\n* link:component.html[Component]\n* link:endpoint.html[Endpoint]\n*\
    \ link:getting-started.html[Getting Started]\n\n* link:atom.html[Atom]\n\n"
