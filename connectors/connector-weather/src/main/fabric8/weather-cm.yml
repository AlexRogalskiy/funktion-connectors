---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: weather
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: weather
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: weather
        spec:
          containers:
          - image: funktion/connector-weather:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: weather
      syntax: weather:name
      title: Weather
      description: Polls the weather information from Open Weather Map.
      label: api
      deprecated: false
      async: false
      javaType: org.apache.camel.component.weather.WeatherComponent
      groupId: org.apache.camel
      artifactId: camel-weather
      version: 2.18.3
    componentProperties: {}
    properties:
      name:
        kind: path
        group: common
        required: true
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: The name value is not used.
        order: 0
      appid:
        kind: parameter
        group: common
        required: true
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: APPID ID used to authenticate the user connected to the API Server
        order: 1
      headerName:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: To store the weather result in this header instead of the message body. This is useable if you want to keep current message body as-is.
        order: 2
      language:
        kind: parameter
        group: common
        type: string
        javaType: org.apache.camel.component.weather.WeatherLanguage
        enum:
        - en
        - ru
        - it
        - es
        - sp
        - uk
        - ua
        - de
        - pt
        - ro
        - pl
        - fi
        - nl
        - fr
        - bg
        - sv
        - se
        - zh_tw
        - zh
        - zh_cn
        - tr
        - hr
        - ca
        deprecated: false
        secret: false
        defaultValue: en
        description: Language of the response.
        order: 3
      mode:
        kind: parameter
        group: common
        type: string
        javaType: org.apache.camel.component.weather.WeatherMode
        enum:
        - HTML
        - JSON
        - XML
        deprecated: false
        secret: false
        defaultValue: JSON
        description: The output format of the weather data.
        order: 4
      period:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: If null the current weather will be returned else use values of 5 7 14 days. Only the numeric value for the forecast period is actually parsed so spelling capitalisation of the time period is up to you (its ignored)
        order: 5
      units:
        kind: parameter
        group: common
        type: string
        javaType: org.apache.camel.component.weather.WeatherUnits
        enum:
        - IMPERIAL
        - METRIC
        deprecated: false
        secret: false
        description: The units for temperature measurement.
        order: 6
      weatherApi:
        kind: parameter
        group: common
        type: string
        javaType: org.apache.camel.component.weather.WeatherApi
        enum:
        - Current
        - Station
        - Hourly
        - Daily
        deprecated: false
        secret: false
        description: The API to be use (current forecast/3 hour forecast daily station)
        order: 7
      bridgeErrorHandler:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 8
      sendEmptyMessageWhenIdle:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.
        order: 9
      exceptionHandler:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.ExceptionHandler
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 10
      exchangePattern:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.ExchangePattern
        enum:
        - InOnly
        - RobustInOnly
        - InOut
        - InOptionalOut
        - OutOnly
        - RobustOutOnly
        - OutIn
        - OutOptionalIn
        deprecated: false
        secret: false
        description: Sets the exchange pattern when the consumer creates an exchange.
        order: 11
      pollStrategy:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.PollingConsumerPollStrategy
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.
        order: 12
      httpConnectionManager:
        kind: parameter
        group: advanced
        label: advanced
        type: object
        javaType: org.apache.commons.httpclient.HttpConnectionManager
        deprecated: false
        secret: false
        description: To use a custom HttpConnectionManager to manage connections
        order: 13
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 14
      backoffErrorThreshold:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.
        order: 15
      backoffIdleThreshold:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.
        order: 16
      backoffMultiplier:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.
        order: 17
      delay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: long
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: "500"
        description: Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
        order: 18
      greedy:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.
        order: 19
      initialDelay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: long
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: "1000"
        description: Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
        order: 20
      runLoggingLevel:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: org.apache.camel.LoggingLevel
        enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - OFF
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: TRACE
        description: The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.
        order: 21
      scheduledExecutorService:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: object
        javaType: java.util.concurrent.ScheduledExecutorService
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.
        order: 22
      scheduler:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: org.apache.camel.spi.ScheduledPollConsumerScheduler
        enum:
        - none
        - spring
        - quartz2
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: none
        description: To use a cron scheduler from either camel-spring or camel-quartz2 component
        order: 23
      schedulerProperties:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: object
        javaType: java.util.Map<java.lang.String,java.lang.Object>
        prefix: scheduler.
        multiValue: true
        deprecated: false
        secret: false
        description: To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.
        order: 24
      startScheduler:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether the scheduler should be auto started.
        order: 25
      timeUnit:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: java.util.concurrent.TimeUnit
        enum:
        - NANOSECONDS
        - MICROSECONDS
        - MILLISECONDS
        - SECONDS
        - MINUTES
        - HOURS
        - DAYS
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: MILLISECONDS
        description: Time unit for initialDelay and delay options.
        order: 26
      useFixedDelay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: true
        description: Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.
        order: 27
      cnt:
        kind: parameter
        group: filter
        label: filter
        type: integer
        javaType: java.lang.Integer
        deprecated: false
        secret: false
        description: Number of results to be found
        order: 28
      ids:
        kind: parameter
        group: filter
        label: filter
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: List of id's of city/stations. You can separate multiple ids by comma.
        order: 29
      lat:
        kind: parameter
        group: filter
        label: filter
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Latitude of location. You can use lat and lon options instead of location. For boxed queries this is the bottom latitude.
        order: 30
      location:
        kind: parameter
        group: filter
        label: filter
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: If null Camel will try and determine your current location using the geolocation of your ip address else specify the citycountry. For well known city names Open Weather Map will determine the best fit but multiple results may be returned. Hence specifying and country as well will return more accurate data. If you specify current as the location then the component will try to get the current latitude and longitude and use that to get the weather details. You can use lat and lon options instead of location.
        order: 31
      lon:
        kind: parameter
        group: filter
        label: filter
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Longitude of location. You can use lat and lon options instead of location. For boxed queries this is the left longtitude.
        order: 32
      rightLon:
        kind: parameter
        group: filter
        label: filter
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: For boxed queries this is the right longtitude. Needs to be used in combination with topLat and zoom.
        order: 33
      topLat:
        kind: parameter
        group: filter
        label: filter
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: For boxed queries this is the top latitude. Needs to be used in combination with rightLon and zoom.
        order: 34
      zip:
        kind: parameter
        group: filter
        label: filter
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Zip-code e.g. 94040us
        order: 35
      zoom:
        kind: parameter
        group: filter
        label: filter
        type: integer
        javaType: java.lang.Integer
        deprecated: false
        secret: false
        description: For boxed queries this is the zoom. Needs to be used in combination with rightLon and topLat.
        order: 36
      proxyAuthDomain:
        kind: parameter
        group: proxy
        label: proxy
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Domain for proxy NTLM authentication
        order: 37
      proxyAuthHost:
        kind: parameter
        group: proxy
        label: proxy
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Optional host for proxy NTLM authentication
        order: 38
      proxyAuthMethod:
        kind: parameter
        group: proxy
        label: proxy
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Authentication method for proxy either as Basic Digest or NTLM.
        order: 39
      proxyAuthPassword:
        kind: parameter
        group: proxy
        label: proxy
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Password for proxy authentication
        order: 40
      proxyAuthUsername:
        kind: parameter
        group: proxy
        label: proxy
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Username for proxy authentication
        order: 41
      proxyHost:
        kind: parameter
        group: proxy
        label: proxy
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: The proxy host name
        order: 42
      proxyPort:
        kind: parameter
        group: proxy
        label: proxy
        type: integer
        javaType: java.lang.Integer
        deprecated: false
        secret: false
        description: The proxy port number
        order: 43
  documentation.adoc: |
    [[Weather-WeatherComponent]]
    Weather Component
    ~~~~~~~~~~~~~~~~~

    *Available as of Camel 2.12*

    The *weather:* component is used for polling weather information from
    http://openweathermap.org[Open Weather Map] - a site that provides free
    global weather and forecast information. The information is returned as
    a json String object.

    Camel will poll for updates to the current weather and forecasts once
    per hour by default. It can also be used to query the weather api based
    on the parameters defined on the endpoint which is used as producer.

    Maven users will need to add the following dependency to their `pom.xml`
    for this component:

    [source,xml]
    ------------------------------------------------------------
    <dependency>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-weather</artifactId>
        <version>x.x.x</version>
        <!-- use the same version as your Camel core version -->
    </dependency>
    ------------------------------------------------------------

    [[Weather-URIformat]]
    URI format
    ^^^^^^^^^^

    [source,java]
    ---------------------------------
    weather://<unused name>[?options]
    ---------------------------------

    [[Weather-REMARK]]
    REMARK
    ^^^^^^

    Since the 9th of October, an Api Key is required to access the
    openweather service. This key is passed as parameter to the URI
    definition of the weather endpoint using the appid param !

    [[Weather-Options]]
    Options
    ^^^^^^^


    // component options: START
    The Weather component has no options.
    // component options: END



    // endpoint options: START
    The Weather component supports 44 endpoint options which are listed below:

    {% raw %}
    [width="100%",cols="2,1,1m,1m,5",options="header"]
    |=======================================================================
    | Name | Group | Default | Java Type | Description
    | name | common |  | String | *Required* The name value is not used.
    | appid | common |  | String | *Required* APPID ID used to authenticate the user connected to the API Server
    | headerName | common |  | String | To store the weather result in this header instead of the message body. This is useable if you want to keep current message body as-is.
    | language | common | en | WeatherLanguage | Language of the response.
    | mode | common | JSON | WeatherMode | The output format of the weather data.
    | period | common |  | String | If null the current weather will be returned else use values of 5 7 14 days. Only the numeric value for the forecast period is actually parsed so spelling capitalisation of the time period is up to you (its ignored)
    | units | common |  | WeatherUnits | The units for temperature measurement.
    | weatherApi | common |  | WeatherApi | The API to be use (current forecast/3 hour forecast daily station)
    | bridgeErrorHandler | consumer | false | boolean | Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
    | sendEmptyMessageWhenIdle | consumer | false | boolean | If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.
    | exceptionHandler | consumer (advanced) |  | ExceptionHandler | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
    | exchangePattern | consumer (advanced) |  | ExchangePattern | Sets the exchange pattern when the consumer creates an exchange.
    | pollStrategy | consumer (advanced) |  | PollingConsumerPollStrategy | A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.
    | httpConnectionManager | advanced |  | HttpConnectionManager | To use a custom HttpConnectionManager to manage connections
    | synchronous | advanced | false | boolean | Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
    | backoffErrorThreshold | scheduler |  | int | The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.
    | backoffIdleThreshold | scheduler |  | int | The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.
    | backoffMultiplier | scheduler |  | int | To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.
    | delay | scheduler | 500 | long | Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
    | greedy | scheduler | false | boolean | If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.
    | initialDelay | scheduler | 1000 | long | Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
    | runLoggingLevel | scheduler | TRACE | LoggingLevel | The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.
    | scheduledExecutorService | scheduler |  | ScheduledExecutorService | Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.
    | scheduler | scheduler | none | ScheduledPollConsumerScheduler | To use a cron scheduler from either camel-spring or camel-quartz2 component
    | schedulerProperties | scheduler |  | Map | To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.
    | startScheduler | scheduler | true | boolean | Whether the scheduler should be auto started.
    | timeUnit | scheduler | MILLISECONDS | TimeUnit | Time unit for initialDelay and delay options.
    | useFixedDelay | scheduler | true | boolean | Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.
    | cnt | filter |  | Integer | Number of results to be found
    | ids | filter |  | String | List of id's of city/stations. You can separate multiple ids by comma.
    | lat | filter |  | String | Latitude of location. You can use lat and lon options instead of location. For boxed queries this is the bottom latitude.
    | location | filter |  | String | If null Camel will try and determine your current location using the geolocation of your ip address else specify the citycountry. For well known city names Open Weather Map will determine the best fit but multiple results may be returned. Hence specifying and country as well will return more accurate data. If you specify current as the location then the component will try to get the current latitude and longitude and use that to get the weather details. You can use lat and lon options instead of location.
    | lon | filter |  | String | Longitude of location. You can use lat and lon options instead of location. For boxed queries this is the left longtitude.
    | rightLon | filter |  | String | For boxed queries this is the right longtitude. Needs to be used in combination with topLat and zoom.
    | topLat | filter |  | String | For boxed queries this is the top latitude. Needs to be used in combination with rightLon and zoom.
    | zip | filter |  | String | Zip-code e.g. 94040us
    | zoom | filter |  | Integer | For boxed queries this is the zoom. Needs to be used in combination with rightLon and topLat.
    | proxyAuthDomain | proxy |  | String | Domain for proxy NTLM authentication
    | proxyAuthHost | proxy |  | String | Optional host for proxy NTLM authentication
    | proxyAuthMethod | proxy |  | String | Authentication method for proxy either as Basic Digest or NTLM.
    | proxyAuthPassword | proxy |  | String | Password for proxy authentication
    | proxyAuthUsername | proxy |  | String | Username for proxy authentication
    | proxyHost | proxy |  | String | The proxy host name
    | proxyPort | proxy |  | Integer | The proxy port number
    |=======================================================================
    {% endraw %}
    // endpoint options: END


    You can append query options to the URI in the following format,
    `?option=value&option=value&...`

    [[Weather-Exchangedataformat]]
    Exchange data format
    ^^^^^^^^^^^^^^^^^^^^

    Camel will deliver the body as a json formatted java.lang.String (see
    the `mode` option above).

    [[Weather-MessageHeaders]]
    Message Headers
    ^^^^^^^^^^^^^^^

    [width="100%",cols="10%,90%",options="header",]
    |=======================================================================
    |Header |Description

    |`CamelWeatherQuery` |The original query URL sent to the Open Weather Map site

    |`CamelWeatherLocation` |Used by the producer to override the endpoint location and use the
    location from this header instead.
    |=======================================================================

    [[Weather-Samples]]
    Samples
    ^^^^^^^

    In this sample we find the 7 day weather forecast for Madrid, Spain:

    [source,java]
    ---------------------------------------------------------------------------------------------
    from("weather:foo?location=Madrid,Spain&period=7 days&appid=APIKEY").to("jms:queue:weather");
    ---------------------------------------------------------------------------------------------

    To just find the current weather for your current location you can use
    this:

    [source,java]
    ---------------------------------------------------------
    from("weather:foo?appid=APIKEY").to("jms:queue:weather");
    ---------------------------------------------------------

    And to find the weather using the producer we do:

    [source,java]
    --------------------------------------------------------
    from("direct:start")
      .to("weather:foo?location=Madrid,Spain&appid=APIKEY");
    --------------------------------------------------------

    And we can send in a message with a header to get the weather for any
    location as shown:

    [source,java]
    -------------------------------------------------------------------------------------------------------------------------------------
      String json = template.requestBodyAndHeader("direct:start", "", "CamelWeatherLocation", "Paris,France&appid=APIKEY", String.class);
    -------------------------------------------------------------------------------------------------------------------------------------

    And to get the weather at the current location, then:

    [source,java]
    --------------------------------------------------------------------------------------------------------------------------------
      String json = template.requestBodyAndHeader("direct:start", "", "CamelWeatherLocation", "current&appid=APIKEY", String.class);
    --------------------------------------------------------------------------------------------------------------------------------
