---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: snmp
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: snmp
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: snmp
        spec:
          containers:
          - image: funktion/connector-snmp:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: snmp
      syntax: snmp:host:port
      title: SNMP
      description: The snmp component gives you the ability to poll SNMP capable devices or receiving traps.
      label: monitoring
      deprecated: false
      async: false
      consumerOnly: true
      javaType: org.apache.camel.component.snmp.SnmpComponent
      groupId: org.apache.camel
      artifactId: camel-snmp
      version: 2.18.3
    componentProperties: {}
    properties:
      host:
        kind: path
        group: consumer
        required: true
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Hostname of the SNMP enabled device
        order: 0
      port:
        kind: path
        group: consumer
        required: true
        type: integer
        javaType: java.lang.Integer
        deprecated: false
        secret: false
        description: Port number of the SNMP enabled device
        order: 1
      bridgeErrorHandler:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 2
      delay:
        kind: parameter
        group: consumer
        label: consumer
        type: integer
        javaType: long
        deprecated: false
        secret: false
        defaultValue: "60000"
        description: Sets update rate in seconds
        order: 3
      oids:
        kind: parameter
        group: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: 'Defines which values you are interested in. Please have a look at
          the Wikipedia to get a better understanding. You may provide a single OID or
          a coma separated list of OIDs. Example: oids=1.3.6.1.2.1.1.3.01.3.6.1.2.1.25.3.2.1.5.11.3.6.1.2.1.25.3.5.1.1.11.3.6.1.2.1.43.5.1.1.11.1'
        order: 4
      protocol:
        kind: parameter
        group: consumer
        type: string
        javaType: java.lang.String
        enum:
        - tcp
        - udp
        deprecated: false
        secret: false
        defaultValue: udp
        description: Here you can select which protocol to use. You can use either udp or tcp.
        order: 5
      retries:
        kind: parameter
        group: consumer
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "2"
        description: Defines how often a retry is made before canceling the request.
        order: 6
      sendEmptyMessageWhenIdle:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.
        order: 7
      snmpCommunity:
        kind: parameter
        group: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        defaultValue: public
        description: Sets the community octet string for the snmp request.
        order: 8
      snmpContextEngineId:
        kind: parameter
        group: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Sets the context engine ID field of the scoped PDU.
        order: 9
      snmpContextName:
        kind: parameter
        group: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Sets the context name field of this scoped PDU.
        order: 10
      snmpVersion:
        kind: parameter
        group: consumer
        type: string
        javaType: int
        enum:
        - "0"
        - "1"
        - "3"
        deprecated: false
        secret: false
        defaultValue: "0"
        description: Sets the snmp version for the request. The value 0 means SNMPv1 1 means SNMPv2c and the value 3 means SNMPv3
        order: 11
      timeout:
        kind: parameter
        group: consumer
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "1500"
        description: Sets the timeout value for the request in millis.
        order: 12
      type:
        kind: parameter
        group: consumer
        type: string
        javaType: org.apache.camel.component.snmp.SnmpActionType
        enum:
        - TRAP
        - POLL
        - GET_NEXT
        deprecated: false
        secret: false
        description: Which operation to perform such as poll trap etc.
        order: 13
      exceptionHandler:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.ExceptionHandler
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 14
      exchangePattern:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.ExchangePattern
        enum:
        - InOnly
        - RobustInOnly
        - InOut
        - InOptionalOut
        - OutOnly
        - RobustOutOnly
        - OutIn
        - OutOptionalIn
        deprecated: false
        secret: false
        description: Sets the exchange pattern when the consumer creates an exchange.
        order: 15
      pollStrategy:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.PollingConsumerPollStrategy
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.
        order: 16
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 17
      backoffErrorThreshold:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.
        order: 18
      backoffIdleThreshold:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.
        order: 19
      backoffMultiplier:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.
        order: 20
      greedy:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.
        order: 21
      initialDelay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: long
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: "1000"
        description: Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
        order: 22
      runLoggingLevel:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: org.apache.camel.LoggingLevel
        enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - OFF
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: TRACE
        description: The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.
        order: 23
      scheduledExecutorService:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: object
        javaType: java.util.concurrent.ScheduledExecutorService
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.
        order: 24
      scheduler:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: org.apache.camel.spi.ScheduledPollConsumerScheduler
        enum:
        - none
        - spring
        - quartz2
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: none
        description: To use a cron scheduler from either camel-spring or camel-quartz2 component
        order: 25
      schedulerProperties:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: object
        javaType: java.util.Map<java.lang.String,java.lang.Object>
        prefix: scheduler.
        multiValue: true
        deprecated: false
        secret: false
        description: To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.
        order: 26
      startScheduler:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether the scheduler should be auto started.
        order: 27
      timeUnit:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: java.util.concurrent.TimeUnit
        enum:
        - NANOSECONDS
        - MICROSECONDS
        - MILLISECONDS
        - SECONDS
        - MINUTES
        - HOURS
        - DAYS
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: MILLISECONDS
        description: Time unit for initialDelay and delay options.
        order: 28
      useFixedDelay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: true
        description: Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.
        order: 29
      authenticationPassphrase:
        kind: parameter
        group: security
        label: security
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: true
        description: The authentication passphrase. If not null authenticationProtocol must also be not null. RFC3414 11.2 requires passphrases to have a minimum length of 8 bytes. If the length of authenticationPassphrase is less than 8 bytes an IllegalArgumentException is thrown.
        order: 30
      authenticationProtocol:
        kind: parameter
        group: security
        label: security
        type: string
        javaType: java.lang.String
        enum:
        - MD5
        - SHA1
        deprecated: false
        secret: false
        description: 'Authentication protocol to use if security level is set to enable
          authentication The possible values are: MD5 SHA1'
        order: 31
      privacyPassphrase:
        kind: parameter
        group: security
        label: security
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: true
        description: The privacy passphrase. If not null privacyProtocol must also be not null. RFC3414 11.2 requires passphrases to have a minimum length of 8 bytes. If the length of authenticationPassphrase is less than 8 bytes an IllegalArgumentException is thrown.
        order: 32
      privacyProtocol:
        kind: parameter
        group: security
        label: security
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: true
        description: The privacy protocol ID to be associated with this user. If set to null this user only supports unencrypted messages.
        order: 33
      securityLevel:
        kind: parameter
        group: security
        label: security
        type: string
        javaType: int
        enum:
        - "1"
        - "2"
        - "3"
        deprecated: false
        secret: false
        defaultValue: "3"
        description: 'Sets the security level for this target. The supplied security level
          must be supported by the security model dependent information associated with
          the security name set for this target. The value 1 means: No authentication
          and no encryption. Anyone can create and read messages with this security level
          The value 2 means: Authentication and no encryption. Only the one with the right
          authentication key can create messages with this security level but anyone can
          read the contents of the message. The value 3 means: Authentication and encryption.
          Only the one with the right authentication key can create messages with this
          security level and only the one with the right encryption/decryption key can
          read the contents of the message.'
        order: 34
      securityName:
        kind: parameter
        group: security
        label: security
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: true
        description: Sets the security name to be used with this target.
        order: 35
  documentation.adoc: "[[SNMP-SNMPComponent]]\nSNMP Component\n~~~~~~~~~~~~~~\n\n\
    *Available as of Camel 2.1*\n\nThe *snmp:* component gives you the ability to\
    \ poll SNMP capable devices\nor receiving traps\n\nMaven users will need to add\
    \ the following dependency to their `pom.xml`\nfor this component:\n\n[source,xml]\n\
    ------------------------------------------------------------\n<dependency>\n \
    \   <groupId>org.apache.camel</groupId>\n    <artifactId>camel-snmp</artifactId>\n\
    \    <version>x.x.x</version>\n    <!-- use the same version as your Camel core\
    \ version -->\n</dependency>\n------------------------------------------------------------\n\
    \n[[SNMP-URIformat]]\nURI format\n^^^^^^^^^^\n\n[source,java]\n--------------------------------\n\
    snmp://hostname[:port][?Options]\n--------------------------------\n\nThe component\
    \ supports polling OID values from an SNMP enabled device\nand receiving traps.\n\
    \nYou can append query options to the URI in the following format,\n`?option=value&option=value&...`\n\
    \n[[SNMP-Producer]]\nSnmp Producer \n^^^^^^^^^^^^^\n\n*Available from 2.18 release*\n\
    \nIt can also be used to request information using GET method.\n\nThe response\
    \ body type is org.apache.camel.component.snmp.SnmpMessage\n\n[[SNMP-Options]]\n\
    Options\n^^^^^^^\n\n\n// component options: START\nThe SNMP component has no options.\n\
    // component options: END\n\n\n\n// endpoint options: START\nThe SNMP component\
    \ supports 36 endpoint options which are listed below:\n\n{% raw %}\n[width=\"\
    100%\",cols=\"2,1,1m,1m,5\",options=\"header\"]\n|=======================================================================\n\
    | Name | Group | Default | Java Type | Description\n| host | consumer |  | String\
    \ | *Required* Hostname of the SNMP enabled device\n| port | consumer |  | Integer\
    \ | *Required* Port number of the SNMP enabled device\n| bridgeErrorHandler |\
    \ consumer | false | boolean | Allows for bridging the consumer to the Camel routing\
    \ Error Handler which mean any exceptions occurred while the consumer is trying\
    \ to pickup incoming messages or the likes will now be processed as a message\
    \ and handled by the routing Error Handler. By default the consumer will use the\
    \ org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged\
    \ at WARN/ERROR level and ignored.\n| delay | consumer | 60000 | long | Sets update\
    \ rate in seconds\n| oids | consumer |  | String | Defines which values you are\
    \ interested in. Please have a look at the Wikipedia to get a better understanding.\
    \ You may provide a single OID or a coma separated list of OIDs. Example: oids=1.3.6.1.2.1.1.3.01.3.6.1.2.1.25.3.2.1.5.11.3.6.1.2.1.25.3.5.1.1.11.3.6.1.2.1.43.5.1.1.11.1\n\
    | protocol | consumer | udp | String | Here you can select which protocol to use.\
    \ You can use either udp or tcp.\n| retries | consumer | 2 | int | Defines how\
    \ often a retry is made before canceling the request.\n| sendEmptyMessageWhenIdle\
    \ | consumer | false | boolean | If the polling consumer did not poll any files\
    \ you can enable this option to send an empty message (no body) instead.\n| snmpCommunity\
    \ | consumer | public | String | Sets the community octet string for the snmp\
    \ request.\n| snmpContextEngineId | consumer |  | String | Sets the context engine\
    \ ID field of the scoped PDU.\n| snmpContextName | consumer |  | String | Sets\
    \ the context name field of this scoped PDU.\n| snmpVersion | consumer | 0 | int\
    \ | Sets the snmp version for the request. The value 0 means SNMPv1 1 means SNMPv2c\
    \ and the value 3 means SNMPv3\n| timeout | consumer | 1500 | int | Sets the timeout\
    \ value for the request in millis.\n| type | consumer |  | SnmpActionType | Which\
    \ operation to perform such as poll trap etc.\n| exceptionHandler | consumer (advanced)\
    \ |  | ExceptionHandler | To let the consumer use a custom ExceptionHandler. Notice\
    \ if the option bridgeErrorHandler is enabled then this options is not in use.\
    \ By default the consumer will deal with exceptions that will be logged at WARN/ERROR\
    \ level and ignored.\n| exchangePattern | consumer (advanced) |  | ExchangePattern\
    \ | Sets the exchange pattern when the consumer creates an exchange.\n| pollStrategy\
    \ | consumer (advanced) |  | PollingConsumerPollStrategy | A pluggable org.apache.camel.PollingConsumerPollingStrategy\
    \ allowing you to provide your custom implementation to control error handling\
    \ usually occurred during the poll operation before an Exchange have been created\
    \ and being routed in Camel.\n| synchronous | advanced | false | boolean | Sets\
    \ whether synchronous processing should be strictly used or Camel is allowed to\
    \ use asynchronous processing (if supported).\n| backoffErrorThreshold | scheduler\
    \ |  | int | The number of subsequent error polls (failed due some error) that\
    \ should happen before the backoffMultipler should kick-in.\n| backoffIdleThreshold\
    \ | scheduler |  | int | The number of subsequent idle polls that should happen\
    \ before the backoffMultipler should kick-in.\n| backoffMultiplier | scheduler\
    \ |  | int | To let the scheduled polling consumer backoff if there has been a\
    \ number of subsequent idles/errors in a row. The multiplier is then the number\
    \ of polls that will be skipped before the next actual attempt is happening again.\
    \ When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold\
    \ must also be configured.\n| greedy | scheduler | false | boolean | If greedy\
    \ is enabled then the ScheduledPollConsumer will run immediately again if the\
    \ previous run polled 1 or more messages.\n| initialDelay | scheduler | 1000 |\
    \ long | Milliseconds before the first poll starts. You can also specify time\
    \ values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds)\
    \ and 1h (1 hour).\n| runLoggingLevel | scheduler | TRACE | LoggingLevel | The\
    \ consumer logs a start/complete log line when it polls. This option allows you\
    \ to configure the logging level for that.\n| scheduledExecutorService | scheduler\
    \ |  | ScheduledExecutorService | Allows for configuring a custom/shared thread\
    \ pool to use for the consumer. By default each consumer has its own single threaded\
    \ thread pool.\n| scheduler | scheduler | none | ScheduledPollConsumerScheduler\
    \ | To use a cron scheduler from either camel-spring or camel-quartz2 component\n\
    | schedulerProperties | scheduler |  | Map | To configure additional properties\
    \ when using a custom scheduler or any of the Quartz2 Spring based scheduler.\n\
    | startScheduler | scheduler | true | boolean | Whether the scheduler should be\
    \ auto started.\n| timeUnit | scheduler | MILLISECONDS | TimeUnit | Time unit\
    \ for initialDelay and delay options.\n| useFixedDelay | scheduler | true | boolean\
    \ | Controls if fixed delay or fixed rate is used. See ScheduledExecutorService\
    \ in JDK for details.\n| authenticationPassphrase | security |  | String | The\
    \ authentication passphrase. If not null authenticationProtocol must also be not\
    \ null. RFC3414 11.2 requires passphrases to have a minimum length of 8 bytes.\
    \ If the length of authenticationPassphrase is less than 8 bytes an IllegalArgumentException\
    \ is thrown.\n| authenticationProtocol | security |  | String | Authentication\
    \ protocol to use if security level is set to enable authentication The possible\
    \ values are: MD5 SHA1\n| privacyPassphrase | security |  | String | The privacy\
    \ passphrase. If not null privacyProtocol must also be not null. RFC3414 11.2\
    \ requires passphrases to have a minimum length of 8 bytes. If the length of authenticationPassphrase\
    \ is less than 8 bytes an IllegalArgumentException is thrown.\n| privacyProtocol\
    \ | security |  | String | The privacy protocol ID to be associated with this\
    \ user. If set to null this user only supports unencrypted messages.\n| securityLevel\
    \ | security | 3 | int | Sets the security level for this target. The supplied\
    \ security level must be supported by the security model dependent information\
    \ associated with the security name set for this target. The value 1 means: No\
    \ authentication and no encryption. Anyone can create and read messages with this\
    \ security level The value 2 means: Authentication and no encryption. Only the\
    \ one with the right authentication key can create messages with this security\
    \ level but anyone can read the contents of the message. The value 3 means: Authentication\
    \ and encryption. Only the one with the right authentication key can create messages\
    \ with this security level and only the one with the right encryption/decryption\
    \ key can read the contents of the message.\n| securityName | security |  | String\
    \ | Sets the security name to be used with this target.\n|=======================================================================\n\
    {% endraw %}\n// endpoint options: END\n\n[[SNMP-Theresultofapoll]]\nThe result\
    \ of a poll\n^^^^^^^^^^^^^^^^^^^^\n\nGiven the situation, that I poll for the\
    \ following OIDs:\n\n*OIDs*\n\n[source,java]\n-------------------------\n1.3.6.1.2.1.1.3.0\n\
    1.3.6.1.2.1.25.3.2.1.5.1\n1.3.6.1.2.1.25.3.5.1.1.1\n1.3.6.1.2.1.43.5.1.1.11.1\n\
    -------------------------\n\nThe result will be the following:\n\n*Result of toString\
    \ conversion*\n\n[source,xml]\n-----------------------------------------------------------\n\
    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<snmp>\n  <entry>\n    <oid>1.3.6.1.2.1.1.3.0</oid>\n\
    \    <value>6 days, 21:14:28.00</value>\n  </entry>\n  <entry>\n    <oid>1.3.6.1.2.1.25.3.2.1.5.1</oid>\n\
    \    <value>2</value>\n  </entry>\n  <entry>\n    <oid>1.3.6.1.2.1.25.3.5.1.1.1</oid>\n\
    \    <value>3</value>\n  </entry>\n  <entry>\n    <oid>1.3.6.1.2.1.43.5.1.1.11.1</oid>\n\
    \    <value>6</value>\n  </entry>\n  <entry>\n    <oid>1.3.6.1.2.1.1.1.0</oid>\n\
    \    <value>My Very Special Printer Of Brand Unknown</value>\n  </entry>\n</snmp>\n\
    -----------------------------------------------------------\n\nAs you maybe recognized\
    \ there is one more result than\nrequested....1.3.6.1.2.1.1.1.0. +\n This one\
    \ is filled in by the device automatically in this special case.\nSo it may absolutely\
    \ happen, that you receive more than you\nrequested...be prepared.\n\n[[SNMP-Examples]]\n\
    Examples\n^^^^^^^^\n\nPolling a remote device:\n\n[source,java]\n---------------------------------------------------------------------\n\
    snmp:192.168.178.23:161?protocol=udp&type=POLL&oids=1.3.6.1.2.1.1.5.0\n---------------------------------------------------------------------\n\
    \nSetting up a trap receiver (*Note that no OID info is needed here!*):\n\n[source,java]\n\
    -----------------------------------------\nsnmp:127.0.0.1:162?protocol=udp&type=TRAP\n\
    -----------------------------------------\n\n*From Camel 2.10.0*, you can get\
    \ the community of SNMP TRAP with message\nheader 'securityName', +\n peer address\
    \ of the SNMP TRAP with message header 'peerAddress'.\n\nRouting example in Java:\
    \ (converts the SNMP PDU to XML String)\n\n[source,java]\n------------------------------------------------------------------------------\n\
    from(\"snmp:192.168.178.23:161?protocol=udp&type=POLL&oids=1.3.6.1.2.1.1.5.0\"\
    ).\nconvertBodyTo(String.class).\nto(\"activemq:snmp.states\");\n------------------------------------------------------------------------------\n\
    \n[[SNMP-SeeAlso]]\nSee Also\n^^^^^^^^\n\n* link:configuring-camel.html[Configuring\
    \ Camel]\n* link:component.html[Component]\n* link:endpoint.html[Endpoint]\n*\
    \ link:getting-started.html[Getting Started]\n\n"
