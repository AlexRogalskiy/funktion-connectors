---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: splunk
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: splunk
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: splunk
        spec:
          containers:
          - image: funktion/connector-splunk:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: splunk
      syntax: splunk:name
      title: Splunk
      description: The splunk component allows to publish or search for events in Splunk.
      label: monitoring
      deprecated: false
      async: false
      javaType: org.apache.camel.component.splunk.SplunkComponent
      groupId: org.apache.camel
      artifactId: camel-splunk
      version: 2.18.3
    componentProperties:
      splunkConfigurationFactory:
        kind: property
        type: object
        javaType: org.apache.camel.component.splunk.SplunkConfigurationFactory
        deprecated: false
        secret: false
        description: To use the SplunkConfigurationFactory
        order: 0
    properties:
      name:
        kind: path
        group: common
        required: true
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Name has no purpose
        order: 0
      app:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Splunk app
        order: 1
      connectionTimeout:
        kind: parameter
        group: common
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "5000"
        description: Timeout in MS when connecting to Splunk server
        order: 2
      host:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        defaultValue: localhost
        description: Splunk host.
        order: 3
      owner:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Splunk owner
        order: 4
      password:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Password for Splunk
        order: 5
      port:
        kind: parameter
        group: common
        type: integer
        javaType: int
        deprecated: false
        secret: false
        defaultValue: "8089"
        description: Splunk port
        order: 6
      scheme:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        defaultValue: https
        description: Splunk scheme
        order: 7
      sslProtocol:
        kind: parameter
        group: common
        type: string
        javaType: com.splunk.SSLSecurityProtocol
        enum:
        - TLSv1.2
        - TLSv1.1
        - TLSv1
        - SSLv3
        deprecated: false
        secret: false
        defaultValue: TLSv1.2
        description: Set the ssl protocol to use
        order: 8
      username:
        kind: parameter
        group: common
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Username for Splunk
        order: 9
      useSunHttpsHandler:
        kind: parameter
        group: common
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Use sun.net.www.protocol.https.Handler Https handler to establish the Splunk Connection. Can be useful when running in application servers to avoid app. server https handling.
        order: 10
      bridgeErrorHandler:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 11
      count:
        kind: parameter
        group: consumer
        label: consumer
        type: integer
        javaType: int
        deprecated: false
        secret: false
        description: A number that indicates the maximum number of entities to return.
        order: 12
      earliestTime:
        kind: parameter
        group: consumer
        label: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Earliest time of the search time window.
        order: 13
      initEarliestTime:
        kind: parameter
        group: consumer
        label: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Initial start offset of the first search
        order: 14
      latestTime:
        kind: parameter
        group: consumer
        label: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Latest time of the search time window.
        order: 15
      savedSearch:
        kind: parameter
        group: consumer
        label: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: The name of the query saved in Splunk to run
        order: 16
      search:
        kind: parameter
        group: consumer
        label: consumer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: The Splunk query to run
        order: 17
      sendEmptyMessageWhenIdle:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.
        order: 18
      streaming:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: java.lang.Boolean
        deprecated: false
        secret: false
        description: Sets streaming mode. Streaming mode sends exchanges as they are received rather than in a batch.
        order: 19
      exceptionHandler:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.ExceptionHandler
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 20
      exchangePattern:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.ExchangePattern
        enum:
        - InOnly
        - RobustInOnly
        - InOut
        - InOptionalOut
        - OutOnly
        - RobustOutOnly
        - OutIn
        - OutOptionalIn
        deprecated: false
        secret: false
        description: Sets the exchange pattern when the consumer creates an exchange.
        order: 21
      pollStrategy:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.PollingConsumerPollStrategy
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.
        order: 22
      eventHost:
        kind: parameter
        group: producer
        label: producer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Override the default Splunk event host field
        order: 23
      index:
        kind: parameter
        group: producer
        label: producer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Splunk index to write to
        order: 24
      raw:
        kind: parameter
        group: producer
        label: producer
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Should the payload be inserted raw
        order: 25
      source:
        kind: parameter
        group: producer
        label: producer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Splunk source argument
        order: 26
      sourceType:
        kind: parameter
        group: producer
        label: producer
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Splunk sourcetype argument
        order: 27
      tcpReceiverPort:
        kind: parameter
        group: producer
        label: producer
        type: integer
        javaType: int
        deprecated: false
        secret: false
        description: Splunk tcp receiver port
        order: 28
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 29
      backoffErrorThreshold:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.
        order: 30
      backoffIdleThreshold:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.
        order: 31
      backoffMultiplier:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.
        order: 32
      delay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: long
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: "500"
        description: Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
        order: 33
      greedy:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.
        order: 34
      initialDelay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: long
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: "1000"
        description: Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
        order: 35
      runLoggingLevel:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: org.apache.camel.LoggingLevel
        enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - OFF
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: TRACE
        description: The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.
        order: 36
      scheduledExecutorService:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: object
        javaType: java.util.concurrent.ScheduledExecutorService
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.
        order: 37
      scheduler:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: org.apache.camel.spi.ScheduledPollConsumerScheduler
        enum:
        - none
        - spring
        - quartz2
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: none
        description: To use a cron scheduler from either camel-spring or camel-quartz2 component
        order: 38
      schedulerProperties:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: object
        javaType: java.util.Map<java.lang.String,java.lang.Object>
        prefix: scheduler.
        multiValue: true
        deprecated: false
        secret: false
        description: To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.
        order: 39
      startScheduler:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether the scheduler should be auto started.
        order: 40
      timeUnit:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: java.util.concurrent.TimeUnit
        enum:
        - NANOSECONDS
        - MICROSECONDS
        - MILLISECONDS
        - SECONDS
        - MINUTES
        - HOURS
        - DAYS
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: MILLISECONDS
        description: Time unit for initialDelay and delay options.
        order: 41
      useFixedDelay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: true
        description: Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.
        order: 42
  documentation.adoc: "[[Splunk-SplunkComponent]]\nSplunk Component\n~~~~~~~~~~~~~~~~\n\
    \n*Available as of Camel 2.13*\n\nThe Splunk component provides access to\nhttp://docs.splunk.com/Documentation/Splunk/latest[Splunk]\
    \ using the\nSplunk provided https://github.com/splunk/splunk-sdk-java[client]\
    \ api,\nand it enables you to publish and search for events in Splunk.\n\nMaven\
    \ users will need to add the following dependency to their pom.xml\nfor this component:\n\
    \n[source,xml]\n---------------------------------------------\n <dependency>\n\
    \        <groupId>org.apache.camel</groupId>\n        <artifactId>camel-splunk</artifactId>\n\
    \        <version>${camel-version}</version>\n    </dependency>\n---------------------------------------------\n\
    \n[[Splunk-URIformat]]\nURI format\n^^^^^^^^^^\n\n[source,java]\n-------------------------------\n\
    \  splunk://[endpoint]?[options]\n-------------------------------\n\n[[Splunk-ProducerEndpoints:]]\n\
    Producer Endpoints:\n^^^^^^^^^^^^^^^^^^^\n\n[width=\"100%\",cols=\"10%,90%\",options=\"\
    header\",]\n|=======================================================================\n\
    |Endpoint |Description\n\n|stream |Streams data to a named index or the default\
    \ if not specified.\nWhen using stream mode be aware of that Splunk has some internal\
    \ buffer\n(about 1MB or so) before events gets to the index. \nIf you need realtime,\
    \ better use submit or tcp mode.\n\n|submit |submit mode. Uses Splunk rest api\
    \ to publish events to a named index or\nthe default if not specified.\n\n|tcp\
    \ |tcp mode. Streams data to a tcp port, and requires a open receiver port\nin\
    \ Splunk.\n|=======================================================================\n\
    \nWhen publishing events the message body should contain a\nSplunkEvent.\_\_See\
    \ comment under message body.\n\n*Example*\n\n[source,java]\n----------------------------------------------------------------------------------------------------------------------\n\
    \      from(\"direct:start\").convertBodyTo(SplunkEvent.class)\n          .to(\"\
    splunk://submit?username=user&password=123&index=myindex&sourceType=someSourceType&source=mySource\"\
    )...\n----------------------------------------------------------------------------------------------------------------------\n\
    \nIn this example a converter is required to convert to a SplunkEvent\nclass.\n\
    \n[[Splunk-ConsumerEndpoints:]]\nConsumer Endpoints:\n^^^^^^^^^^^^^^^^^^^\n\n\
    [width=\"100%\",cols=\"10%,90%\",options=\"header\",]\n|=======================================================================\n\
    |Endpoint |Description\n\n|normal |Performs normal search and requires a search\
    \ query in the search option.\n\n|savedsearch |Performs search based on a search\
    \ query saved in splunk and requires the\nname of the query in the savedSearch\
    \ option.\n|=======================================================================\n\
    \n*Example*\n\n[source,java]\n---------------------------------------------------------------------------------------------------------------------------------------------\n\
    \      from(\"splunk://normal?delay=5s&username=user&password=123&initEarliestTime=-10s&search=search\
    \ index=myindex sourcetype=someSourcetype\")\n          .to(\"direct:search-result\"\
    );\n---------------------------------------------------------------------------------------------------------------------------------------------\n\
    \ncamel-splunk creates a route exchange per search result with a\nSplunkEvent\
    \ in the body.\n\n[[Splunk-URIOptions]]\nURI Options\n^^^^^^^^^^^\n\n\n\n// component\
    \ options: START\nThe Splunk component supports 1 options which are listed below.\n\
    \n\n\n{% raw %}\n[width=\"100%\",cols=\"2,1m,7\",options=\"header\"]\n|=======================================================================\n\
    | Name | Java Type | Description\n| splunkConfigurationFactory | SplunkConfigurationFactory\
    \ | To use the SplunkConfigurationFactory\n|=======================================================================\n\
    {% endraw %}\n// component options: END\n\n\n\n\n// endpoint options: START\n\
    The Splunk component supports 43 endpoint options which are listed below:\n\n\
    {% raw %}\n[width=\"100%\",cols=\"2,1,1m,1m,5\",options=\"header\"]\n|=======================================================================\n\
    | Name | Group | Default | Java Type | Description\n| name | common |  | String\
    \ | *Required* Name has no purpose\n| app | common |  | String | Splunk app\n\
    | connectionTimeout | common | 5000 | int | Timeout in MS when connecting to Splunk\
    \ server\n| host | common | localhost | String | Splunk host.\n| owner | common\
    \ |  | String | Splunk owner\n| password | common |  | String | Password for Splunk\n\
    | port | common | 8089 | int | Splunk port\n| scheme | common | https | String\
    \ | Splunk scheme\n| sslProtocol | common | TLSv1.2 | SSLSecurityProtocol | Set\
    \ the ssl protocol to use\n| username | common |  | String | Username for Splunk\n\
    | useSunHttpsHandler | common | false | boolean | Use sun.net.www.protocol.https.Handler\
    \ Https handler to establish the Splunk Connection. Can be useful when running\
    \ in application servers to avoid app. server https handling.\n| bridgeErrorHandler\
    \ | consumer | false | boolean | Allows for bridging the consumer to the Camel\
    \ routing Error Handler which mean any exceptions occurred while the consumer\
    \ is trying to pickup incoming messages or the likes will now be processed as\
    \ a message and handled by the routing Error Handler. By default the consumer\
    \ will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that\
    \ will be logged at WARN/ERROR level and ignored.\n| count | consumer |  | int\
    \ | A number that indicates the maximum number of entities to return.\n| earliestTime\
    \ | consumer |  | String | Earliest time of the search time window.\n| initEarliestTime\
    \ | consumer |  | String | Initial start offset of the first search\n| latestTime\
    \ | consumer |  | String | Latest time of the search time window.\n| savedSearch\
    \ | consumer |  | String | The name of the query saved in Splunk to run\n| search\
    \ | consumer |  | String | The Splunk query to run\n| sendEmptyMessageWhenIdle\
    \ | consumer | false | boolean | If the polling consumer did not poll any files\
    \ you can enable this option to send an empty message (no body) instead.\n| streaming\
    \ | consumer |  | Boolean | Sets streaming mode. Streaming mode sends exchanges\
    \ as they are received rather than in a batch.\n| exceptionHandler | consumer\
    \ (advanced) |  | ExceptionHandler | To let the consumer use a custom ExceptionHandler.\
    \ Notice if the option bridgeErrorHandler is enabled then this options is not\
    \ in use. By default the consumer will deal with exceptions that will be logged\
    \ at WARN/ERROR level and ignored.\n| exchangePattern | consumer (advanced) |\
    \  | ExchangePattern | Sets the exchange pattern when the consumer creates an\
    \ exchange.\n| pollStrategy | consumer (advanced) |  | PollingConsumerPollStrategy\
    \ | A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to\
    \ provide your custom implementation to control error handling usually occurred\
    \ during the poll operation before an Exchange have been created and being routed\
    \ in Camel.\n| eventHost | producer |  | String | Override the default Splunk\
    \ event host field\n| index | producer |  | String | Splunk index to write to\n\
    | raw | producer | false | boolean | Should the payload be inserted raw\n| source\
    \ | producer |  | String | Splunk source argument\n| sourceType | producer | \
    \ | String | Splunk sourcetype argument\n| tcpReceiverPort | producer |  | int\
    \ | Splunk tcp receiver port\n| synchronous | advanced | false | boolean | Sets\
    \ whether synchronous processing should be strictly used or Camel is allowed to\
    \ use asynchronous processing (if supported).\n| backoffErrorThreshold | scheduler\
    \ |  | int | The number of subsequent error polls (failed due some error) that\
    \ should happen before the backoffMultipler should kick-in.\n| backoffIdleThreshold\
    \ | scheduler |  | int | The number of subsequent idle polls that should happen\
    \ before the backoffMultipler should kick-in.\n| backoffMultiplier | scheduler\
    \ |  | int | To let the scheduled polling consumer backoff if there has been a\
    \ number of subsequent idles/errors in a row. The multiplier is then the number\
    \ of polls that will be skipped before the next actual attempt is happening again.\
    \ When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold\
    \ must also be configured.\n| delay | scheduler | 500 | long | Milliseconds before\
    \ the next poll. You can also specify time values using units such as 60s (60\
    \ seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).\n| greedy | scheduler\
    \ | false | boolean | If greedy is enabled then the ScheduledPollConsumer will\
    \ run immediately again if the previous run polled 1 or more messages.\n| initialDelay\
    \ | scheduler | 1000 | long | Milliseconds before the first poll starts. You can\
    \ also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes\
    \ and 30 seconds) and 1h (1 hour).\n| runLoggingLevel | scheduler | TRACE | LoggingLevel\
    \ | The consumer logs a start/complete log line when it polls. This option allows\
    \ you to configure the logging level for that.\n| scheduledExecutorService | scheduler\
    \ |  | ScheduledExecutorService | Allows for configuring a custom/shared thread\
    \ pool to use for the consumer. By default each consumer has its own single threaded\
    \ thread pool.\n| scheduler | scheduler | none | ScheduledPollConsumerScheduler\
    \ | To use a cron scheduler from either camel-spring or camel-quartz2 component\n\
    | schedulerProperties | scheduler |  | Map | To configure additional properties\
    \ when using a custom scheduler or any of the Quartz2 Spring based scheduler.\n\
    | startScheduler | scheduler | true | boolean | Whether the scheduler should be\
    \ auto started.\n| timeUnit | scheduler | MILLISECONDS | TimeUnit | Time unit\
    \ for initialDelay and delay options.\n| useFixedDelay | scheduler | true | boolean\
    \ | Controls if fixed delay or fixed rate is used. See ScheduledExecutorService\
    \ in JDK for details.\n|=======================================================================\n\
    {% endraw %}\n// endpoint options: END\n\n\n[[Splunk-Messagebody]]\nMessage body\n\
    ^^^^^^^^^^^^\n\nSplunk operates on data in key/value pairs. The SplunkEvent class\
    \ is a\nplaceholder for such data, and should be in the message body for the producer.\
    \ \nLikewise it will be returned in the body per search\nresult for the consumer.\n\
    \nAs of Camel 2.16.0 you can send raw data to Splunk by setting the raw\noption\
    \ on the producer endpoint. This is useful for eg. json/xml and\nother payloads\
    \ where Splunk has build in support.\_\n\n[[Splunk-UseCases]]\nUse Cases\n^^^^^^^^^\n\
    \nSearch Twitter for tweets with music and publish events to Splunk\n\n[source,java]\n\
    --------------------------------------------------------------------------------------------------------------------------------------------\n\
    \      from(\"twitter://search?type=polling&keywords=music&delay=10&consumerKey=abc&consumerSecret=def&accessToken=hij&accessTokenSecret=xxx\"\
    )\n          .convertBodyTo(SplunkEvent.class)\n          .to(\"splunk://submit?username=foo&password=bar&index=camel-tweets&sourceType=twitter&source=music-tweets\"\
    );\n--------------------------------------------------------------------------------------------------------------------------------------------\n\
    \nTo convert a Tweet to a SplunkEvent you could use a converter like\n\n[source,java]\n\
    ----------------------------------------------------------------------------------\n\
    @Converter\npublic class Tweet2SplunkEvent {\n    @Converter\n    public static\
    \ SplunkEvent convertTweet(Status status) {\n        SplunkEvent data = new SplunkEvent(\"\
    twitter-message\", null);\n        //data.addPair(\"source\", status.getSource());\n\
    \        data.addPair(\"from_user\", status.getUser().getScreenName());\n    \
    \    data.addPair(\"in_reply_to\", status.getInReplyToScreenName());\n       \
    \ data.addPair(SplunkEvent.COMMON_START_TIME, status.getCreatedAt());\n      \
    \  data.addPair(SplunkEvent.COMMON_EVENT_ID, status.getId());\n        data.addPair(\"\
    text\", status.getText());\n        data.addPair(\"retweet_count\", status.getRetweetCount());\n\
    \        if (status.getPlace() != null) {\n            data.addPair(\"place_country\"\
    , status.getPlace().getCountry());\n            data.addPair(\"place_name\", status.getPlace().getName());\n\
    \            data.addPair(\"place_street\", status.getPlace().getStreetAddress());\n\
    \        }\n        if (status.getGeoLocation() != null) {\n            data.addPair(\"\
    geo_latitude\", status.getGeoLocation().getLatitude());\n            data.addPair(\"\
    geo_longitude\", status.getGeoLocation().getLongitude());\n        }\n       \
    \ return data;\n    }\n}\n----------------------------------------------------------------------------------\n\
    \nSearch Splunk for tweets\n\n[source,java]\n--------------------------------------------------------------------------------------------------------------------------------\n\
    \      from(\"splunk://normal?username=foo&password=bar&initEarliestTime=-2m&search=search\
    \ index=camel-tweets sourcetype=twitter\")\n          .log(\"${body}\");\n--------------------------------------------------------------------------------------------------------------------------------\n\
    \n[[Splunk-Othercomments]]\nOther comments\n^^^^^^^^^^^^^^\n\nSplunk comes with\
    \ a variety of options for leveraging machine generated\ndata with prebuilt apps\
    \ for analyzing and displaying this.  +\n For example the jmx app. could be used\
    \ to publish jmx attributes, eg.\nroute and jvm metrics to Splunk, and displaying\
    \ this on a dashboard.\n\n[[Splunk-SeeAlso]]\nSee Also\n^^^^^^^^\n\n* link:configuring-camel.html[Configuring\
    \ Camel]\n* link:component.html[Component]\n* link:endpoint.html[Endpoint]\n*\
    \ link:getting-started.html[Getting Started]\n\n"
