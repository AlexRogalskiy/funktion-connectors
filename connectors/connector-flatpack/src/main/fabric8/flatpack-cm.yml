---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: flatpack
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: flatpack
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: flatpack
        spec:
          containers:
          - image: funktion/connector-flatpack:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: flatpack
      syntax: flatpack:type:resourceUri
      title: Flatpack
      description: The flatpack component supports fixed width and delimited file parsing via the FlatPack library.
      label: transformation
      deprecated: false
      async: false
      javaType: org.apache.camel.component.flatpack.FlatpackComponent
      groupId: org.apache.camel
      artifactId: camel-flatpack
      version: 2.18.3
    componentProperties: {}
    properties:
      type:
        kind: path
        group: common
        required: false
        type: string
        javaType: org.apache.camel.component.flatpack.FlatpackType
        enum:
        - fixed
        - delim
        deprecated: false
        secret: false
        description: Whether to use fixed or delimiter
        order: 0
      resourceUri:
        kind: path
        group: common
        required: true
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: URL for loading the flatpack mapping file from classpath or file system
        order: 1
      allowShortLines:
        kind: parameter
        group: common
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for lines to be shorter than expected and ignores the extra characters
        order: 2
      delimiter:
        kind: parameter
        group: common
        type: string
        javaType: char
        deprecated: false
        secret: false
        defaultValue: ','
        description: The default character delimiter for delimited files.
        order: 3
      ignoreExtraColumns:
        kind: parameter
        group: common
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for lines to be longer than expected and ignores the extra characters
        order: 4
      ignoreFirstRecord:
        kind: parameter
        group: common
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether the first line is ignored for delimited files (for the column headers).
        order: 5
      splitRows:
        kind: parameter
        group: common
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: true
        description: Sets the Component to send each row as a separate exchange once parsed
        order: 6
      textQualifier:
        kind: parameter
        group: common
        type: string
        javaType: char
        deprecated: false
        secret: false
        description: The text qualifier for delimited files.
        order: 7
      bridgeErrorHandler:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 8
      sendEmptyMessageWhenIdle:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.
        order: 9
      exceptionHandler:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.ExceptionHandler
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 10
      exchangePattern:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.ExchangePattern
        enum:
        - InOnly
        - RobustInOnly
        - InOut
        - InOptionalOut
        - OutOnly
        - RobustOutOnly
        - OutIn
        - OutOptionalIn
        deprecated: false
        secret: false
        description: Sets the exchange pattern when the consumer creates an exchange.
        order: 11
      pollStrategy:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.PollingConsumerPollStrategy
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.
        order: 12
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 13
      backoffErrorThreshold:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.
        order: 14
      backoffIdleThreshold:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.
        order: 15
      backoffMultiplier:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.
        order: 16
      delay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: long
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: "500"
        description: Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
        order: 17
      greedy:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.
        order: 18
      initialDelay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: long
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: "1000"
        description: Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
        order: 19
      runLoggingLevel:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: org.apache.camel.LoggingLevel
        enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - OFF
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: TRACE
        description: The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.
        order: 20
      scheduledExecutorService:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: object
        javaType: java.util.concurrent.ScheduledExecutorService
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.
        order: 21
      scheduler:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: org.apache.camel.spi.ScheduledPollConsumerScheduler
        enum:
        - none
        - spring
        - quartz2
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: none
        description: To use a cron scheduler from either camel-spring or camel-quartz2 component
        order: 22
      schedulerProperties:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: object
        javaType: java.util.Map<java.lang.String,java.lang.Object>
        prefix: scheduler.
        multiValue: true
        deprecated: false
        secret: false
        description: To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.
        order: 23
      startScheduler:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether the scheduler should be auto started.
        order: 24
      timeUnit:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: java.util.concurrent.TimeUnit
        enum:
        - NANOSECONDS
        - MICROSECONDS
        - MILLISECONDS
        - SECONDS
        - MINUTES
        - HOURS
        - DAYS
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: MILLISECONDS
        description: Time unit for initialDelay and delay options.
        order: 25
      useFixedDelay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: true
        description: Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.
        order: 26
  documentation.adoc: |+
    [[Flatpack-FlatpackComponent]]
    Flatpack Component
    ~~~~~~~~~~~~~~~~~~

    The Flatpack component supports fixed width and delimited file parsing
    via the http://flatpack.sourceforge.net[FlatPack library]. +
     *Notice:* This component only supports consuming from flatpack files to
    Object model. You can not (yet) write from Object model to flatpack
    format.

    Maven users will need to add the following dependency to their `pom.xml`
    for this component:

    [source,xml]
    ------------------------------------------------------------
    <dependency>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-flatpack</artifactId>
        <version>x.x.x</version>
        <!-- use the same version as your Camel core version -->
    </dependency>
    ------------------------------------------------------------

    [[Flatpack-URIformat]]
    URI format
    ^^^^^^^^^^

    [source,java]
    ---------------------------------------------------------
    flatpack:[delim|fixed]:flatPackConfig.pzmap.xml[?options]
    ---------------------------------------------------------

    Or for a delimited file handler with no configuration file just use

    [source,java]
    ---------------------------
    flatpack:someName[?options]
    ---------------------------

    You can append query options to the URI in the following format,
    `?option=value&option=value&...`

    [[Flatpack-URIOptions]]
    URI Options
    ^^^^^^^^^^^

    // component options: START
    The Flatpack component has no options.
    // component options: END

    // endpoint options: START
    The Flatpack component supports 27 endpoint options which are listed below:

    {% raw %}
    [width="100%",cols="2,1,1m,1m,5",options="header"]
    |=======================================================================
    | Name | Group | Default | Java Type | Description
    | type | common |  | FlatpackType | Whether to use fixed or delimiter
    | resourceUri | common |  | String | *Required* URL for loading the flatpack mapping file from classpath or file system
    | allowShortLines | common | false | boolean | Allows for lines to be shorter than expected and ignores the extra characters
    | delimiter | common | , | char | The default character delimiter for delimited files.
    | ignoreExtraColumns | common | false | boolean | Allows for lines to be longer than expected and ignores the extra characters
    | ignoreFirstRecord | common | true | boolean | Whether the first line is ignored for delimited files (for the column headers).
    | splitRows | common | true | boolean | Sets the Component to send each row as a separate exchange once parsed
    | textQualifier | common |  | char | The text qualifier for delimited files.
    | bridgeErrorHandler | consumer | false | boolean | Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
    | sendEmptyMessageWhenIdle | consumer | false | boolean | If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.
    | exceptionHandler | consumer (advanced) |  | ExceptionHandler | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
    | exchangePattern | consumer (advanced) |  | ExchangePattern | Sets the exchange pattern when the consumer creates an exchange.
    | pollStrategy | consumer (advanced) |  | PollingConsumerPollStrategy | A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.
    | synchronous | advanced | false | boolean | Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
    | backoffErrorThreshold | scheduler |  | int | The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.
    | backoffIdleThreshold | scheduler |  | int | The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.
    | backoffMultiplier | scheduler |  | int | To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.
    | delay | scheduler | 500 | long | Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
    | greedy | scheduler | false | boolean | If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.
    | initialDelay | scheduler | 1000 | long | Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
    | runLoggingLevel | scheduler | TRACE | LoggingLevel | The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.
    | scheduledExecutorService | scheduler |  | ScheduledExecutorService | Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.
    | scheduler | scheduler | none | ScheduledPollConsumerScheduler | To use a cron scheduler from either camel-spring or camel-quartz2 component
    | schedulerProperties | scheduler |  | Map | To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.
    | startScheduler | scheduler | true | boolean | Whether the scheduler should be auto started.
    | timeUnit | scheduler | MILLISECONDS | TimeUnit | Time unit for initialDelay and delay options.
    | useFixedDelay | scheduler | true | boolean | Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.
    |=======================================================================
    {% endraw %}
    // endpoint options: END

    [[Flatpack-Examples]]
    Examples
    ^^^^^^^^

    * `flatpack:fixed:foo.pzmap.xml` creates a fixed-width endpoint using
    the `foo.pzmap.xml` file configuration.
    * `flatpack:delim:bar.pzmap.xml` creates a delimited endpoint using the
    `bar.pzmap.xml` file configuration.
    * `flatpack:foo` creates a delimited endpoint called `foo` with no file
    configuration.

    [[Flatpack-MessageHeaders]]
    Message Headers
    ^^^^^^^^^^^^^^^

    Camel will store the following headers on the IN message:

    [width="100%",cols="50%,50%",options="header",]
    |=======================================================================
    |Header |Description

    |`camelFlatpackCounter` |The current row index. For `splitRows=false` the counter is the total
    number of rows.
    |=======================================================================

    [[Flatpack-MessageBody]]
    Message Body
    ^^^^^^^^^^^^

    The component delivers the data in the IN message as a
    `org.apache.camel.component.flatpack.DataSetList` object that has
    converters for `java.util.Map` or `java.util.List`. +
     Usually you want the `Map` if you process one row at a time
    (`splitRows=true`). Use `List` for the entire content
    (`splitRows=false`), where each element in the list is a `Map`. +
     Each `Map` contains the key for the column name and its corresponding
    value.

    For example to get the firstname from the sample below:

    [source,java]
    ------------------------------------------------
      Map row = exchange.getIn().getBody(Map.class);
      String firstName = row.get("FIRSTNAME");
    ------------------------------------------------

    However, you can also always get it as a `List` (even for
    `splitRows=true`). The same example:

    [source,java]
    ---------------------------------------------------
      List data = exchange.getIn().getBody(List.class);
      Map row = (Map)data.get(0);
      String firstName = row.get("FIRSTNAME");
    ---------------------------------------------------

    [[Flatpack-HeaderandTrailerrecords]]
    Header and Trailer records
    ^^^^^^^^^^^^^^^^^^^^^^^^^^

    The header and trailer notions in Flatpack are supported. However, you
    *must* use fixed record IDs:

    * `header` for the header record (must be lowercase)
    * `trailer` for the trailer record (must be lowercase)

    The example below illustrates this fact that we have a header and a
    trailer. You can omit one or both of them if not needed.

    [source,xml]
    ---------------------------------------------------------------------------
        <RECORD id="header" startPosition="1" endPosition="3" indicator="HBT">
            <COLUMN name="INDICATOR" length="3"/>
            <COLUMN name="DATE" length="8"/>
        </RECORD>

        <COLUMN name="FIRSTNAME" length="35" />
        <COLUMN name="LASTNAME" length="35" />
        <COLUMN name="ADDRESS" length="100" />
        <COLUMN name="CITY" length="100" />
        <COLUMN name="STATE" length="2" />
        <COLUMN name="ZIP" length="5" />

        <RECORD id="trailer" startPosition="1" endPosition="3" indicator="FBT">
            <COLUMN name="INDICATOR" length="3"/>
            <COLUMN name="STATUS" length="7"/>
        </RECORD>
    ---------------------------------------------------------------------------

    [[Flatpack-Usingtheendpoint]]
    Using the endpoint
    ^^^^^^^^^^^^^^^^^^

    A common use case is sending a file to this endpoint for further
    processing in a separate route. For example:

    [source,xml]
    -----------------------------------------------------------------------
      <camelContext xmlns="http://activemq.apache.org/camel/schema/spring">
        <route>
          <from uri="file://someDirectory"/>
          <to uri="flatpack:foo"/>
        </route>

        <route>
          <from uri="flatpack:foo"/>
          ...
        </route>
      </camelContext>
    -----------------------------------------------------------------------

    You can also convert the payload of each message created to a `Map` for
    easy link:bean-integration.html[Bean Integration]

    [[Flatpack-FlatpackDataFormat]]
    Flatpack DataFormat
    ~~~~~~~~~~~~~~~~~~~

    The link:flatpack.html[Flatpack] component ships with the Flatpack data
    format that can be used to format between fixed width or delimited text
    messages to a `List` of rows as `Map`.

    * marshal = from `List<Map<String, Object>>` to `OutputStream` (can be
    converted to `String`)
    * unmarshal = from `java.io.InputStream` (such as a `File` or `String`)
    to a `java.util.List` as an
    `org.apache.camel.component.flatpack.DataSetList` instance. +
     The result of the operation will contain all the data. If you need to
    process each row one by one you can split the exchange, using
    link:splitter.html[Splitter].

    *Notice:* The Flatpack library does currently not support header and
    trailers for the marshal operation.

    [[Flatpack-Options]]
    Options
    ^^^^^^^

    The data format has the following options:

    [width="100%",cols="10%,10%,80%",options="header",]
    |=======================================================================
    |Option |Default |Description

    |`definition` |`null` |The flatpack pzmap configuration file. Can be omitted in simpler
    situations, but its preferred to use the pzmap.

    |`fixed` |`false` |Delimited or fixed.

    |`ignoreFirstRecord` |`true` |Whether the first line is ignored for delimited files (for the column
    headers).

    |`textQualifier` |`"` |If the text is qualified with a char such as `"`.

    |`delimiter` |`,` |The delimiter char (could be `;` `,` or similar)

    |`parserFactory` |`null` |Uses the default Flatpack parser factory.

    |`allowShortLines` |`false` |*Camel 2.9.7 and 2.10.5 onwards*: Allows for lines to be shorter than
    expected and ignores the extra characters.

    |`ignoreExtraColumns` |`false` |*Camel 2.9.7 and 2.10.5 onwards*: Allows for lines to be longer than
    expected and ignores the extra characters.
    |=======================================================================

    [[Flatpack-Usage]]
    Usage
    ^^^^^

    To use the data format, simply instantiate an instance and invoke the
    marshal or unmarshal operation in the route builder:

    [source,java]
    ---------------------------------------------------------------------------
      FlatpackDataFormat fp = new FlatpackDataFormat();
      fp.setDefinition(new ClassPathResource("INVENTORY-Delimited.pzmap.xml"));
      ...
      from("file:order/in").unmarshal(df).to("seda:queue:neworder");
    ---------------------------------------------------------------------------

    The sample above will read files from the `order/in` folder and
    unmarshal the input using the Flatpack configuration file
    `INVENTORY-Delimited.pzmap.xml` that configures the structure of the
    files. The result is a `DataSetList` object we store on the SEDA queue.

    [source,java]
    -----------------------------------------------------------------------------------
    FlatpackDataFormat df = new FlatpackDataFormat();
    df.setDefinition(new ClassPathResource("PEOPLE-FixedLength.pzmap.xml"));
    df.setFixed(true);
    df.setIgnoreFirstRecord(false);

    from("seda:people").marshal(df).convertBodyTo(String.class).to("jms:queue:people");
    -----------------------------------------------------------------------------------

    In the code above we marshal the data from a Object representation as a
    `List` of rows as `Maps`. The rows as `Map` contains the column name as
    the key, and the the corresponding value. This structure can be created
    in Java code from e.g. a processor. We marshal the data according to the
    Flatpack format and convert the result as a `String` object and store it
    on a JMS queue.

    [[Flatpack-Dependencies]]
    Dependencies
    ^^^^^^^^^^^^

    To use Flatpack in your camel routes you need to add the a dependency on
    *camel-flatpack* which implements this data format.

    If you use maven you could just add the following to your pom.xml,
    substituting the version number for the latest & greatest release (see
    link:download.html[the download page for the latest versions]).

    [source,java]
    -----------------------------------------
    <dependency>
      <groupId>org.apache.camel</groupId>
      <artifactId>camel-flatpack</artifactId>
      <version>x.x.x</version>
    </dependency>
    -----------------------------------------

    [[Flatpack-SeeAlso]]
    See Also
    ^^^^^^^^

    * link:configuring-camel.html[Configuring Camel]
    * link:component.html[Component]
    * link:endpoint.html[Endpoint]
    * link:getting-started.html[Getting Started]

