---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    funktion.fabric8.io/kind: Connector
  name: aws-ddbstream
data:
  deployment.yml: |
    ---
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        funktion.fabric8.io/kind: Subscription
        connector: aws-ddbstream
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            funktion.fabric8.io/kind: Subscription
            connector: aws-ddbstream
        spec:
          containers:
          - image: funktion/connector-aws-ddbstream:${project.version}
            name: connector
  schema.yml: |
    ---
    component:
      kind: component
      scheme: aws-ddbstream
      syntax: aws-ddbstream:tableName
      title: AWS DynamoDB Streams
      description: The aws-ddbstream component is used for working with Amazon DynamoDB Streams.
      label: cloud,messaging,streams
      deprecated: false
      async: false
      consumerOnly: true
      javaType: org.apache.camel.component.aws.ddbstream.DdbStreamComponent
      groupId: org.apache.camel
      artifactId: camel-aws
      version: 2.18.3
    componentProperties: {}
    properties:
      tableName:
        kind: path
        group: consumer
        label: consumer
        required: true
        type: string
        javaType: java.lang.String
        deprecated: false
        secret: false
        description: Name of the dynamodb table
        order: 0
      amazonDynamoDbStreamsClient:
        kind: parameter
        group: consumer
        label: consumer
        required: true
        type: object
        javaType: com.amazonaws.services.dynamodbv2.AmazonDynamoDBStreams
        deprecated: false
        secret: false
        description: Amazon DynamoDB client to use for all requests for this endpoint
        order: 1
      bridgeErrorHandler:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 2
      iteratorType:
        kind: parameter
        group: consumer
        label: consumer
        type: string
        javaType: com.amazonaws.services.dynamodbv2.model.ShardIteratorType
        enum:
        - TRIM_HORIZON
        - LATEST
        - AT_SEQUENCE_NUMBER
        - AFTER_SEQUENCE_NUMBER
        deprecated: false
        secret: false
        defaultValue: LATEST
        description: Defines where in the DynaboDB stream to start getting records. Note that using TRIM_HORIZON can cause a significant delay before the stream has caught up to real-time. if ATAFTER_SEQUENCE_NUMBER are used then a sequenceNumberProvider MUST be supplied.
        order: 3
      maxResultsPerRequest:
        kind: parameter
        group: consumer
        label: consumer
        type: integer
        javaType: int
        deprecated: false
        secret: false
        description: Maximum number of records that will be fetched in each poll
        order: 4
      sendEmptyMessageWhenIdle:
        kind: parameter
        group: consumer
        label: consumer
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.
        order: 5
      sequenceNumberProvider:
        kind: parameter
        group: consumer
        label: consumer
        type: object
        javaType: org.apache.camel.component.aws.ddbstream.SequenceNumberProvider
        deprecated: false
        secret: false
        description: Provider for the sequence number when using one of the two ShardIteratorType.ATAFTER_SEQUENCE_NUMBER iterator types. Can be a registry reference or a literal sequence number.
        order: 6
      exceptionHandler:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.ExceptionHandler
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
        order: 7
      exchangePattern:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: string
        javaType: org.apache.camel.ExchangePattern
        enum:
        - InOnly
        - RobustInOnly
        - InOut
        - InOptionalOut
        - OutOnly
        - RobustOutOnly
        - OutIn
        - OutOptionalIn
        deprecated: false
        secret: false
        description: Sets the exchange pattern when the consumer creates an exchange.
        order: 8
      pollStrategy:
        kind: parameter
        group: consumer (advanced)
        label: consumer,advanced
        type: object
        javaType: org.apache.camel.spi.PollingConsumerPollStrategy
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.
        order: 9
      synchronous:
        kind: parameter
        group: advanced
        label: advanced
        type: boolean
        javaType: boolean
        deprecated: false
        secret: false
        defaultValue: false
        description: Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
        order: 10
      backoffErrorThreshold:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.
        order: 11
      backoffIdleThreshold:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.
        order: 12
      backoffMultiplier:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: int
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.
        order: 13
      delay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: long
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: "500"
        description: Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
        order: 14
      greedy:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: false
        description: If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.
        order: 15
      initialDelay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: integer
        javaType: long
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: "1000"
        description: Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
        order: 16
      runLoggingLevel:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: org.apache.camel.LoggingLevel
        enum:
        - TRACE
        - DEBUG
        - INFO
        - WARN
        - ERROR
        - OFF
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: TRACE
        description: The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.
        order: 17
      scheduledExecutorService:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: object
        javaType: java.util.concurrent.ScheduledExecutorService
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        description: Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.
        order: 18
      scheduler:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: org.apache.camel.spi.ScheduledPollConsumerScheduler
        enum:
        - none
        - spring
        - quartz2
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: none
        description: To use a cron scheduler from either camel-spring or camel-quartz2 component
        order: 19
      schedulerProperties:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: object
        javaType: java.util.Map<java.lang.String,java.lang.Object>
        prefix: scheduler.
        multiValue: true
        deprecated: false
        secret: false
        description: To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.
        order: 20
      startScheduler:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: true
        description: Whether the scheduler should be auto started.
        order: 21
      timeUnit:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: string
        javaType: java.util.concurrent.TimeUnit
        enum:
        - NANOSECONDS
        - MICROSECONDS
        - MILLISECONDS
        - SECONDS
        - MINUTES
        - HOURS
        - DAYS
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: MILLISECONDS
        description: Time unit for initialDelay and delay options.
        order: 22
      useFixedDelay:
        kind: parameter
        group: scheduler
        label: consumer,scheduler
        type: boolean
        javaType: boolean
        optionalPrefix: consumer.
        deprecated: false
        secret: false
        defaultValue: true
        description: Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.
        order: 23
  documentation.adoc: |+
    [[AWS-DDBSTREAM-DynamoDBStreamComponent]]
    DynamoDB Stream Component
    ~~~~~~~~~~~~~~~~~~~~~~~~~

    *Available as of Camel 2.7*

    The DynamoDB Stream component supports receiving messages from
    Amazon DynamoDB Stream service.

    Prerequisites

    You must have a valid Amazon Web Services developer account, and be
    signed up to use Amazon DynamoDB Streams. More information are available
    at http://aws.amazon.com/dynamodb/[AWS DynamoDB]

    [[AWS-DDBSTREAM-URIFormat]]
    URI Format
    ^^^^^^^^^^

    [source,java]
    ------------------------------------
    aws-ddbstream://table-name[?options]
    ------------------------------------

    The stream needs to be created prior to it being used. +
     You can append query options to the URI in the following format,
    ?options=value&option2=value&...

    [[AWS-DDBSTREAM-URIOptions]]
    URI Options
    ^^^^^^^^^^^


    // component options: START
    The AWS DynamoDB Streams component has no options.
    // component options: END






    // endpoint options: START
    The AWS DynamoDB Streams component supports 24 endpoint options which are listed below:

    {% raw %}
    [width="100%",cols="2,1,1m,1m,5",options="header"]
    |=======================================================================
    | Name | Group | Default | Java Type | Description
    | tableName | consumer |  | String | *Required* Name of the dynamodb table
    | amazonDynamoDbStreamsClient | consumer |  | AmazonDynamoDBStreams | *Required* Amazon DynamoDB client to use for all requests for this endpoint
    | bridgeErrorHandler | consumer | false | boolean | Allows for bridging the consumer to the Camel routing Error Handler which mean any exceptions occurred while the consumer is trying to pickup incoming messages or the likes will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions that will be logged at WARN/ERROR level and ignored.
    | iteratorType | consumer | LATEST | ShardIteratorType | Defines where in the DynaboDB stream to start getting records. Note that using TRIM_HORIZON can cause a significant delay before the stream has caught up to real-time. if ATAFTER_SEQUENCE_NUMBER are used then a sequenceNumberProvider MUST be supplied.
    | maxResultsPerRequest | consumer |  | int | Maximum number of records that will be fetched in each poll
    | sendEmptyMessageWhenIdle | consumer | false | boolean | If the polling consumer did not poll any files you can enable this option to send an empty message (no body) instead.
    | sequenceNumberProvider | consumer |  | SequenceNumberProvider | Provider for the sequence number when using one of the two ShardIteratorType.ATAFTER_SEQUENCE_NUMBER iterator types. Can be a registry reference or a literal sequence number.
    | exceptionHandler | consumer (advanced) |  | ExceptionHandler | To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this options is not in use. By default the consumer will deal with exceptions that will be logged at WARN/ERROR level and ignored.
    | exchangePattern | consumer (advanced) |  | ExchangePattern | Sets the exchange pattern when the consumer creates an exchange.
    | pollStrategy | consumer (advanced) |  | PollingConsumerPollStrategy | A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel.
    | synchronous | advanced | false | boolean | Sets whether synchronous processing should be strictly used or Camel is allowed to use asynchronous processing (if supported).
    | backoffErrorThreshold | scheduler |  | int | The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in.
    | backoffIdleThreshold | scheduler |  | int | The number of subsequent idle polls that should happen before the backoffMultipler should kick-in.
    | backoffMultiplier | scheduler |  | int | To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured.
    | delay | scheduler | 500 | long | Milliseconds before the next poll. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
    | greedy | scheduler | false | boolean | If greedy is enabled then the ScheduledPollConsumer will run immediately again if the previous run polled 1 or more messages.
    | initialDelay | scheduler | 1000 | long | Milliseconds before the first poll starts. You can also specify time values using units such as 60s (60 seconds) 5m30s (5 minutes and 30 seconds) and 1h (1 hour).
    | runLoggingLevel | scheduler | TRACE | LoggingLevel | The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that.
    | scheduledExecutorService | scheduler |  | ScheduledExecutorService | Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool.
    | scheduler | scheduler | none | ScheduledPollConsumerScheduler | To use a cron scheduler from either camel-spring or camel-quartz2 component
    | schedulerProperties | scheduler |  | Map | To configure additional properties when using a custom scheduler or any of the Quartz2 Spring based scheduler.
    | startScheduler | scheduler | true | boolean | Whether the scheduler should be auto started.
    | timeUnit | scheduler | MILLISECONDS | TimeUnit | Time unit for initialDelay and delay options.
    | useFixedDelay | scheduler | true | boolean | Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details.
    |=======================================================================
    {% endraw %}
    // endpoint options: END





    Required DynampDBStream component options

    You have to provide the amazonDynamoDbStreamsClient in the
    link:registry.html[Registry] with proxies and relevant credentials
    configured.

    [[AWS-DDBSTREAM-SequenceNumbers]]
    Sequence Numbers
    ^^^^^^^^^^^^^^^^

    You can provide a literal string as the sequence number or provide a
    bean in the registry. An example of using the bean would be to save your
    current position in the change feed and restore it on Camel startup.

    It is an error to provide a sequence number that is greater than the
    largest sequence number in the describe-streams result, as this will
    lead to the AWS call returning an HTTP 400.

    [[AWS-DDBSTREAM-BatchConsumer]]
    Batch Consumer
    ^^^^^^^^^^^^^^

    This component implements the link:batch-consumer.html[Batch Consumer].

    This allows you for instance to know how many messages exists in this
    batch and for instance let the link:aggregator.html[Aggregator]
    aggregate this number of messages.

    [[AWS-DDBSTREAM-Usage]]
    Usage
    ^^^^^

    [[AWS-DDBSTREAM-AmazonDynamoDBStreamsClientconfiguration]]
    AmazonDynamoDBStreamsClient configuration
    +++++++++++++++++++++++++++++++++++++++++

    You will need to create an instance of AmazonDynamoDBStreamsClient and
    bind it to the registry

    [source,java]
    --------------------------------------------------------------------------------------------------------------------
    ClientConfiguration clientConfiguration = new ClientConfiguration();
    clientConfiguration.setProxyHost("http://myProxyHost");
    clientConfiguration.setProxyPort(8080);

    Region region = Region.getRegion(Regions.fromName(region));
    region.createClient(AmazonDynamoDBStreamsClient.class, null, clientConfiguration);
    // the 'null' here is the AWSCredentialsProvider which defaults to an instance of DefaultAWSCredentialsProviderChain

    registry.bind("kinesisClient", client);
    --------------------------------------------------------------------------------------------------------------------

    [[AWS-DDBSTREAM-ProvidingAWSCredentials]]
    Providing AWS Credentials
    +++++++++++++++++++++++++

    It is recommended that the credentials are obtained by using the
    http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/DefaultAWSCredentialsProviderChain.html[DefaultAWSCredentialsProviderChain]
    that is the default when creating a new ClientConfiguration instance,
    however, a
    different http://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/auth/AWSCredentialsProvider.html[AWSCredentialsProvider]
    can be specified when calling createClient(...).

    [[AWS-DDBSTREAM-CopingwithDowntime]]
    Coping with Downtime
    ^^^^^^^^^^^^^^^^^^^^

    [[AWS-DDBSTREAM-AWSDynamoDBStreamsoutageoflessthan24hours]]
    AWS DynamoDB Streams outage of less than 24 hours
    +++++++++++++++++++++++++++++++++++++++++++++++++

    The consumer will resume from the last seen sequence number (as
    implemented
    for https://issues.apache.org/jira/browse/CAMEL-9515[CAMEL-9515]), so
    you should receive a flood of events in quick succession, as long as the
    outage did not also include DynamoDB itself.

    [[AWS-DDBSTREAM-AWSDynamoDBStreamsoutageofmorethan24hours]]
    AWS DynamoDB Streams outage of more than 24 hours
    +++++++++++++++++++++++++++++++++++++++++++++++++

    Given that AWS only retain 24 hours worth of changes, you will have
    missed change events no matter what mitigations are in place.

    [[AWS-DDBSTREAM-Dependencies]]
    Dependencies
    ^^^^^^^^^^^^

    Maven users will need to add the following dependency to their pom.xml.

    *pom.xml*

    [source,xml]
    ---------------------------------------
    <dependency>
        <groupId>org.apache.camel</groupId>
        <artifactId>camel-aws</artifactId>
        <version>${camel-version}</version>
    </dependency>
    ---------------------------------------

    where `${camel-version`} must be replaced by the actual version of Camel
    (2.7 or higher).

    [[AWS-DDBSTREAM-SeeAlso]]
    See Also
    ^^^^^^^^

    * link:configuring-camel.html[Configuring Camel]
    * link:component.html[Component]
    * link:endpoint.html[Endpoint]
    * link:getting-started.html[Getting Started]

    * link:aws.html[AWS Component] +
     +

